ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	NumberOfMeasurements
  19              		.bss
  20              		.align	2
  21              		.type	NumberOfMeasurements, %object
  22              		.size	NumberOfMeasurements, 4
  23              	NumberOfMeasurements:
  24 0000 00000000 		.space	4
  25              		.comm	ADC_value,4,4
  26              		.comm	Number,4000,4
  27              		.comm	Lifetime,4000,4
  28              		.global	Lifetime_max
  29              		.align	2
  30              		.type	Lifetime_max, %object
  31              		.size	Lifetime_max, 4
  32              	Lifetime_max:
  33 0004 00000000 		.space	4
  34              		.global	menustate
  35              		.type	menustate, %object
  36              		.size	menustate, 1
  37              	menustate:
  38 0008 00       		.space	1
  39              		.comm	RX_Buffer,4,4
  40              		.global	counter_Timer1_steps
  41 0009 000000   		.align	2
  42              		.type	counter_Timer1_steps, %object
  43              		.size	counter_Timer1_steps, 4
  44              	counter_Timer1_steps:
  45 000c 00000000 		.space	4
  46              		.global	counter_Lamella_Number
  47              		.align	2
  48              		.type	counter_Lamella_Number, %object
  49              		.size	counter_Lamella_Number, 4
  50              	counter_Lamella_Number:
  51 0010 00000000 		.space	4
  52              		.comm	counter_Lamella_Relaxation_steps,4,4
  53              		.comm	counter_Maximum_Lamella_Time_steps,4,4
  54              		.comm	counter_Rupture_Confirmation_Target,4,4
  55              		.global	counter_Rupture_Confirmation
  56              		.align	2
  57              		.type	counter_Rupture_Confirmation, %object
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 2


  58              		.size	counter_Rupture_Confirmation, 4
  59              	counter_Rupture_Confirmation:
  60 0014 00000000 		.space	4
  61              		.global	bool_Rupture_Confirmed
  62              		.align	2
  63              		.type	bool_Rupture_Confirmed, %object
  64              		.size	bool_Rupture_Confirmed, 4
  65              	bool_Rupture_Confirmed:
  66 0018 00000000 		.space	4
  67              		.comm	WidthOfBin,4,4
  68              		.global	timerflag100ms
  69              		.type	timerflag100ms, %object
  70              		.size	timerflag100ms, 1
  71              	timerflag100ms:
  72 001c 00       		.space	1
  73              		.global	timerflag1000ms
  74              		.type	timerflag1000ms, %object
  75              		.size	timerflag1000ms, 1
  76              	timerflag1000ms:
  77 001d 00       		.space	1
  78              		.global	timerflag5000ms
  79              		.type	timerflag5000ms, %object
  80              		.size	timerflag5000ms, 1
  81              	timerflag5000ms:
  82 001e 00       		.space	1
  83              		.global	cnt_timer100ms
  84 001f 00       		.align	2
  85              		.type	cnt_timer100ms, %object
  86              		.size	cnt_timer100ms, 4
  87              	cnt_timer100ms:
  88 0020 00000000 		.space	4
  89              		.global	cnt_timer1000ms
  90              		.align	2
  91              		.type	cnt_timer1000ms, %object
  92              		.size	cnt_timer1000ms, 4
  93              	cnt_timer1000ms:
  94 0024 00000000 		.space	4
  95              		.global	cnt_timer5000ms
  96              		.align	2
  97              		.type	cnt_timer5000ms, %object
  98              		.size	cnt_timer5000ms, 4
  99              	cnt_timer5000ms:
 100 0028 00000000 		.space	4
 101              		.global	slider_ready
 102              		.type	slider_ready, %object
 103              		.size	slider_ready, 1
 104              	slider_ready:
 105 002c 00       		.space	1
 106              		.global	Measurement_running
 107              		.type	Measurement_running, %object
 108              		.size	Measurement_running, 1
 109              	Measurement_running:
 110 002d 00       		.space	1
 111              		.global	present_Result_saved
 112 002e 0000     		.align	2
 113              		.type	present_Result_saved, %object
 114              		.size	present_Result_saved, 4
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 3


 115              	present_Result_saved:
 116 0030 00000000 		.space	4
 117              		.global	new_pickup_initialized
 118              		.type	new_pickup_initialized, %object
 119              		.size	new_pickup_initialized, 1
 120              	new_pickup_initialized:
 121 0034 00       		.space	1
 122              		.global	slider_val_sent
 123              		.type	slider_val_sent, %object
 124              		.size	slider_val_sent, 1
 125              	slider_val_sent:
 126 0035 00       		.space	1
 127              		.global	slider_val_received
 128              		.type	slider_val_received, %object
 129              		.size	slider_val_received, 1
 130              	slider_val_received:
 131 0036 00       		.space	1
 132              		.global	present_LiveData_plot_refreshed
 133 0037 00       		.align	2
 134              		.type	present_LiveData_plot_refreshed, %object
 135              		.size	present_LiveData_plot_refreshed, 4
 136              	present_LiveData_plot_refreshed:
 137 0038 00000000 		.space	4
 138              		.global	current_RescaledData_plot_refreshed
 139              		.align	2
 140              		.type	current_RescaledData_plot_refreshed, %object
 141              		.size	current_RescaledData_plot_refreshed, 4
 142              	current_RescaledData_plot_refreshed:
 143 003c 00000000 		.space	4
 144              		.global	STI100_writing
 145              		.align	2
 146              		.type	STI100_writing, %object
 147              		.size	STI100_writing, 4
 148              	STI100_writing:
 149 0040 00000000 		.space	4
 150              		.global	STI100_write_requested
 151              		.align	2
 152              		.type	STI100_write_requested, %object
 153              		.size	STI100_write_requested, 4
 154              	STI100_write_requested:
 155 0044 00000000 		.space	4
 156              		.global	STI100_present_results_saved
 157              		.align	2
 158              		.type	STI100_present_results_saved, %object
 159              		.size	STI100_present_results_saved, 4
 160              	STI100_present_results_saved:
 161 0048 00000000 		.space	4
 162              		.comm	num_str,20,4
 163              		.comm	NameOfValuebox,4,4
 164              		.global	i
 165              		.align	2
 166              		.type	i, %object
 167              		.size	i, 4
 168              	i:
 169 004c 00000000 		.space	4
 170              		.global	j
 171              		.align	2
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 4


 172              		.type	j, %object
 173              		.size	j, 4
 174              	j:
 175 0050 00000000 		.space	4
 176              		.global	plot_every_nth
 177              		.data
 178              		.align	2
 179              		.type	plot_every_nth, %object
 180              		.size	plot_every_nth, 4
 181              	plot_every_nth:
 182 0000 01000000 		.word	1
 183              		.global	Lamella_Logger_Time_s
 184              		.section	.rodata
 185              		.align	2
 186              		.type	Lamella_Logger_Time_s, %object
 187              		.size	Lamella_Logger_Time_s, 4
 188              	Lamella_Logger_Time_s:
 189 0000 01000000 		.word	1
 190              		.comm	counter_Lamella_Logger_steps,4,4
 191              		.global	Maximum_Lamella_Time_h
 192              		.align	2
 193              		.type	Maximum_Lamella_Time_h, %object
 194              		.size	Maximum_Lamella_Time_h, 4
 195              	Maximum_Lamella_Time_h:
 196 0004 0000403F 		.word	1061158912
 197              		.global	Lamella_Relaxation_Time_s
 198              		.align	2
 199              		.type	Lamella_Relaxation_Time_s, %object
 200              		.size	Lamella_Relaxation_Time_s, 4
 201              	Lamella_Relaxation_Time_s:
 202 0008 01000000 		.word	1
 203              		.global	Rupture_Confirmation_Time_s
 204              		.align	2
 205              		.type	Rupture_Confirmation_Time_s, %object
 206              		.size	Rupture_Confirmation_Time_s, 4
 207              	Rupture_Confirmation_Time_s:
 208 000c 0000003F 		.word	1056964608
 209              		.global	SampligCountsPerSecond
 210              		.align	2
 211              		.type	SampligCountsPerSecond, %object
 212              		.size	SampligCountsPerSecond, 4
 213              	SampligCountsPerSecond:
 214 0010 0A000000 		.word	10
 215              		.global	LamellaFormationTime_ms
 216              		.align	2
 217              		.type	LamellaFormationTime_ms, %object
 218              		.size	LamellaFormationTime_ms, 4
 219              	LamellaFormationTime_ms:
 220 0014 C4090000 		.word	2500
 221              		.section	.text.Laser_ON,"ax",%progbits
 222              		.align	2
 223              		.global	Laser_ON
 224              		.thumb
 225              		.thumb_func
 226              		.type	Laser_ON, %function
 227              	Laser_ON:
 228              	.LFB56:
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 5


 229              		.file 1 "Laser_Control.h"
   1:Laser_Control.h **** /* ========================================
   2:Laser_Control.h ****  *
   3:Laser_Control.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:Laser_Control.h ****  * All Rights Reserved
   5:Laser_Control.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:Laser_Control.h ****  *
   7:Laser_Control.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:Laser_Control.h ****  * WHICH IS THE PROPERTY OF your company.
   9:Laser_Control.h ****  *
  10:Laser_Control.h ****  * ========================================
  11:Laser_Control.h **** */
  12:Laser_Control.h **** 
  13:Laser_Control.h **** #include <project.h>
  14:Laser_Control.h **** 
  15:Laser_Control.h **** //
  16:Laser_Control.h **** // Laser anschalten
  17:Laser_Control.h **** // 
  18:Laser_Control.h **** void Laser_ON (void)
  19:Laser_Control.h **** {
 230              		.loc 1 19 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234 0000 80B5     		push	{r7, lr}
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 00AF     		add	r7, sp, #0
 239              		.cfi_def_cfa_register 7
  20:Laser_Control.h ****     Pin_LaserEN_Write(1);
 240              		.loc 1 20 0
 241 0004 0120     		movs	r0, #1
 242 0006 FFF7FEFF 		bl	Pin_LaserEN_Write
  21:Laser_Control.h **** }
 243              		.loc 1 21 0
 244 000a 80BD     		pop	{r7, pc}
 245              		.cfi_endproc
 246              	.LFE56:
 247              		.size	Laser_ON, .-Laser_ON
 248              		.section	.text.Laser_OFF,"ax",%progbits
 249              		.align	2
 250              		.global	Laser_OFF
 251              		.thumb
 252              		.thumb_func
 253              		.type	Laser_OFF, %function
 254              	Laser_OFF:
 255              	.LFB57:
  22:Laser_Control.h **** 
  23:Laser_Control.h **** //
  24:Laser_Control.h **** // Laser ausschalten
  25:Laser_Control.h **** // 
  26:Laser_Control.h **** void Laser_OFF (void)
  27:Laser_Control.h **** {
 256              		.loc 1 27 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 6


 259              		@ frame_needed = 1, uses_anonymous_args = 0
 260 0000 80B5     		push	{r7, lr}
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 7, -8
 263              		.cfi_offset 14, -4
 264 0002 00AF     		add	r7, sp, #0
 265              		.cfi_def_cfa_register 7
  28:Laser_Control.h ****     Pin_LaserEN_Write(0);
 266              		.loc 1 28 0
 267 0004 0020     		movs	r0, #0
 268 0006 FFF7FEFF 		bl	Pin_LaserEN_Write
  29:Laser_Control.h **** }
 269              		.loc 1 29 0
 270 000a 80BD     		pop	{r7, pc}
 271              		.cfi_endproc
 272              	.LFE57:
 273              		.size	Laser_OFF, .-Laser_OFF
 274              		.section	.rodata
 275              		.align	2
 276              		.type	StepsDifferenceHomeSampling, %object
 277              		.size	StepsDifferenceHomeSampling, 4
 278              	StepsDifferenceHomeSampling:
 279 0018 20030000 		.word	800
 280              		.align	2
 281              		.type	StepsOneStepSettings, %object
 282              		.size	StepsOneStepSettings, 4
 283              	StepsOneStepSettings:
 284 001c 04000000 		.word	4
 285              		.comm	f_max_Stepper,8,8
 286              		.comm	sig_shift_Stepper,8,8
 287              		.comm	sig_raise_Stepper,8,8
 288              		.section	.text.Init_Stepper,"ax",%progbits
 289              		.align	2
 290              		.global	Init_Stepper
 291              		.thumb
 292              		.thumb_func
 293              		.type	Init_Stepper, %function
 294              	Init_Stepper:
 295              	.LFB58:
 296              		.file 2 "StepperMotor_Control.h"
   1:StepperMotor_Control.h **** /* ========================================
   2:StepperMotor_Control.h ****  *
   3:StepperMotor_Control.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:StepperMotor_Control.h ****  * All Rights Reserved
   5:StepperMotor_Control.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:StepperMotor_Control.h ****  *
   7:StepperMotor_Control.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:StepperMotor_Control.h ****  * WHICH IS THE PROPERTY OF your company.
   9:StepperMotor_Control.h ****  *
  10:StepperMotor_Control.h ****  * ========================================
  11:StepperMotor_Control.h **** */
  12:StepperMotor_Control.h **** 
  13:StepperMotor_Control.h **** 
  14:StepperMotor_Control.h **** #include <project.h>
  15:StepperMotor_Control.h **** #include <math.h>
  16:StepperMotor_Control.h **** 
  17:StepperMotor_Control.h **** #ifndef Laser_Control
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 7


  18:StepperMotor_Control.h **** #define Laser_Control
  19:StepperMotor_Control.h **** #endif
  20:StepperMotor_Control.h **** 
  21:StepperMotor_Control.h **** #define RIGHT 1
  22:StepperMotor_Control.h **** #define LEFT -1
  23:StepperMotor_Control.h **** 
  24:StepperMotor_Control.h **** // Parameter der Funktionen, die mit Schrittmotor zusammenhängen
  25:StepperMotor_Control.h **** static int const StepsDifferenceHomeSampling = 800;               // mit 1.8° / Step Motor -> 90°
  26:StepperMotor_Control.h **** static int const StepsOneStepSettings = 4;                		  // "einen" Schritt in Settings mit Bu
  27:StepperMotor_Control.h **** 
  28:StepperMotor_Control.h **** double f_max_Stepper;
  29:StepperMotor_Control.h **** double sig_shift_Stepper;
  30:StepperMotor_Control.h **** double sig_raise_Stepper;
  31:StepperMotor_Control.h **** 
  32:StepperMotor_Control.h **** //
  33:StepperMotor_Control.h **** // Initialisierungen für Schrittmotor zur Kontrolle der Lamellenposition
  34:StepperMotor_Control.h **** //
  35:StepperMotor_Control.h **** void Init_Stepper (void)
  36:StepperMotor_Control.h **** {
 297              		.loc 2 36 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301 0000 80B5     		push	{r7, lr}
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 7, -8
 304              		.cfi_offset 14, -4
 305 0002 00AF     		add	r7, sp, #0
 306              		.cfi_def_cfa_register 7
  37:StepperMotor_Control.h ****     // Werte der Motorparameter setzen (-> Verwendung in "MoveTo" verwendet)
  38:StepperMotor_Control.h ****     // Maximale Frequenz
  39:StepperMotor_Control.h ****     f_max_Stepper = 700;
 307              		.loc 2 39 0
 308 0004 1349     		ldr	r1, .L4
 309 0006 4FF00002 		mov	r2, #0
 310 000a 134B     		ldr	r3, .L4+4
 311 000c C1E90023 		strd	r2, [r1]
  40:StepperMotor_Control.h ****     // Verschiebung des Sigmoids
  41:StepperMotor_Control.h ****     sig_shift_Stepper = -100;                   // höherere Wert -> höherere Frequenz zu Beginn
 312              		.loc 2 41 0
 313 0010 1249     		ldr	r1, .L4+8
 314 0012 4FF00002 		mov	r2, #0
 315 0016 124B     		ldr	r3, .L4+12
 316 0018 C1E90023 		strd	r2, [r1]
  42:StepperMotor_Control.h ****     // Anstieg des Sigmoids
  43:StepperMotor_Control.h ****     sig_raise_Stepper = 10;                     // höherer Wert -> schnellerer Anstieg
 317              		.loc 2 43 0
 318 001c 1149     		ldr	r1, .L4+16
 319 001e 4FF00002 		mov	r2, #0
 320 0022 114B     		ldr	r3, .L4+20
 321 0024 C1E90023 		strd	r2, [r1]
  44:StepperMotor_Control.h ****     
  45:StepperMotor_Control.h ****     // Betriebsart des Motors festlegen
  46:StepperMotor_Control.h ****     Pin_StepperMS1_Write(0); 	                // => 16tel-Schritt
 322              		.loc 2 46 0
 323 0028 0020     		movs	r0, #0
 324 002a FFF7FEFF 		bl	Pin_StepperMS1_Write
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 8


  47:StepperMotor_Control.h ****     Pin_StepperMS2_Write(0);    
 325              		.loc 2 47 0
 326 002e 0020     		movs	r0, #0
 327 0030 FFF7FEFF 		bl	Pin_StepperMS2_Write
  48:StepperMotor_Control.h ****     Pin_StepperMS3_Write(1);   
 328              		.loc 2 48 0
 329 0034 0120     		movs	r0, #1
 330 0036 FFF7FEFF 		bl	Pin_StepperMS3_Write
  49:StepperMotor_Control.h ****     /*
  50:StepperMotor_Control.h ****     MODE0 	MODE1 	MODE2 	Microstepping
  51:StepperMotor_Control.h ****     0 	    0 	    0 	    Vollschritt
  52:StepperMotor_Control.h ****     1 	    0 	    0 	    Halbschritt
  53:StepperMotor_Control.h ****     0 	    1 	    1 	    1/4 Schritt
  54:StepperMotor_Control.h ****     1 	    1 	    0 	    1/8 Schritt
  55:StepperMotor_Control.h ****     0 	    0 	    1 	    1/16 Schritt        x => momentan ausgewählt 
  56:StepperMotor_Control.h ****     1 	    0 	    1 	    1/32 Schritt
  57:StepperMotor_Control.h ****     0 	    1 	    1 	    1/32 Schritt
  58:StepperMotor_Control.h ****     1 	    1 	    1 	    1/32 Schritt        
  59:StepperMotor_Control.h ****     */	
  60:StepperMotor_Control.h ****     
  61:StepperMotor_Control.h ****     // ENABLE -> Enable Stepper-Motor an
  62:StepperMotor_Control.h ****     Pin_StepperEN_Write(0); 
 331              		.loc 2 62 0
 332 003a 0020     		movs	r0, #0
 333 003c FFF7FEFF 		bl	Pin_StepperEN_Write
  63:StepperMotor_Control.h ****     // SLEEP -> Motor in Schlafzustand setzen -> keine Leistungsaufnahme
  64:StepperMotor_Control.h ****     Pin_StepperSLEEP_Write(0);
 334              		.loc 2 64 0
 335 0040 0020     		movs	r0, #0
 336 0042 FFF7FEFF 		bl	Pin_StepperSLEEP_Write
  65:StepperMotor_Control.h ****     // SLEEP -> Motor "aufwecken" -> Leistungsaufnahme
  66:StepperMotor_Control.h ****     Pin_StepperSLEEP_Write(1);
 337              		.loc 2 66 0
 338 0046 0120     		movs	r0, #1
 339 0048 FFF7FEFF 		bl	Pin_StepperSLEEP_Write
  67:StepperMotor_Control.h ****     // RESET -> nicht(!) resetten
  68:StepperMotor_Control.h ****     Pin_StepperRES_Write(1);
 340              		.loc 2 68 0
 341 004c 0120     		movs	r0, #1
 342 004e FFF7FEFF 		bl	Pin_StepperRES_Write
  69:StepperMotor_Control.h ****     
  70:StepperMotor_Control.h **** }
 343              		.loc 2 70 0
 344 0052 80BD     		pop	{r7, pc}
 345              	.L5:
 346              		.align	2
 347              	.L4:
 348 0054 00000000 		.word	f_max_Stepper
 349 0058 00E08540 		.word	1082515456
 350 005c 00000000 		.word	sig_shift_Stepper
 351 0060 000059C0 		.word	-1067909120
 352 0064 00000000 		.word	sig_raise_Stepper
 353 0068 00002440 		.word	1076101120
 354              		.cfi_endproc
 355              	.LFE58:
 356              		.size	Init_Stepper, .-Init_Stepper
 357              		.global	__aeabi_dadd
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 9


 358              		.global	__aeabi_dcmpeq
 359              		.global	__aeabi_i2d
 360              		.global	__aeabi_ddiv
 361              		.global	__aeabi_dcmplt
 362              		.global	__aeabi_dsub
 363              		.global	__aeabi_dmul
 364              		.global	__aeabi_d2uiz
 365              		.section	.text.MoveTo,"ax",%progbits
 366              		.align	2
 367              		.global	MoveTo
 368              		.thumb
 369              		.thumb_func
 370              		.type	MoveTo, %function
 371              	MoveTo:
 372              	.LFB59:
  71:StepperMotor_Control.h **** 
  72:StepperMotor_Control.h **** 
  73:StepperMotor_Control.h **** //
  74:StepperMotor_Control.h **** // Bewegen des Stepper-Motors um "steps" Schritte in Richtung "dir"
  75:StepperMotor_Control.h **** //
  76:StepperMotor_Control.h **** void MoveTo (double steps, double dir)
  77:StepperMotor_Control.h **** {
 373              		.loc 2 77 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 64
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 378              		.cfi_def_cfa_offset 24
 379              		.cfi_offset 4, -24
 380              		.cfi_offset 5, -20
 381              		.cfi_offset 7, -16
 382              		.cfi_offset 8, -12
 383              		.cfi_offset 9, -8
 384              		.cfi_offset 14, -4
 385 0004 90B0     		sub	sp, sp, #64
 386              		.cfi_def_cfa_offset 88
 387 0006 00AF     		add	r7, sp, #0
 388              		.cfi_def_cfa_register 7
 389 0008 C7E90201 		strd	r0, [r7, #8]
 390 000c C7E90023 		strd	r2, [r7]
  78:StepperMotor_Control.h **** 	// Übergebene Steps müssen mit 2 Mulipliziert werden, da jeder 
  79:StepperMotor_Control.h **** 	// Schritt 2 Flankenwechsel beeinhaltet
  80:StepperMotor_Control.h **** 	steps = steps*2;
 391              		.loc 2 80 0
 392 0010 D7E90223 		ldrd	r2, [r7, #8]
 393 0014 1046     		mov	r0, r2
 394 0016 1946     		mov	r1, r3
 395 0018 FFF7FEFF 		bl	__aeabi_dadd
 396 001c 0246     		mov	r2, r0
 397 001e 0B46     		mov	r3, r1
 398 0020 C7E90223 		strd	r2, [r7, #8]
  81:StepperMotor_Control.h **** 	
  82:StepperMotor_Control.h ****     // Maximale Frequenz
  83:StepperMotor_Control.h ****     double f_max;
  84:StepperMotor_Control.h ****     // Relative Frequenz [0, 1]
  85:StepperMotor_Control.h ****     double f_rel;
  86:StepperMotor_Control.h ****     // Inkrement der Anzufahrenden Schritte
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 10


  87:StepperMotor_Control.h ****     int i;
  88:StepperMotor_Control.h ****     // gerundete Dauer des Stepper-Zustands
  89:StepperMotor_Control.h ****     double t_StepperCLK;    
  90:StepperMotor_Control.h ****     // Verschiebung des Sigmoids
  91:StepperMotor_Control.h ****     double sig_shift;                   // höherere Wert -> höherere Frequenz zu Beginn
  92:StepperMotor_Control.h ****     // Anstieg des Sigmoids
  93:StepperMotor_Control.h ****     double sig_raise;                   // höherer Wert -> schnellerer Anstieg
  94:StepperMotor_Control.h ****     
  95:StepperMotor_Control.h ****     //
  96:StepperMotor_Control.h ****     // Parameterset für Motorkontrolle aus "MotorRamp.m"
  97:StepperMotor_Control.h ****     //   
  98:StepperMotor_Control.h ****     f_max = f_max_Stepper;
 399              		.loc 2 98 0
 400 0024 9A4B     		ldr	r3, .L19+8
 401 0026 D3E90023 		ldrd	r2, [r3]
 402 002a C7E90C23 		strd	r2, [r7, #48]
  99:StepperMotor_Control.h ****     sig_shift = sig_shift_Stepper;
 403              		.loc 2 99 0
 404 002e 994B     		ldr	r3, .L19+12
 405 0030 D3E90023 		ldrd	r2, [r3]
 406 0034 C7E90A23 		strd	r2, [r7, #40]
 100:StepperMotor_Control.h ****     sig_raise = sig_raise_Stepper;
 407              		.loc 2 100 0
 408 0038 974B     		ldr	r3, .L19+16
 409 003a D3E90023 		ldrd	r2, [r3]
 410 003e C7E90823 		strd	r2, [r7, #32]
 101:StepperMotor_Control.h ****     
 102:StepperMotor_Control.h ****     
 103:StepperMotor_Control.h ****     // SLEEP -> Motor "aufwecken" -> Leistungsaufnahme
 104:StepperMotor_Control.h ****     Pin_StepperSLEEP_Write(1);
 411              		.loc 2 104 0
 412 0042 0120     		movs	r0, #1
 413 0044 FFF7FEFF 		bl	Pin_StepperSLEEP_Write
 105:StepperMotor_Control.h ****     
 106:StepperMotor_Control.h ****     // Richtung setzen
 107:StepperMotor_Control.h ****     //
 108:StepperMotor_Control.h ****     // Rechtsdrehung
 109:StepperMotor_Control.h ****     if (dir == RIGHT)
 414              		.loc 2 109 0
 415 0048 D7E90001 		ldrd	r0, [r7]
 416 004c 4FF00002 		mov	r2, #0
 417 0050 924B     		ldr	r3, .L19+20
 418 0052 FFF7FEFF 		bl	__aeabi_dcmpeq
 419 0056 0346     		mov	r3, r0
 420 0058 002B     		cmp	r3, #0
 421 005a 03D0     		beq	.L17
 110:StepperMotor_Control.h ****     {
 111:StepperMotor_Control.h ****         Pin_StepperDIR_Write(0);
 422              		.loc 2 111 0
 423 005c 0020     		movs	r0, #0
 424 005e FFF7FEFF 		bl	Pin_StepperDIR_Write
 425 0062 02E0     		b	.L9
 426              	.L17:
 112:StepperMotor_Control.h ****     }
 113:StepperMotor_Control.h ****     // Linksdrehung
 114:StepperMotor_Control.h ****     else
 115:StepperMotor_Control.h ****     {
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 11


 116:StepperMotor_Control.h ****         Pin_StepperDIR_Write(1);
 427              		.loc 2 116 0
 428 0064 0120     		movs	r0, #1
 429 0066 FFF7FEFF 		bl	Pin_StepperDIR_Write
 430              	.L9:
 117:StepperMotor_Control.h ****     }    
 118:StepperMotor_Control.h ****     
 119:StepperMotor_Control.h ****     // Für jeden der Schritte
 120:StepperMotor_Control.h ****     for (i = 0; i < steps; i = i + 1)
 431              		.loc 2 120 0
 432 006a 0023     		movs	r3, #0
 433 006c FB63     		str	r3, [r7, #60]
 434 006e F8E0     		b	.L10
 435              	.L14:
 121:StepperMotor_Control.h ****     {
 122:StepperMotor_Control.h ****         // Frequenz für Beschleunigungsteil
 123:StepperMotor_Control.h ****         if (i < steps/2)
 436              		.loc 2 123 0
 437 0070 F86B     		ldr	r0, [r7, #60]
 438 0072 FFF7FEFF 		bl	__aeabi_i2d
 439 0076 0446     		mov	r4, r0
 440 0078 0D46     		mov	r5, r1
 441 007a D7E90201 		ldrd	r0, [r7, #8]
 442 007e 4FF00002 		mov	r2, #0
 443 0082 4FF08043 		mov	r3, #1073741824
 444 0086 FFF7FEFF 		bl	__aeabi_ddiv
 445 008a 0246     		mov	r2, r0
 446 008c 0B46     		mov	r3, r1
 447 008e 2046     		mov	r0, r4
 448 0090 2946     		mov	r1, r5
 449 0092 FFF7FEFF 		bl	__aeabi_dcmplt
 450 0096 0346     		mov	r3, r0
 451 0098 002B     		cmp	r3, #0
 452 009a 67D0     		beq	.L18
 124:StepperMotor_Control.h ****         {       
 125:StepperMotor_Control.h ****             // Berechnung der Frequenz
 126:StepperMotor_Control.h ****             f_rel = 1/(1+exp(-1/(steps/sig_raise)*(i-steps/sig_shift))); 
 453              		.loc 2 126 0
 454 009c D7E90201 		ldrd	r0, [r7, #8]
 455 00a0 D7E90823 		ldrd	r2, [r7, #32]
 456 00a4 FFF7FEFF 		bl	__aeabi_ddiv
 457 00a8 0246     		mov	r2, r0
 458 00aa 0B46     		mov	r3, r1
 459 00ac 4FF00000 		mov	r0, #0
 460 00b0 7B49     		ldr	r1, .L19+24
 461 00b2 FFF7FEFF 		bl	__aeabi_ddiv
 462 00b6 0246     		mov	r2, r0
 463 00b8 0B46     		mov	r3, r1
 464 00ba 1446     		mov	r4, r2
 465 00bc 1D46     		mov	r5, r3
 466 00be F86B     		ldr	r0, [r7, #60]
 467 00c0 FFF7FEFF 		bl	__aeabi_i2d
 468 00c4 8046     		mov	r8, r0
 469 00c6 8946     		mov	r9, r1
 470 00c8 D7E90201 		ldrd	r0, [r7, #8]
 471 00cc D7E90A23 		ldrd	r2, [r7, #40]
 472 00d0 FFF7FEFF 		bl	__aeabi_ddiv
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 12


 473 00d4 0246     		mov	r2, r0
 474 00d6 0B46     		mov	r3, r1
 475 00d8 4046     		mov	r0, r8
 476 00da 4946     		mov	r1, r9
 477 00dc FFF7FEFF 		bl	__aeabi_dsub
 478 00e0 0246     		mov	r2, r0
 479 00e2 0B46     		mov	r3, r1
 480 00e4 2046     		mov	r0, r4
 481 00e6 2946     		mov	r1, r5
 482 00e8 FFF7FEFF 		bl	__aeabi_dmul
 483 00ec 0246     		mov	r2, r0
 484 00ee 0B46     		mov	r3, r1
 485 00f0 1046     		mov	r0, r2
 486 00f2 1946     		mov	r1, r3
 487 00f4 FFF7FEFF 		bl	exp
 488 00f8 0246     		mov	r2, r0
 489 00fa 0B46     		mov	r3, r1
 490 00fc 1046     		mov	r0, r2
 491 00fe 1946     		mov	r1, r3
 492 0100 4FF00002 		mov	r2, #0
 493 0104 654B     		ldr	r3, .L19+20
 494 0106 FFF7FEFF 		bl	__aeabi_dadd
 495 010a 0246     		mov	r2, r0
 496 010c 0B46     		mov	r3, r1
 497 010e 4FF00000 		mov	r0, #0
 498 0112 6249     		ldr	r1, .L19+20
 499 0114 FFF7FEFF 		bl	__aeabi_ddiv
 500 0118 0246     		mov	r2, r0
 501 011a 0B46     		mov	r3, r1
 502 011c C7E90623 		strd	r2, [r7, #24]
 127:StepperMotor_Control.h ****             // Momentane Ausgabe der LED invertieren
 128:StepperMotor_Control.h ****             Pin_StepperCLK_Write(!Pin_StepperCLK_Read());
 503              		.loc 2 128 0
 504 0120 FFF7FEFF 		bl	Pin_StepperCLK_Read
 505 0124 0346     		mov	r3, r0
 506 0126 002B     		cmp	r3, #0
 507 0128 0CBF     		ite	eq
 508 012a 0123     		moveq	r3, #1
 509 012c 0023     		movne	r3, #0
 510 012e DBB2     		uxtb	r3, r3
 511 0130 1846     		mov	r0, r3
 512 0132 FFF7FEFF 		bl	Pin_StepperCLK_Write
 129:StepperMotor_Control.h ****             // Anzeige LED-Togglen zum Test
 130:StepperMotor_Control.h ****             // Pin_LED_Write(!Pin_LED_Read());
 131:StepperMotor_Control.h ****             // ALT: // Wartezeit berechnen
 132:StepperMotor_Control.h ****             // ALT: t_StepperCLK = round(1000/(f_max*f_rel));
 133:StepperMotor_Control.h ****             // ALT: // Warten
 134:StepperMotor_Control.h ****             // ALT: CyDelay(t_StepperCLK);
 135:StepperMotor_Control.h ****             // Wartezeit in ms berechnen
 136:StepperMotor_Control.h ****             t_StepperCLK = 1000000/(f_max*f_rel);   
 513              		.loc 2 136 0
 514 0136 D7E90C01 		ldrd	r0, [r7, #48]
 515 013a D7E90623 		ldrd	r2, [r7, #24]
 516 013e FFF7FEFF 		bl	__aeabi_dmul
 517 0142 0246     		mov	r2, r0
 518 0144 0B46     		mov	r3, r1
 519 0146 50A1     		adr	r1, .L19
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 13


 520 0148 D1E90001 		ldrd	r0, [r1]
 521 014c FFF7FEFF 		bl	__aeabi_ddiv
 522 0150 0246     		mov	r2, r0
 523 0152 0B46     		mov	r3, r1
 524 0154 C7E90423 		strd	r2, [r7, #16]
 137:StepperMotor_Control.h ****             // umrechnen in us
 138:StepperMotor_Control.h ****             CyDelayUs((uint16)(t_StepperCLK));           
 525              		.loc 2 138 0
 526 0158 D7E90401 		ldrd	r0, [r7, #16]
 527 015c FFF7FEFF 		bl	__aeabi_d2uiz
 528 0160 0346     		mov	r3, r0
 529 0162 9BB2     		uxth	r3, r3
 530 0164 1846     		mov	r0, r3
 531 0166 FFF7FEFF 		bl	CyDelayUs
 532 016a 77E0     		b	.L13
 533              	.L18:
 139:StepperMotor_Control.h **** 
 140:StepperMotor_Control.h ****         }        
 141:StepperMotor_Control.h ****         // Frequenz für Abbremsungsgungsteil
 142:StepperMotor_Control.h ****         else 
 143:StepperMotor_Control.h ****         {
 144:StepperMotor_Control.h ****             // Berechnung der Frequenz
 145:StepperMotor_Control.h ****             f_rel = (1 - 1/(1+exp(-1/(steps/sig_raise)*(i-steps+steps/sig_shift)))); 
 534              		.loc 2 145 0
 535 016c D7E90201 		ldrd	r0, [r7, #8]
 536 0170 D7E90823 		ldrd	r2, [r7, #32]
 537 0174 FFF7FEFF 		bl	__aeabi_ddiv
 538 0178 0246     		mov	r2, r0
 539 017a 0B46     		mov	r3, r1
 540 017c 4FF00000 		mov	r0, #0
 541 0180 4749     		ldr	r1, .L19+24
 542 0182 FFF7FEFF 		bl	__aeabi_ddiv
 543 0186 0246     		mov	r2, r0
 544 0188 0B46     		mov	r3, r1
 545 018a 1446     		mov	r4, r2
 546 018c 1D46     		mov	r5, r3
 547 018e F86B     		ldr	r0, [r7, #60]
 548 0190 FFF7FEFF 		bl	__aeabi_i2d
 549 0194 0246     		mov	r2, r0
 550 0196 0B46     		mov	r3, r1
 551 0198 1046     		mov	r0, r2
 552 019a 1946     		mov	r1, r3
 553 019c D7E90223 		ldrd	r2, [r7, #8]
 554 01a0 FFF7FEFF 		bl	__aeabi_dsub
 555 01a4 0246     		mov	r2, r0
 556 01a6 0B46     		mov	r3, r1
 557 01a8 9046     		mov	r8, r2
 558 01aa 9946     		mov	r9, r3
 559 01ac D7E90201 		ldrd	r0, [r7, #8]
 560 01b0 D7E90A23 		ldrd	r2, [r7, #40]
 561 01b4 FFF7FEFF 		bl	__aeabi_ddiv
 562 01b8 0246     		mov	r2, r0
 563 01ba 0B46     		mov	r3, r1
 564 01bc 4046     		mov	r0, r8
 565 01be 4946     		mov	r1, r9
 566 01c0 FFF7FEFF 		bl	__aeabi_dadd
 567 01c4 0246     		mov	r2, r0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 14


 568 01c6 0B46     		mov	r3, r1
 569 01c8 2046     		mov	r0, r4
 570 01ca 2946     		mov	r1, r5
 571 01cc FFF7FEFF 		bl	__aeabi_dmul
 572 01d0 0246     		mov	r2, r0
 573 01d2 0B46     		mov	r3, r1
 574 01d4 1046     		mov	r0, r2
 575 01d6 1946     		mov	r1, r3
 576 01d8 FFF7FEFF 		bl	exp
 577 01dc 0246     		mov	r2, r0
 578 01de 0B46     		mov	r3, r1
 579 01e0 1046     		mov	r0, r2
 580 01e2 1946     		mov	r1, r3
 581 01e4 4FF00002 		mov	r2, #0
 582 01e8 2C4B     		ldr	r3, .L19+20
 583 01ea FFF7FEFF 		bl	__aeabi_dadd
 584 01ee 0246     		mov	r2, r0
 585 01f0 0B46     		mov	r3, r1
 586 01f2 4FF00000 		mov	r0, #0
 587 01f6 2949     		ldr	r1, .L19+20
 588 01f8 FFF7FEFF 		bl	__aeabi_ddiv
 589 01fc 0246     		mov	r2, r0
 590 01fe 0B46     		mov	r3, r1
 591 0200 4FF00000 		mov	r0, #0
 592 0204 2549     		ldr	r1, .L19+20
 593 0206 FFF7FEFF 		bl	__aeabi_dsub
 594 020a 0246     		mov	r2, r0
 595 020c 0B46     		mov	r3, r1
 596 020e C7E90623 		strd	r2, [r7, #24]
 146:StepperMotor_Control.h ****             // Momentane Ausgabe der LED invertieren
 147:StepperMotor_Control.h ****             Pin_StepperCLK_Write(!Pin_StepperCLK_Read());
 597              		.loc 2 147 0
 598 0212 FFF7FEFF 		bl	Pin_StepperCLK_Read
 599 0216 0346     		mov	r3, r0
 600 0218 002B     		cmp	r3, #0
 601 021a 0CBF     		ite	eq
 602 021c 0123     		moveq	r3, #1
 603 021e 0023     		movne	r3, #0
 604 0220 DBB2     		uxtb	r3, r3
 605 0222 1846     		mov	r0, r3
 606 0224 FFF7FEFF 		bl	Pin_StepperCLK_Write
 148:StepperMotor_Control.h ****             // Anzeige LED-Togglen zum Test
 149:StepperMotor_Control.h ****             // Pin_LED_Write(!Pin_LED_Read());
 150:StepperMotor_Control.h ****             // ALT: // Wartezeit berechnen
 151:StepperMotor_Control.h ****             // ALT: t_StepperCLK = round(1000/(f_max*f_rel));
 152:StepperMotor_Control.h ****             // ALT: // Warten
 153:StepperMotor_Control.h ****             // ALT: CyDelay(t_StepperCLK);
 154:StepperMotor_Control.h ****             // Wartezeit in ms berechnen
 155:StepperMotor_Control.h ****             t_StepperCLK = 1000000/(f_max*f_rel);            
 607              		.loc 2 155 0
 608 0228 D7E90C01 		ldrd	r0, [r7, #48]
 609 022c D7E90623 		ldrd	r2, [r7, #24]
 610 0230 FFF7FEFF 		bl	__aeabi_dmul
 611 0234 0246     		mov	r2, r0
 612 0236 0B46     		mov	r3, r1
 613 0238 13A1     		adr	r1, .L19
 614 023a D1E90001 		ldrd	r0, [r1]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 15


 615 023e FFF7FEFF 		bl	__aeabi_ddiv
 616 0242 0246     		mov	r2, r0
 617 0244 0B46     		mov	r3, r1
 618 0246 C7E90423 		strd	r2, [r7, #16]
 156:StepperMotor_Control.h ****             // umrechnen in us
 157:StepperMotor_Control.h ****             CyDelayUs((uint16)(t_StepperCLK));           
 619              		.loc 2 157 0
 620 024a D7E90401 		ldrd	r0, [r7, #16]
 621 024e FFF7FEFF 		bl	__aeabi_d2uiz
 622 0252 0346     		mov	r3, r0
 623 0254 9BB2     		uxth	r3, r3
 624 0256 1846     		mov	r0, r3
 625 0258 FFF7FEFF 		bl	CyDelayUs
 626              	.L13:
 120:StepperMotor_Control.h ****     {
 627              		.loc 2 120 0 discriminator 2
 628 025c FB6B     		ldr	r3, [r7, #60]
 629 025e 0133     		adds	r3, r3, #1
 630 0260 FB63     		str	r3, [r7, #60]
 631              	.L10:
 120:StepperMotor_Control.h ****     {
 632              		.loc 2 120 0 is_stmt 0 discriminator 1
 633 0262 F86B     		ldr	r0, [r7, #60]
 634 0264 FFF7FEFF 		bl	__aeabi_i2d
 635 0268 0246     		mov	r2, r0
 636 026a 0B46     		mov	r3, r1
 637 026c 1046     		mov	r0, r2
 638 026e 1946     		mov	r1, r3
 639 0270 D7E90223 		ldrd	r2, [r7, #8]
 640 0274 FFF7FEFF 		bl	__aeabi_dcmplt
 641 0278 0346     		mov	r3, r0
 642 027a 002B     		cmp	r3, #0
 643 027c 7FF4F8AE 		bne	.L14
 158:StepperMotor_Control.h **** 
 159:StepperMotor_Control.h ****         }  
 160:StepperMotor_Control.h ****     }
 161:StepperMotor_Control.h ****     // SLEEP -> Motor in Schlafzustand setzen -> keine Leistungsaufnahme
 162:StepperMotor_Control.h ****     // Pin_StepperSLEEP_Write(0); 
 163:StepperMotor_Control.h **** }
 644              		.loc 2 163 0 is_stmt 1
 645 0280 4037     		adds	r7, r7, #64
 646              		.cfi_def_cfa_offset 24
 647 0282 BD46     		mov	sp, r7
 648              		.cfi_def_cfa_register 13
 649              		@ sp needed
 650 0284 BDE8B083 		pop	{r4, r5, r7, r8, r9, pc}
 651              	.L20:
 652              		.align	3
 653              	.L19:
 654 0288 00000000 		.word	0
 655 028c 80842E41 		.word	1093567616
 656 0290 00000000 		.word	f_max_Stepper
 657 0294 00000000 		.word	sig_shift_Stepper
 658 0298 00000000 		.word	sig_raise_Stepper
 659 029c 0000F03F 		.word	1072693248
 660 02a0 0000F0BF 		.word	-1074790400
 661              		.cfi_endproc
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 16


 662              	.LFE59:
 663              		.size	MoveTo, .-MoveTo
 664 02a4 AFF30080 		.section	.text.MoveToWithConstSpeed,"ax",%progbits
 665              		.align	2
 666              		.global	MoveToWithConstSpeed
 667              		.thumb
 668              		.thumb_func
 669              		.type	MoveToWithConstSpeed, %function
 670              	MoveToWithConstSpeed:
 671              	.LFB60:
 164:StepperMotor_Control.h **** 
 165:StepperMotor_Control.h **** //
 166:StepperMotor_Control.h **** // Bewegen des Stepper-Motors um "steps" Schritte in Richtung "dir"
 167:StepperMotor_Control.h **** //
 168:StepperMotor_Control.h **** void MoveToWithConstSpeed (double steps, double dir)
 169:StepperMotor_Control.h **** {
 672              		.loc 2 169 0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 32
 675              		@ frame_needed = 1, uses_anonymous_args = 0
 676 0000 80B5     		push	{r7, lr}
 677              		.cfi_def_cfa_offset 8
 678              		.cfi_offset 7, -8
 679              		.cfi_offset 14, -4
 680 0002 88B0     		sub	sp, sp, #32
 681              		.cfi_def_cfa_offset 40
 682 0004 00AF     		add	r7, sp, #0
 683              		.cfi_def_cfa_register 7
 684 0006 C7E90201 		strd	r0, [r7, #8]
 685 000a C7E90023 		strd	r2, [r7]
 170:StepperMotor_Control.h **** 	// Übergebene Steps müssen mit 2 Mulipliziert werden, da jeder 
 171:StepperMotor_Control.h **** 	// Schritt 2 Flankenwechsel beeinhaltet
 172:StepperMotor_Control.h **** 	steps = steps*2;
 686              		.loc 2 172 0
 687 000e D7E90223 		ldrd	r2, [r7, #8]
 688 0012 1046     		mov	r0, r2
 689 0014 1946     		mov	r1, r3
 690 0016 FFF7FEFF 		bl	__aeabi_dadd
 691 001a 0246     		mov	r2, r0
 692 001c 0B46     		mov	r3, r1
 693 001e C7E90223 		strd	r2, [r7, #8]
 173:StepperMotor_Control.h **** 	
 174:StepperMotor_Control.h ****     // Inkrement der Anzufahrenden Schritte
 175:StepperMotor_Control.h ****     int i;
 176:StepperMotor_Control.h ****     // gerundete Dauer des Stepper-Zustands
 177:StepperMotor_Control.h ****     double t_StepperCLK;       
 178:StepperMotor_Control.h ****     
 179:StepperMotor_Control.h ****     // SLEEP -> Motor "aufwecken" -> Leistungsaufnahme
 180:StepperMotor_Control.h ****     Pin_StepperSLEEP_Write(1);
 694              		.loc 2 180 0
 695 0022 0120     		movs	r0, #1
 696 0024 FFF7FEFF 		bl	Pin_StepperSLEEP_Write
 181:StepperMotor_Control.h ****     
 182:StepperMotor_Control.h ****     // Richtung setzen
 183:StepperMotor_Control.h ****     //
 184:StepperMotor_Control.h ****     // Rechtsdrehung
 185:StepperMotor_Control.h ****     if (dir == RIGHT)
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 17


 697              		.loc 2 185 0
 698 0028 D7E90001 		ldrd	r0, [r7]
 699 002c 4FF00002 		mov	r2, #0
 700 0030 214B     		ldr	r3, .L29+8
 701 0032 FFF7FEFF 		bl	__aeabi_dcmpeq
 702 0036 0346     		mov	r3, r0
 703 0038 002B     		cmp	r3, #0
 704 003a 03D0     		beq	.L28
 186:StepperMotor_Control.h ****     {
 187:StepperMotor_Control.h ****         Pin_StepperDIR_Write(0);
 705              		.loc 2 187 0
 706 003c 0020     		movs	r0, #0
 707 003e FFF7FEFF 		bl	Pin_StepperDIR_Write
 708 0042 02E0     		b	.L24
 709              	.L28:
 188:StepperMotor_Control.h ****     }
 189:StepperMotor_Control.h ****     // Linksdrehung
 190:StepperMotor_Control.h ****     else
 191:StepperMotor_Control.h ****     {
 192:StepperMotor_Control.h ****         Pin_StepperDIR_Write(1);
 710              		.loc 2 192 0
 711 0044 0120     		movs	r0, #1
 712 0046 FFF7FEFF 		bl	Pin_StepperDIR_Write
 713              	.L24:
 193:StepperMotor_Control.h ****     }    
 194:StepperMotor_Control.h ****     
 195:StepperMotor_Control.h ****     // Für jeden der Schritte
 196:StepperMotor_Control.h ****     for (i = 0; i < steps; i = i + 1)
 714              		.loc 2 196 0
 715 004a 0023     		movs	r3, #0
 716 004c FB61     		str	r3, [r7, #28]
 717 004e 1BE0     		b	.L25
 718              	.L26:
 197:StepperMotor_Control.h ****     {
 198:StepperMotor_Control.h ****         // Momentane Ausgabe der LED invertieren
 199:StepperMotor_Control.h ****         Pin_StepperCLK_Write(!Pin_StepperCLK_Read());
 719              		.loc 2 199 0 discriminator 3
 720 0050 FFF7FEFF 		bl	Pin_StepperCLK_Read
 721 0054 0346     		mov	r3, r0
 722 0056 002B     		cmp	r3, #0
 723 0058 0CBF     		ite	eq
 724 005a 0123     		moveq	r3, #1
 725 005c 0023     		movne	r3, #0
 726 005e DBB2     		uxtb	r3, r3
 727 0060 1846     		mov	r0, r3
 728 0062 FFF7FEFF 		bl	Pin_StepperCLK_Write
 200:StepperMotor_Control.h ****         t_StepperCLK = 27500; // [mus]
 729              		.loc 2 200 0 discriminator 3
 730 0066 12A3     		adr	r3, .L29
 731 0068 D3E90023 		ldrd	r2, [r3]
 732 006c C7E90423 		strd	r2, [r7, #16]
 201:StepperMotor_Control.h ****         CyDelayUs((uint16)(t_StepperCLK));     
 733              		.loc 2 201 0 discriminator 3
 734 0070 D7E90401 		ldrd	r0, [r7, #16]
 735 0074 FFF7FEFF 		bl	__aeabi_d2uiz
 736 0078 0346     		mov	r3, r0
 737 007a 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 18


 738 007c 1846     		mov	r0, r3
 739 007e FFF7FEFF 		bl	CyDelayUs
 196:StepperMotor_Control.h ****     {
 740              		.loc 2 196 0 discriminator 3
 741 0082 FB69     		ldr	r3, [r7, #28]
 742 0084 0133     		adds	r3, r3, #1
 743 0086 FB61     		str	r3, [r7, #28]
 744              	.L25:
 196:StepperMotor_Control.h ****     {
 745              		.loc 2 196 0 is_stmt 0 discriminator 1
 746 0088 F869     		ldr	r0, [r7, #28]
 747 008a FFF7FEFF 		bl	__aeabi_i2d
 748 008e 0246     		mov	r2, r0
 749 0090 0B46     		mov	r3, r1
 750 0092 1046     		mov	r0, r2
 751 0094 1946     		mov	r1, r3
 752 0096 D7E90223 		ldrd	r2, [r7, #8]
 753 009a FFF7FEFF 		bl	__aeabi_dcmplt
 754 009e 0346     		mov	r3, r0
 755 00a0 002B     		cmp	r3, #0
 756 00a2 D5D1     		bne	.L26
 202:StepperMotor_Control.h ****     }
 203:StepperMotor_Control.h ****     // SLEEP -> Motor in Schlafzustand setzen -> keine Leistungsaufnahme
 204:StepperMotor_Control.h ****     // Pin_StepperSLEEP_Write(0); 
 205:StepperMotor_Control.h **** }
 757              		.loc 2 205 0 is_stmt 1
 758 00a4 2037     		adds	r7, r7, #32
 759              		.cfi_def_cfa_offset 8
 760 00a6 BD46     		mov	sp, r7
 761              		.cfi_def_cfa_register 13
 762              		@ sp needed
 763 00a8 80BD     		pop	{r7, pc}
 764              	.L30:
 765 00aa 00BFAFF3 		.align	3
 765      0080
 766              	.L29:
 767 00b0 00000000 		.word	0
 768 00b4 00DBDA40 		.word	1088084736
 769 00b8 0000F03F 		.word	1072693248
 770              		.cfi_endproc
 771              	.LFE60:
 772              		.size	MoveToWithConstSpeed, .-MoveToWithConstSpeed
 773 00bc AFF30080 		.section	.text.MoveOneStep_Clockwise,"ax",%progbits
 774              		.align	2
 775              		.global	MoveOneStep_Clockwise
 776              		.thumb
 777              		.thumb_func
 778              		.type	MoveOneStep_Clockwise, %function
 779              	MoveOneStep_Clockwise:
 780              	.LFB61:
 206:StepperMotor_Control.h **** 
 207:StepperMotor_Control.h **** //
 208:StepperMotor_Control.h **** // Einzelschritt fahren zum Suchen der Referenz-Position
 209:StepperMotor_Control.h **** //
 210:StepperMotor_Control.h **** void MoveOneStep_Clockwise (void)
 211:StepperMotor_Control.h **** {
 781              		.loc 2 211 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 19


 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 1, uses_anonymous_args = 0
 785 0000 80B5     		push	{r7, lr}
 786              		.cfi_def_cfa_offset 8
 787              		.cfi_offset 7, -8
 788              		.cfi_offset 14, -4
 789 0002 00AF     		add	r7, sp, #0
 790              		.cfi_def_cfa_register 7
 212:StepperMotor_Control.h ****     MoveToWithConstSpeed(StepsOneStepSettings, -1);
 791              		.loc 2 212 0
 792 0004 0423     		movs	r3, #4
 793 0006 1846     		mov	r0, r3
 794 0008 FFF7FEFF 		bl	__aeabi_i2d
 795 000c 0246     		mov	r2, r0
 796 000e 0B46     		mov	r3, r1
 797 0010 1046     		mov	r0, r2
 798 0012 1946     		mov	r1, r3
 799 0014 4FF00002 		mov	r2, #0
 800 0018 014B     		ldr	r3, .L32
 801 001a FFF7FEFF 		bl	MoveToWithConstSpeed
 213:StepperMotor_Control.h **** }
 802              		.loc 2 213 0
 803 001e 80BD     		pop	{r7, pc}
 804              	.L33:
 805              		.align	2
 806              	.L32:
 807 0020 0000F0BF 		.word	-1074790400
 808              		.cfi_endproc
 809              	.LFE61:
 810              		.size	MoveOneStep_Clockwise, .-MoveOneStep_Clockwise
 811              		.section	.text.MoveOneStep_CounterClockwise,"ax",%progbits
 812              		.align	2
 813              		.global	MoveOneStep_CounterClockwise
 814              		.thumb
 815              		.thumb_func
 816              		.type	MoveOneStep_CounterClockwise, %function
 817              	MoveOneStep_CounterClockwise:
 818              	.LFB62:
 214:StepperMotor_Control.h **** 
 215:StepperMotor_Control.h **** //
 216:StepperMotor_Control.h **** // Einzelschritt fahren zum Suchen der Referenz-Position
 217:StepperMotor_Control.h **** //
 218:StepperMotor_Control.h **** void MoveOneStep_CounterClockwise (void)
 219:StepperMotor_Control.h **** {
 819              		.loc 2 219 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 1, uses_anonymous_args = 0
 823 0000 80B5     		push	{r7, lr}
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 7, -8
 826              		.cfi_offset 14, -4
 827 0002 00AF     		add	r7, sp, #0
 828              		.cfi_def_cfa_register 7
 220:StepperMotor_Control.h ****     MoveToWithConstSpeed(StepsOneStepSettings, 1);
 829              		.loc 2 220 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 20


 830 0004 0423     		movs	r3, #4
 831 0006 1846     		mov	r0, r3
 832 0008 FFF7FEFF 		bl	__aeabi_i2d
 833 000c 0246     		mov	r2, r0
 834 000e 0B46     		mov	r3, r1
 835 0010 1046     		mov	r0, r2
 836 0012 1946     		mov	r1, r3
 837 0014 4FF00002 		mov	r2, #0
 838 0018 014B     		ldr	r3, .L35
 839 001a FFF7FEFF 		bl	MoveToWithConstSpeed
 221:StepperMotor_Control.h **** }
 840              		.loc 2 221 0
 841 001e 80BD     		pop	{r7, pc}
 842              	.L36:
 843              		.align	2
 844              	.L35:
 845 0020 0000F03F 		.word	1072693248
 846              		.cfi_endproc
 847              	.LFE62:
 848              		.size	MoveOneStep_CounterClockwise, .-MoveOneStep_CounterClockwise
 849              		.section	.text.MoveToSamplingPosition,"ax",%progbits
 850              		.align	2
 851              		.global	MoveToSamplingPosition
 852              		.thumb
 853              		.thumb_func
 854              		.type	MoveToSamplingPosition, %function
 855              	MoveToSamplingPosition:
 856              	.LFB63:
 222:StepperMotor_Control.h **** 
 223:StepperMotor_Control.h **** //
 224:StepperMotor_Control.h **** // Positionswechsel Home -> Sampling
 225:StepperMotor_Control.h **** //
 226:StepperMotor_Control.h **** void MoveToSamplingPosition (void)
 227:StepperMotor_Control.h **** {
 857              		.loc 2 227 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 1, uses_anonymous_args = 0
 861 0000 80B5     		push	{r7, lr}
 862              		.cfi_def_cfa_offset 8
 863              		.cfi_offset 7, -8
 864              		.cfi_offset 14, -4
 865 0002 00AF     		add	r7, sp, #0
 866              		.cfi_def_cfa_register 7
 228:StepperMotor_Control.h ****     MoveTo(StepsDifferenceHomeSampling, -1);
 867              		.loc 2 228 0
 868 0004 4FF44873 		mov	r3, #800
 869 0008 1846     		mov	r0, r3
 870 000a FFF7FEFF 		bl	__aeabi_i2d
 871 000e 0246     		mov	r2, r0
 872 0010 0B46     		mov	r3, r1
 873 0012 1046     		mov	r0, r2
 874 0014 1946     		mov	r1, r3
 875 0016 4FF00002 		mov	r2, #0
 876 001a 024B     		ldr	r3, .L38
 877 001c FFF7FEFF 		bl	MoveTo
 229:StepperMotor_Control.h **** }
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 21


 878              		.loc 2 229 0
 879 0020 80BD     		pop	{r7, pc}
 880              	.L39:
 881 0022 00BF     		.align	2
 882              	.L38:
 883 0024 0000F0BF 		.word	-1074790400
 884              		.cfi_endproc
 885              	.LFE63:
 886              		.size	MoveToSamplingPosition, .-MoveToSamplingPosition
 887              		.section	.text.MoveToHomePosition,"ax",%progbits
 888              		.align	2
 889              		.global	MoveToHomePosition
 890              		.thumb
 891              		.thumb_func
 892              		.type	MoveToHomePosition, %function
 893              	MoveToHomePosition:
 894              	.LFB64:
 230:StepperMotor_Control.h **** 
 231:StepperMotor_Control.h **** 
 232:StepperMotor_Control.h **** //
 233:StepperMotor_Control.h **** // Positionswechsel Home -> Sampling
 234:StepperMotor_Control.h **** //
 235:StepperMotor_Control.h **** void MoveToHomePosition (void)
 236:StepperMotor_Control.h **** {
 895              		.loc 2 236 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 0
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899 0000 80B5     		push	{r7, lr}
 900              		.cfi_def_cfa_offset 8
 901              		.cfi_offset 7, -8
 902              		.cfi_offset 14, -4
 903 0002 00AF     		add	r7, sp, #0
 904              		.cfi_def_cfa_register 7
 237:StepperMotor_Control.h ****     MoveTo(StepsDifferenceHomeSampling, 1);
 905              		.loc 2 237 0
 906 0004 4FF44873 		mov	r3, #800
 907 0008 1846     		mov	r0, r3
 908 000a FFF7FEFF 		bl	__aeabi_i2d
 909 000e 0246     		mov	r2, r0
 910 0010 0B46     		mov	r3, r1
 911 0012 1046     		mov	r0, r2
 912 0014 1946     		mov	r1, r3
 913 0016 4FF00002 		mov	r2, #0
 914 001a 024B     		ldr	r3, .L41
 915 001c FFF7FEFF 		bl	MoveTo
 238:StepperMotor_Control.h **** }
 916              		.loc 2 238 0
 917 0020 80BD     		pop	{r7, pc}
 918              	.L42:
 919 0022 00BF     		.align	2
 920              	.L41:
 921 0024 0000F03F 		.word	1072693248
 922              		.cfi_endproc
 923              	.LFE64:
 924              		.size	MoveToHomePosition, .-MoveToHomePosition
 925              		.section	.text.TestRotationMove,"ax",%progbits
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 22


 926              		.align	2
 927              		.global	TestRotationMove
 928              		.thumb
 929              		.thumb_func
 930              		.type	TestRotationMove, %function
 931              	TestRotationMove:
 932              	.LFB65:
 239:StepperMotor_Control.h **** 
 240:StepperMotor_Control.h **** //
 241:StepperMotor_Control.h **** // Test des ganzen Versuchsgeschehens
 242:StepperMotor_Control.h **** //
 243:StepperMotor_Control.h **** void TestRotationMove (int No_Steps)
 244:StepperMotor_Control.h **** {
 933              		.loc 2 244 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 8
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937 0000 80B5     		push	{r7, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 82B0     		sub	sp, sp, #8
 942              		.cfi_def_cfa_offset 16
 943 0004 00AF     		add	r7, sp, #0
 944              		.cfi_def_cfa_register 7
 945 0006 7860     		str	r0, [r7, #4]
 245:StepperMotor_Control.h ****     // Test "Sampling Position anfahren"
 246:StepperMotor_Control.h ****     MoveTo(No_Steps, -1);  
 946              		.loc 2 246 0
 947 0008 7868     		ldr	r0, [r7, #4]
 948 000a FFF7FEFF 		bl	__aeabi_i2d
 949 000e 0246     		mov	r2, r0
 950 0010 0B46     		mov	r3, r1
 951 0012 1046     		mov	r0, r2
 952 0014 1946     		mov	r1, r3
 953 0016 4FF00002 		mov	r2, #0
 954 001a 114B     		ldr	r3, .L44
 955 001c FFF7FEFF 		bl	MoveTo
 247:StepperMotor_Control.h ****     
 248:StepperMotor_Control.h ****     // Laser an
 249:StepperMotor_Control.h ****     Laser_ON();        
 956              		.loc 2 249 0
 957 0020 FFF7FEFF 		bl	Laser_ON
 250:StepperMotor_Control.h ****     // Test "Messung"
 251:StepperMotor_Control.h ****     CyDelay(1000);
 958              		.loc 2 251 0
 959 0024 4FF47A70 		mov	r0, #1000
 960 0028 FFF7FEFF 		bl	CyDelay
 252:StepperMotor_Control.h ****     // Laser aus
 253:StepperMotor_Control.h ****     Laser_OFF();
 961              		.loc 2 253 0
 962 002c FFF7FEFF 		bl	Laser_OFF
 254:StepperMotor_Control.h ****     
 255:StepperMotor_Control.h ****     // 50 Schritte entspricht Drehung um 90° beim verwendeten Schrittmotor
 256:StepperMotor_Control.h ****     // Test "Pick Up Position anfahren"
 257:StepperMotor_Control.h ****     MoveTo(No_Steps, 1); 
 963              		.loc 2 257 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 23


 964 0030 7868     		ldr	r0, [r7, #4]
 965 0032 FFF7FEFF 		bl	__aeabi_i2d
 966 0036 0246     		mov	r2, r0
 967 0038 0B46     		mov	r3, r1
 968 003a 1046     		mov	r0, r2
 969 003c 1946     		mov	r1, r3
 970 003e 4FF00002 		mov	r2, #0
 971 0042 084B     		ldr	r3, .L44+4
 972 0044 FFF7FEFF 		bl	MoveTo
 258:StepperMotor_Control.h ****     
 259:StepperMotor_Control.h ****     // Laser an
 260:StepperMotor_Control.h ****     Laser_ON();        
 973              		.loc 2 260 0
 974 0048 FFF7FEFF 		bl	Laser_ON
 261:StepperMotor_Control.h ****     // Test "Warten auf Lamellen PickUp"
 262:StepperMotor_Control.h ****     CyDelay(500);
 975              		.loc 2 262 0
 976 004c 4FF4FA70 		mov	r0, #500
 977 0050 FFF7FEFF 		bl	CyDelay
 263:StepperMotor_Control.h ****     // Laser aus
 264:StepperMotor_Control.h ****     Laser_OFF(); 
 978              		.loc 2 264 0
 979 0054 FFF7FEFF 		bl	Laser_OFF
 265:StepperMotor_Control.h **** }
 980              		.loc 2 265 0
 981 0058 0837     		adds	r7, r7, #8
 982              		.cfi_def_cfa_offset 8
 983 005a BD46     		mov	sp, r7
 984              		.cfi_def_cfa_register 13
 985              		@ sp needed
 986 005c 80BD     		pop	{r7, pc}
 987              	.L45:
 988 005e 00BF     		.align	2
 989              	.L44:
 990 0060 0000F0BF 		.word	-1074790400
 991 0064 0000F03F 		.word	1072693248
 992              		.cfi_endproc
 993              	.LFE65:
 994              		.size	TestRotationMove, .-TestRotationMove
 995              		.section	.rodata
 996              		.align	2
 997              	.LC0:
 998 0020 70616765 		.ascii	"page Home\000"
 998      20486F6D 
 998      6500
 999              		.section	.text.Init_NextionTFT,"ax",%progbits
 1000              		.align	2
 1001              		.global	Init_NextionTFT
 1002              		.thumb
 1003              		.thumb_func
 1004              		.type	Init_NextionTFT, %function
 1005              	Init_NextionTFT:
 1006              	.LFB66:
 1007              		.file 3 "NextionLCD_Communication.h"
   1:NextionLCD_Communication.h **** /* ========================================
   2:NextionLCD_Communication.h ****  *
   3:NextionLCD_Communication.h ****  * Copyright YOUR COMPANY, THE YEAR
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 24


   4:NextionLCD_Communication.h ****  * All Rights Reserved
   5:NextionLCD_Communication.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:NextionLCD_Communication.h ****  *
   7:NextionLCD_Communication.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:NextionLCD_Communication.h ****  * WHICH IS THE PROPERTY OF your company.
   9:NextionLCD_Communication.h ****  *
  10:NextionLCD_Communication.h ****  * ========================================
  11:NextionLCD_Communication.h **** */
  12:NextionLCD_Communication.h **** 
  13:NextionLCD_Communication.h **** #include <project.h>
  14:NextionLCD_Communication.h **** #include <math.h>
  15:NextionLCD_Communication.h **** #include <stdio.h>
  16:NextionLCD_Communication.h **** #include <stdlib.h>         // enthält die itoa Funktion
  17:NextionLCD_Communication.h **** 
  18:NextionLCD_Communication.h **** #ifndef CY_ISR_Interrupt
  19:NextionLCD_Communication.h **** #define CY_ISR_Interrupt
  20:NextionLCD_Communication.h **** #endif
  21:NextionLCD_Communication.h **** 
  22:NextionLCD_Communication.h **** //
  23:NextionLCD_Communication.h **** // Initialisierung des TFT-Screens mit page "Home"
  24:NextionLCD_Communication.h **** //
  25:NextionLCD_Communication.h **** void Init_NextionTFT (void)
  26:NextionLCD_Communication.h **** {
 1008              		.loc 3 26 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012 0000 80B5     		push	{r7, lr}
 1013              		.cfi_def_cfa_offset 8
 1014              		.cfi_offset 7, -8
 1015              		.cfi_offset 14, -4
 1016 0002 00AF     		add	r7, sp, #0
 1017              		.cfi_def_cfa_register 7
  27:NextionLCD_Communication.h ****     // Starten des TFT, enthält die entsprechenede "Init" und "Enable" Funktionen
  28:NextionLCD_Communication.h ****     UART_TFT_Start();
 1018              		.loc 3 28 0
 1019 0004 FFF7FEFF 		bl	UART_TFT_Start
  29:NextionLCD_Communication.h ****     CyDelay(1000);
 1020              		.loc 3 29 0
 1021 0008 4FF47A70 		mov	r0, #1000
 1022 000c FFF7FEFF 		bl	CyDelay
  30:NextionLCD_Communication.h ****     
  31:NextionLCD_Communication.h ****     // Anzeigen des Home-Screens bei Initialisierung
  32:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"page Home");
 1023              		.loc 3 32 0
 1024 0010 0648     		ldr	r0, .L47
 1025 0012 FFF7FEFF 		bl	UART_TFT_PutString
  33:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xff);
 1026              		.loc 3 33 0
 1027 0016 FF20     		movs	r0, #255
 1028 0018 FFF7FEFF 		bl	UART_TFT_PutChar
  34:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xff);
 1029              		.loc 3 34 0
 1030 001c FF20     		movs	r0, #255
 1031 001e FFF7FEFF 		bl	UART_TFT_PutChar
  35:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xff);
 1032              		.loc 3 35 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 25


 1033 0022 FF20     		movs	r0, #255
 1034 0024 FFF7FEFF 		bl	UART_TFT_PutChar
  36:NextionLCD_Communication.h **** //    CyDelay(100);
  37:NextionLCD_Communication.h ****     
  38:NextionLCD_Communication.h **** //    // Reset des GUI bei Initialisierung
  39:NextionLCD_Communication.h **** //    UART_TFT_PutString((char*)"rest");
  40:NextionLCD_Communication.h **** //    UART_TFT_PutChar(0xff);
  41:NextionLCD_Communication.h **** //    UART_TFT_PutChar(0xff);
  42:NextionLCD_Communication.h **** //    UART_TFT_PutChar(0xff);
  43:NextionLCD_Communication.h **** //    CyDelay(200);
  44:NextionLCD_Communication.h **** //    UART_TFT_Start();
  45:NextionLCD_Communication.h **** //    CyDelay(1000);    
  46:NextionLCD_Communication.h **** 
  47:NextionLCD_Communication.h **** //    // Show Button unsichtbar machen
  48:NextionLCD_Communication.h **** //    UART_TFT_PutString("vis b_show,0");
  49:NextionLCD_Communication.h **** //    // Anfrage absenden
  50:NextionLCD_Communication.h **** //    UART_TFT_PutChar(0xFF);
  51:NextionLCD_Communication.h **** //    UART_TFT_PutChar(0xFF);  
  52:NextionLCD_Communication.h **** //    UART_TFT_PutChar(0xFF);    
  53:NextionLCD_Communication.h **** }
 1035              		.loc 3 53 0
 1036 0028 80BD     		pop	{r7, pc}
 1037              	.L48:
 1038 002a 00BF     		.align	2
 1039              	.L47:
 1040 002c 20000000 		.word	.LC0
 1041              		.cfi_endproc
 1042              	.LFE66:
 1043              		.size	Init_NextionTFT, .-Init_NextionTFT
 1044              		.section	.rodata
 1045 002a 0000     		.align	2
 1046              	.LC1:
 1047 002c 67657420 		.ascii	"get slider.val\000"
 1047      736C6964 
 1047      65722E76 
 1047      616C00
 1048              		.section	.text.Nextion_GetSliderValue,"ax",%progbits
 1049              		.align	2
 1050              		.global	Nextion_GetSliderValue
 1051              		.thumb
 1052              		.thumb_func
 1053              		.type	Nextion_GetSliderValue, %function
 1054              	Nextion_GetSliderValue:
 1055              	.LFB67:
  54:NextionLCD_Communication.h **** 
  55:NextionLCD_Communication.h **** //////////
  56:NextionLCD_Communication.h **** ////////// Ersatz für floor der math.lib -> ist eigentlich für PSCO4 gemacht, weil er weniger int
  57:NextionLCD_Communication.h **** //////////
  58:NextionLCD_Communication.h **** ////////int ifloor(float x)
  59:NextionLCD_Communication.h **** ////////{
  60:NextionLCD_Communication.h **** ////////	if (x >= 0.0f)
  61:NextionLCD_Communication.h **** ////////	{
  62:NextionLCD_Communication.h **** ////////		return ((int)x);
  63:NextionLCD_Communication.h **** ////////	}
  64:NextionLCD_Communication.h **** ////////	else
  65:NextionLCD_Communication.h **** ////////	{
  66:NextionLCD_Communication.h **** ////////		return ((int)x - 1);
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 26


  67:NextionLCD_Communication.h **** ////////	}
  68:NextionLCD_Communication.h **** ////////}
  69:NextionLCD_Communication.h **** 
  70:NextionLCD_Communication.h **** ////////// 
  71:NextionLCD_Communication.h **** ////////// Float -> ASCII-Umwandlung; x Float Wert zum Umwandeln, f anzahl der Stellen 
  72:NextionLCD_Communication.h **** ////////// z.B. 3; str Ergebnisstring; Laufzeit: 144 us
  73:NextionLCD_Communication.h **** //////////
  74:NextionLCD_Communication.h **** ////////void ftoa (float x,int f,char *str)
  75:NextionLCD_Communication.h **** ////////{
  76:NextionLCD_Communication.h **** ////////	float scale; /* scale factor */
  77:NextionLCD_Communication.h **** ////////	int i,d; /* copy of f, and # digits before decimal point */
  78:NextionLCD_Communication.h **** ////////	/* a digit */
  79:NextionLCD_Communication.h **** ////////	if( x < 0.0 )
  80:NextionLCD_Communication.h **** ////////	{
  81:NextionLCD_Communication.h **** ////////		*str++ = '-' ;
  82:NextionLCD_Communication.h **** ////////		x = -x ;
  83:NextionLCD_Communication.h **** ////////	}
  84:NextionLCD_Communication.h **** ////////    else
  85:NextionLCD_Communication.h **** ////////    {
  86:NextionLCD_Communication.h **** ////////        *str++ = '+' ;
  87:NextionLCD_Communication.h **** ////////    }
  88:NextionLCD_Communication.h **** ////////	i = f ;
  89:NextionLCD_Communication.h **** ////////	scale = 2.0 ;
  90:NextionLCD_Communication.h **** ////////	while ( i-- ) scale *= 10.0 ;
  91:NextionLCD_Communication.h **** ////////	x += 1.0 / scale ;
  92:NextionLCD_Communication.h **** ////////	/* count places before decimal & scale the number */
  93:NextionLCD_Communication.h **** ////////	i = 0 ;
  94:NextionLCD_Communication.h **** ////////	scale = 1.0 ;
  95:NextionLCD_Communication.h **** ////////	while ( x >= scale )
  96:NextionLCD_Communication.h **** ////////	{
  97:NextionLCD_Communication.h **** ////////		scale *= 10.0 ;
  98:NextionLCD_Communication.h **** ////////		i++ ;
  99:NextionLCD_Communication.h **** ////////	}
 100:NextionLCD_Communication.h **** ////////	if ( i == 0 ) *str++ = '0';
 101:NextionLCD_Communication.h **** ////////	while ( i-- )
 102:NextionLCD_Communication.h **** ////////	{
 103:NextionLCD_Communication.h **** ////////		/* output digits before decimal */
 104:NextionLCD_Communication.h **** ////////		// returns the value of parameter x rounded down to the nearest integer
 105:NextionLCD_Communication.h **** ////////        // floor find the nearest integer less than or equal to x. 
 106:NextionLCD_Communication.h **** ////////        scale = ifloor(0.5 + scale * 0.1 ) ;
 107:NextionLCD_Communication.h **** ////////		// scale = (int)(0.5 + scale * 0.1) ;
 108:NextionLCD_Communication.h **** ////////		d = ( x / scale ) ;
 109:NextionLCD_Communication.h **** ////////		*str++ = d + '0' ;
 110:NextionLCD_Communication.h **** ////////		x -= (float)d * scale ;
 111:NextionLCD_Communication.h **** ////////	}
 112:NextionLCD_Communication.h **** ////////	if ( f <= 0 )
 113:NextionLCD_Communication.h **** ////////	{
 114:NextionLCD_Communication.h **** ////////		*str = 0;
 115:NextionLCD_Communication.h **** ////////		return ;
 116:NextionLCD_Communication.h **** ////////	}
 117:NextionLCD_Communication.h **** ////////	*str++ = ',' ;  // Komma oder Punkt
 118:NextionLCD_Communication.h **** ////////	while ( f-- )
 119:NextionLCD_Communication.h **** ////////	{
 120:NextionLCD_Communication.h **** ////////		/* output digits after decimal */
 121:NextionLCD_Communication.h **** ////////		x *= 10.0 ;
 122:NextionLCD_Communication.h **** ////////		d = x;
 123:NextionLCD_Communication.h **** ////////		*str++ = d + '0' ;
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 27


 124:NextionLCD_Communication.h **** ////////		x -= d ;
 125:NextionLCD_Communication.h **** ////////	}
 126:NextionLCD_Communication.h **** ////////	*str = 0;
 127:NextionLCD_Communication.h **** ////////}
 128:NextionLCD_Communication.h **** 
 129:NextionLCD_Communication.h **** ////////////
 130:NextionLCD_Communication.h **** //////////// Schreibt eine 16-Bit-Zahl in die LCD-Anzeige
 131:NextionLCD_Communication.h **** ////////////
 132:NextionLCD_Communication.h **** //////////void myitoa(int a, char *str, unsigned char vkstellen, char nullflag)
 133:NextionLCD_Communication.h **** //////////{ unsigned char idx; 		/*Schleifenzähler*/
 134:NextionLCD_Communication.h **** //////////  unsigned int div = 10000; /*Teilen bei int max 10000*/
 135:NextionLCD_Communication.h **** //////////  unsigned int buff; 		/*Temp*/ 
 136:NextionLCD_Communication.h **** //////////  unsigned char flag = 1; 	/*Flag wird für Nullunterdrückung benötigt*/
 137:NextionLCD_Communication.h **** //////////  unsigned char Ausgabe; 	/*Ausgabe Wert für String*/
 138:NextionLCD_Communication.h **** //////////  flag=0;
 139:NextionLCD_Communication.h **** //////////  for(idx=5;idx>0;idx--) 	/*Schleife 5* für 10000er Stelle*/
 140:NextionLCD_Communication.h **** //////////  { buff = a;
 141:NextionLCD_Communication.h **** //////////    buff = buff / div;
 142:NextionLCD_Communication.h **** //////////    if(flag == 0)
 143:NextionLCD_Communication.h **** //////////    { if(buff >0)
 144:NextionLCD_Communication.h **** //////////      { flag = 1;
 145:NextionLCD_Communication.h **** //////////      }
 146:NextionLCD_Communication.h **** //////////    }
 147:NextionLCD_Communication.h **** //////////    Ausgabe = buff + 48; /*Umrechnung für Ergebnis String*/
 148:NextionLCD_Communication.h **** //////////    // ggf. Leerstellenunterdrückung 
 149:NextionLCD_Communication.h **** //////////	if(flag == 0)
 150:NextionLCD_Communication.h **** //////////    { if(idx<=vkstellen)
 151:NextionLCD_Communication.h **** //////////	  { if(nullflag==0) 
 152:NextionLCD_Communication.h **** //////////	    // { if (idx>1) *str++=254;
 153:NextionLCD_Communication.h **** //////////	    { if (idx>1) *str++=' ';        
 154:NextionLCD_Communication.h **** //////////		  else       *str++=48;  // Sonderfall a=0 !
 155:NextionLCD_Communication.h **** //////////	    }
 156:NextionLCD_Communication.h **** //////////		else         *str++=48; 
 157:NextionLCD_Communication.h **** //////////	  } /*Nullunterdrückung durch Leerzeichen*/
 158:NextionLCD_Communication.h **** //////////    }
 159:NextionLCD_Communication.h **** //////////	else
 160:NextionLCD_Communication.h **** //////////	{ *str++=Ausgabe; }
 161:NextionLCD_Communication.h **** //////////	a = a - (buff * div);
 162:NextionLCD_Communication.h **** //////////    div = div/10;
 163:NextionLCD_Communication.h **** //////////  }
 164:NextionLCD_Communication.h **** //////////  *str++=0;
 165:NextionLCD_Communication.h **** //////////}
 166:NextionLCD_Communication.h **** 
 167:NextionLCD_Communication.h **** //
 168:NextionLCD_Communication.h **** // Abfragen des Slider-Values
 169:NextionLCD_Communication.h **** //
 170:NextionLCD_Communication.h **** int Nextion_GetSliderValue (void)
 171:NextionLCD_Communication.h **** {  
 1056              		.loc 3 171 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 8
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060 0000 80B5     		push	{r7, lr}
 1061              		.cfi_def_cfa_offset 8
 1062              		.cfi_offset 7, -8
 1063              		.cfi_offset 14, -4
 1064 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 28


 1065              		.cfi_def_cfa_offset 16
 1066 0004 00AF     		add	r7, sp, #0
 1067              		.cfi_def_cfa_register 7
 172:NextionLCD_Communication.h ****     int slider_value = 1;
 1068              		.loc 3 172 0
 1069 0006 0123     		movs	r3, #1
 1070 0008 7B60     		str	r3, [r7, #4]
 173:NextionLCD_Communication.h ****     
 174:NextionLCD_Communication.h ****     // Anfrage an Sliderstellen
 175:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"get slider.val");
 1071              		.loc 3 175 0
 1072 000a 0848     		ldr	r0, .L51
 1073 000c FFF7FEFF 		bl	UART_TFT_PutString
 176:NextionLCD_Communication.h ****     // Anfrage absenden
 177:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1074              		.loc 3 177 0
 1075 0010 FF20     		movs	r0, #255
 1076 0012 FFF7FEFF 		bl	UART_TFT_PutChar
 178:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1077              		.loc 3 178 0
 1078 0016 FF20     		movs	r0, #255
 1079 0018 FFF7FEFF 		bl	UART_TFT_PutChar
 179:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1080              		.loc 3 179 0
 1081 001c FF20     		movs	r0, #255
 1082 001e FFF7FEFF 		bl	UART_TFT_PutChar
 180:NextionLCD_Communication.h ****     
 181:NextionLCD_Communication.h ****     return slider_value;
 1083              		.loc 3 181 0
 1084 0022 7B68     		ldr	r3, [r7, #4]
 182:NextionLCD_Communication.h **** }
 1085              		.loc 3 182 0
 1086 0024 1846     		mov	r0, r3
 1087 0026 0837     		adds	r7, r7, #8
 1088              		.cfi_def_cfa_offset 8
 1089 0028 BD46     		mov	sp, r7
 1090              		.cfi_def_cfa_register 13
 1091              		@ sp needed
 1092 002a 80BD     		pop	{r7, pc}
 1093              	.L52:
 1094              		.align	2
 1095              	.L51:
 1096 002c 2C000000 		.word	.LC1
 1097              		.cfi_endproc
 1098              	.LFE67:
 1099              		.size	Nextion_GetSliderValue, .-Nextion_GetSliderValue
 1100              		.section	.rodata
 1101 003b 00       		.align	2
 1102              	.LC2:
 1103 003c 736C6964 		.ascii	"slider.val=\000"
 1103      65722E76 
 1103      616C3D00 
 1104              		.section	.text.Nextion_SendSliderValue,"ax",%progbits
 1105              		.align	2
 1106              		.global	Nextion_SendSliderValue
 1107              		.thumb
 1108              		.thumb_func
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 29


 1109              		.type	Nextion_SendSliderValue, %function
 1110              	Nextion_SendSliderValue:
 1111              	.LFB68:
 183:NextionLCD_Communication.h **** 
 184:NextionLCD_Communication.h **** //
 185:NextionLCD_Communication.h **** // Senden des Slider-Values
 186:NextionLCD_Communication.h **** //
 187:NextionLCD_Communication.h **** void Nextion_SendSliderValue (int new_slider_value)
 188:NextionLCD_Communication.h **** {      
 1112              		.loc 3 188 0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 32
 1115              		@ frame_needed = 1, uses_anonymous_args = 0
 1116 0000 80B5     		push	{r7, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 7, -8
 1119              		.cfi_offset 14, -4
 1120 0002 88B0     		sub	sp, sp, #32
 1121              		.cfi_def_cfa_offset 40
 1122 0004 00AF     		add	r7, sp, #0
 1123              		.cfi_def_cfa_register 7
 1124 0006 7860     		str	r0, [r7, #4]
 189:NextionLCD_Communication.h ****     // Hilfsvariable mit 20 Zeichen, in der slider-Wert als char gespeichert wird
 190:NextionLCD_Communication.h ****     char num_str[20];
 191:NextionLCD_Communication.h ****     
 192:NextionLCD_Communication.h ****     // neuen Wert setzen
 193:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"slider.val=");
 1125              		.loc 3 193 0
 1126 0008 0D48     		ldr	r0, .L54
 1127 000a FFF7FEFF 		bl	UART_TFT_PutString
 194:NextionLCD_Communication.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 195:NextionLCD_Communication.h ****     itoa(new_slider_value, num_str, 10);
 1128              		.loc 3 195 0
 1129 000e 07F10C03 		add	r3, r7, #12
 1130 0012 7868     		ldr	r0, [r7, #4]
 1131 0014 1946     		mov	r1, r3
 1132 0016 0A22     		movs	r2, #10
 1133 0018 FFF7FEFF 		bl	itoa
 196:NextionLCD_Communication.h ****     UART_TFT_PutString(num_str);
 1134              		.loc 3 196 0
 1135 001c 07F10C03 		add	r3, r7, #12
 1136 0020 1846     		mov	r0, r3
 1137 0022 FFF7FEFF 		bl	UART_TFT_PutString
 197:NextionLCD_Communication.h ****     // Anfrage absenden
 198:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1138              		.loc 3 198 0
 1139 0026 FF20     		movs	r0, #255
 1140 0028 FFF7FEFF 		bl	UART_TFT_PutChar
 199:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1141              		.loc 3 199 0
 1142 002c FF20     		movs	r0, #255
 1143 002e FFF7FEFF 		bl	UART_TFT_PutChar
 200:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1144              		.loc 3 200 0
 1145 0032 FF20     		movs	r0, #255
 1146 0034 FFF7FEFF 		bl	UART_TFT_PutChar
 201:NextionLCD_Communication.h **** }
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 30


 1147              		.loc 3 201 0
 1148 0038 2037     		adds	r7, r7, #32
 1149              		.cfi_def_cfa_offset 8
 1150 003a BD46     		mov	sp, r7
 1151              		.cfi_def_cfa_register 13
 1152              		@ sp needed
 1153 003c 80BD     		pop	{r7, pc}
 1154              	.L55:
 1155 003e 00BF     		.align	2
 1156              	.L54:
 1157 0040 3C000000 		.word	.LC2
 1158              		.cfi_endproc
 1159              	.LFE68:
 1160              		.size	Nextion_SendSliderValue, .-Nextion_SendSliderValue
 1161              		.section	.rodata
 1162              		.align	2
 1163              	.LC3:
 1164 0048 655F6E6F 		.ascii	"e_no_meas.val=\000"
 1164      5F6D6561 
 1164      732E7661 
 1164      6C3D00
 1165              		.section	.text.Nextion_SendTextNoMeas,"ax",%progbits
 1166              		.align	2
 1167              		.global	Nextion_SendTextNoMeas
 1168              		.thumb
 1169              		.thumb_func
 1170              		.type	Nextion_SendTextNoMeas, %function
 1171              	Nextion_SendTextNoMeas:
 1172              	.LFB69:
 202:NextionLCD_Communication.h **** 
 203:NextionLCD_Communication.h **** //
 204:NextionLCD_Communication.h **** // Senden eines Textes an Textfeld im "Home"-Screen
 205:NextionLCD_Communication.h **** //
 206:NextionLCD_Communication.h **** void Nextion_SendTextNoMeas (int new_value)
 207:NextionLCD_Communication.h **** {      
 1173              		.loc 3 207 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 8
 1176              		@ frame_needed = 1, uses_anonymous_args = 0
 1177 0000 80B5     		push	{r7, lr}
 1178              		.cfi_def_cfa_offset 8
 1179              		.cfi_offset 7, -8
 1180              		.cfi_offset 14, -4
 1181 0002 82B0     		sub	sp, sp, #8
 1182              		.cfi_def_cfa_offset 16
 1183 0004 00AF     		add	r7, sp, #0
 1184              		.cfi_def_cfa_register 7
 1185 0006 7860     		str	r0, [r7, #4]
 208:NextionLCD_Communication.h ****     // neuen Wert setzen
 209:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"e_no_meas.val=");
 1186              		.loc 3 209 0
 1187 0008 0948     		ldr	r0, .L57
 1188 000a FFF7FEFF 		bl	UART_TFT_PutString
 210:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)new_value);
 1189              		.loc 3 210 0
 1190 000e 7B68     		ldr	r3, [r7, #4]
 1191 0010 1846     		mov	r0, r3
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 31


 1192 0012 FFF7FEFF 		bl	UART_TFT_PutString
 211:NextionLCD_Communication.h ****     // Anfrage absenden
 212:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1193              		.loc 3 212 0
 1194 0016 FF20     		movs	r0, #255
 1195 0018 FFF7FEFF 		bl	UART_TFT_PutChar
 213:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1196              		.loc 3 213 0
 1197 001c FF20     		movs	r0, #255
 1198 001e FFF7FEFF 		bl	UART_TFT_PutChar
 214:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1199              		.loc 3 214 0
 1200 0022 FF20     		movs	r0, #255
 1201 0024 FFF7FEFF 		bl	UART_TFT_PutChar
 215:NextionLCD_Communication.h **** }
 1202              		.loc 3 215 0
 1203 0028 0837     		adds	r7, r7, #8
 1204              		.cfi_def_cfa_offset 8
 1205 002a BD46     		mov	sp, r7
 1206              		.cfi_def_cfa_register 13
 1207              		@ sp needed
 1208 002c 80BD     		pop	{r7, pc}
 1209              	.L58:
 1210 002e 00BF     		.align	2
 1211              	.L57:
 1212 0030 48000000 		.word	.LC3
 1213              		.cfi_endproc
 1214              	.LFE69:
 1215              		.size	Nextion_SendTextNoMeas, .-Nextion_SendTextNoMeas
 1216              		.section	.text.Nextion_Send_String,"ax",%progbits
 1217              		.align	2
 1218              		.global	Nextion_Send_String
 1219              		.thumb
 1220              		.thumb_func
 1221              		.type	Nextion_Send_String, %function
 1222              	Nextion_Send_String:
 1223              	.LFB70:
 216:NextionLCD_Communication.h **** 
 217:NextionLCD_Communication.h **** 
 218:NextionLCD_Communication.h **** void Nextion_Send_String(unsigned char *sfloat)
 219:NextionLCD_Communication.h **** {
 1224              		.loc 3 219 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 8
 1227              		@ frame_needed = 1, uses_anonymous_args = 0
 1228 0000 80B5     		push	{r7, lr}
 1229              		.cfi_def_cfa_offset 8
 1230              		.cfi_offset 7, -8
 1231              		.cfi_offset 14, -4
 1232 0002 82B0     		sub	sp, sp, #8
 1233              		.cfi_def_cfa_offset 16
 1234 0004 00AF     		add	r7, sp, #0
 1235              		.cfi_def_cfa_register 7
 1236 0006 7860     		str	r0, [r7, #4]
 220:NextionLCD_Communication.h ****         UART_TFT_PutString((char*)sfloat);
 1237              		.loc 3 220 0
 1238 0008 7868     		ldr	r0, [r7, #4]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 32


 1239 000a FFF7FEFF 		bl	UART_TFT_PutString
 221:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);
 1240              		.loc 3 221 0
 1241 000e FF20     		movs	r0, #255
 1242 0010 FFF7FEFF 		bl	UART_TFT_PutChar
 222:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);  
 1243              		.loc 3 222 0
 1244 0014 FF20     		movs	r0, #255
 1245 0016 FFF7FEFF 		bl	UART_TFT_PutChar
 223:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);          
 1246              		.loc 3 223 0
 1247 001a FF20     		movs	r0, #255
 1248 001c FFF7FEFF 		bl	UART_TFT_PutChar
 224:NextionLCD_Communication.h **** }
 1249              		.loc 3 224 0
 1250 0020 0837     		adds	r7, r7, #8
 1251              		.cfi_def_cfa_offset 8
 1252 0022 BD46     		mov	sp, r7
 1253              		.cfi_def_cfa_register 13
 1254              		@ sp needed
 1255 0024 80BD     		pop	{r7, pc}
 1256              		.cfi_endproc
 1257              	.LFE70:
 1258              		.size	Nextion_Send_String, .-Nextion_Send_String
 1259 0026 00BF     		.section	.rodata
 1260 0057 00       		.align	2
 1261              	.LC4:
 1262 0058 76697320 		.ascii	"vis b_show,1\000"
 1262      625F7368 
 1262      6F772C31 
 1262      00
 1263 0065 000000   		.align	2
 1264              	.LC5:
 1265 0068 76697320 		.ascii	"vis b_show,0\000"
 1265      625F7368 
 1265      6F772C30 
 1265      00
 1266              		.section	.text.Nextion_Toggle_b_show,"ax",%progbits
 1267              		.align	2
 1268              		.global	Nextion_Toggle_b_show
 1269              		.thumb
 1270              		.thumb_func
 1271              		.type	Nextion_Toggle_b_show, %function
 1272              	Nextion_Toggle_b_show:
 1273              	.LFB71:
 225:NextionLCD_Communication.h **** 
 226:NextionLCD_Communication.h **** //
 227:NextionLCD_Communication.h **** // Toggle (=Kippschalter) für Show-Button, wenn die Messung läuft
 228:NextionLCD_Communication.h **** //
 229:NextionLCD_Communication.h **** void Nextion_Toggle_b_show (void)
 230:NextionLCD_Communication.h **** {
 1274              		.loc 3 230 0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 8
 1277              		@ frame_needed = 1, uses_anonymous_args = 0
 1278 0000 80B5     		push	{r7, lr}
 1279              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 33


 1280              		.cfi_offset 7, -8
 1281              		.cfi_offset 14, -4
 1282 0002 82B0     		sub	sp, sp, #8
 1283              		.cfi_def_cfa_offset 16
 1284 0004 00AF     		add	r7, sp, #0
 1285              		.cfi_def_cfa_register 7
 231:NextionLCD_Communication.h ****     int bool_measurement_running = 1;    
 1286              		.loc 3 231 0
 1287 0006 0123     		movs	r3, #1
 1288 0008 7B60     		str	r3, [r7, #4]
 232:NextionLCD_Communication.h ****     // Variablenwert von "b_meas_running" auslesen
 233:NextionLCD_Communication.h ****     
 234:NextionLCD_Communication.h ****     // wenn Messung läuft
 235:NextionLCD_Communication.h ****     if (bool_measurement_running == 1)
 1289              		.loc 3 235 0
 1290 000a 7B68     		ldr	r3, [r7, #4]
 1291 000c 012B     		cmp	r3, #1
 1292 000e 0CD1     		bne	.L61
 236:NextionLCD_Communication.h ****     {
 237:NextionLCD_Communication.h ****         // Show Button anzeigen
 238:NextionLCD_Communication.h ****         UART_TFT_PutString((char*)"vis b_show,1");
 1293              		.loc 3 238 0
 1294 0010 0D48     		ldr	r0, .L63
 1295 0012 FFF7FEFF 		bl	UART_TFT_PutString
 239:NextionLCD_Communication.h ****         // Anfrage absenden
 240:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);
 1296              		.loc 3 240 0
 1297 0016 FF20     		movs	r0, #255
 1298 0018 FFF7FEFF 		bl	UART_TFT_PutChar
 241:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);  
 1299              		.loc 3 241 0
 1300 001c FF20     		movs	r0, #255
 1301 001e FFF7FEFF 		bl	UART_TFT_PutChar
 242:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);           
 1302              		.loc 3 242 0
 1303 0022 FF20     		movs	r0, #255
 1304 0024 FFF7FEFF 		bl	UART_TFT_PutChar
 1305 0028 0BE0     		b	.L60
 1306              	.L61:
 243:NextionLCD_Communication.h ****     }
 244:NextionLCD_Communication.h ****     // wenn keine Messung läuft
 245:NextionLCD_Communication.h ****     else
 246:NextionLCD_Communication.h ****     {
 247:NextionLCD_Communication.h ****         // Show Button unsichtbar machen
 248:NextionLCD_Communication.h ****         UART_TFT_PutString((char*)"vis b_show,0");
 1307              		.loc 3 248 0
 1308 002a 0848     		ldr	r0, .L63+4
 1309 002c FFF7FEFF 		bl	UART_TFT_PutString
 249:NextionLCD_Communication.h ****         // Anfrage absenden
 250:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);
 1310              		.loc 3 250 0
 1311 0030 FF20     		movs	r0, #255
 1312 0032 FFF7FEFF 		bl	UART_TFT_PutChar
 251:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);  
 1313              		.loc 3 251 0
 1314 0036 FF20     		movs	r0, #255
 1315 0038 FFF7FEFF 		bl	UART_TFT_PutChar
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 34


 252:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xFF);
 1316              		.loc 3 252 0
 1317 003c FF20     		movs	r0, #255
 1318 003e FFF7FEFF 		bl	UART_TFT_PutChar
 1319              	.L60:
 253:NextionLCD_Communication.h ****     }
 254:NextionLCD_Communication.h ****     
 255:NextionLCD_Communication.h **** }
 1320              		.loc 3 255 0
 1321 0042 0837     		adds	r7, r7, #8
 1322              		.cfi_def_cfa_offset 8
 1323 0044 BD46     		mov	sp, r7
 1324              		.cfi_def_cfa_register 13
 1325              		@ sp needed
 1326 0046 80BD     		pop	{r7, pc}
 1327              	.L64:
 1328              		.align	2
 1329              	.L63:
 1330 0048 58000000 		.word	.LC4
 1331 004c 68000000 		.word	.LC5
 1332              		.cfi_endproc
 1333              	.LFE71:
 1334              		.size	Nextion_Toggle_b_show, .-Nextion_Toggle_b_show
 1335              		.section	.rodata
 1336 0075 000000   		.align	2
 1337              	.LC6:
 1338 0078 2E747874 		.ascii	".txt=\"\000"
 1338      3D2200
 1339 007f 00       		.align	2
 1340              	.LC7:
 1341 0080 2200     		.ascii	"\"\000"
 1342              		.section	.text.Nextion_Send_Text_to_Textbox,"ax",%progbits
 1343              		.align	2
 1344              		.global	Nextion_Send_Text_to_Textbox
 1345              		.thumb
 1346              		.thumb_func
 1347              		.type	Nextion_Send_Text_to_Textbox, %function
 1348              	Nextion_Send_Text_to_Textbox:
 1349              	.LFB72:
 256:NextionLCD_Communication.h **** 
 257:NextionLCD_Communication.h **** //
 258:NextionLCD_Communication.h **** // Text an Textbox senden
 259:NextionLCD_Communication.h **** //
 260:NextionLCD_Communication.h **** void Nextion_Send_Text_to_Textbox(unsigned char *textbox,unsigned char *sfloat)
 261:NextionLCD_Communication.h **** {
 1350              		.loc 3 261 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 8
 1353              		@ frame_needed = 1, uses_anonymous_args = 0
 1354 0000 80B5     		push	{r7, lr}
 1355              		.cfi_def_cfa_offset 8
 1356              		.cfi_offset 7, -8
 1357              		.cfi_offset 14, -4
 1358 0002 82B0     		sub	sp, sp, #8
 1359              		.cfi_def_cfa_offset 16
 1360 0004 00AF     		add	r7, sp, #0
 1361              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 35


 1362 0006 7860     		str	r0, [r7, #4]
 1363 0008 3960     		str	r1, [r7]
 262:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)textbox);
 1364              		.loc 3 262 0
 1365 000a 7868     		ldr	r0, [r7, #4]
 1366 000c FFF7FEFF 		bl	UART_TFT_PutString
 263:NextionLCD_Communication.h ****     UART_TFT_PutString(".txt=\""); 
 1367              		.loc 3 263 0
 1368 0010 0A48     		ldr	r0, .L66
 1369 0012 FFF7FEFF 		bl	UART_TFT_PutString
 264:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)sfloat);
 1370              		.loc 3 264 0
 1371 0016 3868     		ldr	r0, [r7]
 1372 0018 FFF7FEFF 		bl	UART_TFT_PutString
 265:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"\"");
 1373              		.loc 3 265 0
 1374 001c 0848     		ldr	r0, .L66+4
 1375 001e FFF7FEFF 		bl	UART_TFT_PutString
 266:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1376              		.loc 3 266 0
 1377 0022 FF20     		movs	r0, #255
 1378 0024 FFF7FEFF 		bl	UART_TFT_PutChar
 267:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1379              		.loc 3 267 0
 1380 0028 FF20     		movs	r0, #255
 1381 002a FFF7FEFF 		bl	UART_TFT_PutChar
 268:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);          
 1382              		.loc 3 268 0
 1383 002e FF20     		movs	r0, #255
 1384 0030 FFF7FEFF 		bl	UART_TFT_PutChar
 269:NextionLCD_Communication.h **** }
 1385              		.loc 3 269 0
 1386 0034 0837     		adds	r7, r7, #8
 1387              		.cfi_def_cfa_offset 8
 1388 0036 BD46     		mov	sp, r7
 1389              		.cfi_def_cfa_register 13
 1390              		@ sp needed
 1391 0038 80BD     		pop	{r7, pc}
 1392              	.L67:
 1393 003a 00BF     		.align	2
 1394              	.L66:
 1395 003c 78000000 		.word	.LC6
 1396 0040 80000000 		.word	.LC7
 1397              		.cfi_endproc
 1398              	.LFE72:
 1399              		.size	Nextion_Send_Text_to_Textbox, .-Nextion_Send_Text_to_Textbox
 1400              		.section	.rodata
 1401 0082 0000     		.align	2
 1402              	.LC8:
 1403 0084 696E745F 		.ascii	"int_now.val=\000"
 1403      6E6F772E 
 1403      76616C3D 
 1403      00
 1404              		.section	.text.Nextion_Send_Value_To_Valuebox,"ax",%progbits
 1405              		.align	2
 1406              		.global	Nextion_Send_Value_To_Valuebox
 1407              		.thumb
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 36


 1408              		.thumb_func
 1409              		.type	Nextion_Send_Value_To_Valuebox, %function
 1410              	Nextion_Send_Value_To_Valuebox:
 1411              	.LFB73:
 270:NextionLCD_Communication.h **** 
 271:NextionLCD_Communication.h **** //
 272:NextionLCD_Communication.h **** // Senden eines Textes an Textfeld im "Home"-Screen
 273:NextionLCD_Communication.h **** //
 274:NextionLCD_Communication.h **** void Nextion_Send_Value_To_Valuebox (char *valuebox, int new_value)
 275:NextionLCD_Communication.h **** {      
 1412              		.loc 3 275 0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 32
 1415              		@ frame_needed = 1, uses_anonymous_args = 0
 1416 0000 80B5     		push	{r7, lr}
 1417              		.cfi_def_cfa_offset 8
 1418              		.cfi_offset 7, -8
 1419              		.cfi_offset 14, -4
 1420 0002 88B0     		sub	sp, sp, #32
 1421              		.cfi_def_cfa_offset 40
 1422 0004 00AF     		add	r7, sp, #0
 1423              		.cfi_def_cfa_register 7
 1424 0006 7860     		str	r0, [r7, #4]
 1425 0008 3960     		str	r1, [r7]
 276:NextionLCD_Communication.h ****     // Hilfsvariable mit 20 Zeichen, in der slider-Wert als char gespeichert wird
 277:NextionLCD_Communication.h ****     char num_str[20];
 278:NextionLCD_Communication.h ****     
 279:NextionLCD_Communication.h ****     // neuen Wert setzen
 280:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)valuebox);
 1426              		.loc 3 280 0
 1427 000a 7868     		ldr	r0, [r7, #4]
 1428 000c FFF7FEFF 		bl	UART_TFT_PutString
 281:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"int_now.val=");
 1429              		.loc 3 281 0
 1430 0010 0C48     		ldr	r0, .L69
 1431 0012 FFF7FEFF 		bl	UART_TFT_PutString
 282:NextionLCD_Communication.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 283:NextionLCD_Communication.h ****     itoa(new_value, num_str, 10);
 1432              		.loc 3 283 0
 1433 0016 07F10C03 		add	r3, r7, #12
 1434 001a 3868     		ldr	r0, [r7]
 1435 001c 1946     		mov	r1, r3
 1436 001e 0A22     		movs	r2, #10
 1437 0020 FFF7FEFF 		bl	itoa
 284:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)new_value);
 1438              		.loc 3 284 0
 1439 0024 3B68     		ldr	r3, [r7]
 1440 0026 1846     		mov	r0, r3
 1441 0028 FFF7FEFF 		bl	UART_TFT_PutString
 285:NextionLCD_Communication.h ****     // Anfrage absenden
 286:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1442              		.loc 3 286 0
 1443 002c FF20     		movs	r0, #255
 1444 002e FFF7FEFF 		bl	UART_TFT_PutChar
 287:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1445              		.loc 3 287 0
 1446 0032 FF20     		movs	r0, #255
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 37


 1447 0034 FFF7FEFF 		bl	UART_TFT_PutChar
 288:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1448              		.loc 3 288 0
 1449 0038 FF20     		movs	r0, #255
 1450 003a FFF7FEFF 		bl	UART_TFT_PutChar
 289:NextionLCD_Communication.h **** }
 1451              		.loc 3 289 0
 1452 003e 2037     		adds	r7, r7, #32
 1453              		.cfi_def_cfa_offset 8
 1454 0040 BD46     		mov	sp, r7
 1455              		.cfi_def_cfa_register 13
 1456              		@ sp needed
 1457 0042 80BD     		pop	{r7, pc}
 1458              	.L70:
 1459              		.align	2
 1460              	.L69:
 1461 0044 84000000 		.word	.LC8
 1462              		.cfi_endproc
 1463              	.LFE73:
 1464              		.size	Nextion_Send_Value_To_Valuebox, .-Nextion_Send_Value_To_Valuebox
 1465              		.section	.rodata
 1466 0091 000000   		.align	2
 1467              	.LC9:
 1468 0094 705F6D61 		.ascii	"p_main.val=\000"
 1468      696E2E76 
 1468      616C3D00 
 1469              		.section	.text.Nextion_SendProgressbarValue,"ax",%progbits
 1470              		.align	2
 1471              		.global	Nextion_SendProgressbarValue
 1472              		.thumb
 1473              		.thumb_func
 1474              		.type	Nextion_SendProgressbarValue, %function
 1475              	Nextion_SendProgressbarValue:
 1476              	.LFB74:
 290:NextionLCD_Communication.h **** 
 291:NextionLCD_Communication.h **** ////////void Nextion_Send_Value_to_Textbox(unsigned char *textbox,float value)
 292:NextionLCD_Communication.h **** ////////{
 293:NextionLCD_Communication.h **** ////////    char sfloat[10];
 294:NextionLCD_Communication.h **** ////////    // Float anzeigewert to ASCII
 295:NextionLCD_Communication.h **** ////////    ftoa(value,3,sfloat);    
 296:NextionLCD_Communication.h **** ////////    UART_TFT_PutString((char*)textbox);
 297:NextionLCD_Communication.h **** ////////    UART_TFT_PutString(".txt=\""); 
 298:NextionLCD_Communication.h **** ////////    UART_TFT_PutString((char*)sfloat);
 299:NextionLCD_Communication.h **** ////////    UART_TFT_PutString((char*)"\"");
 300:NextionLCD_Communication.h **** ////////    UART_TFT_PutChar(0xFF);
 301:NextionLCD_Communication.h **** ////////    UART_TFT_PutChar(0xFF);  
 302:NextionLCD_Communication.h **** ////////    UART_TFT_PutChar(0xFF);          
 303:NextionLCD_Communication.h **** ////////}
 304:NextionLCD_Communication.h **** 
 305:NextionLCD_Communication.h **** //
 306:NextionLCD_Communication.h **** // Stellwert des Progessbar setzen; Werte von 0 bis 100
 307:NextionLCD_Communication.h **** //
 308:NextionLCD_Communication.h **** void Nextion_SendProgressbarValue(unsigned int value)
 309:NextionLCD_Communication.h **** {
 1477              		.loc 3 309 0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 32
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 38


 1480              		@ frame_needed = 1, uses_anonymous_args = 0
 1481 0000 80B5     		push	{r7, lr}
 1482              		.cfi_def_cfa_offset 8
 1483              		.cfi_offset 7, -8
 1484              		.cfi_offset 14, -4
 1485 0002 88B0     		sub	sp, sp, #32
 1486              		.cfi_def_cfa_offset 40
 1487 0004 00AF     		add	r7, sp, #0
 1488              		.cfi_def_cfa_register 7
 1489 0006 7860     		str	r0, [r7, #4]
 310:NextionLCD_Communication.h ****     // Hilfsvariable mit 20 Zeichen, in der slider-Wert als char gespeichert wird
 311:NextionLCD_Communication.h ****     char num_str[20];
 312:NextionLCD_Communication.h **** 
 313:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"p_main.val=");
 1490              		.loc 3 313 0
 1491 0008 0D48     		ldr	r0, .L72
 1492 000a FFF7FEFF 		bl	UART_TFT_PutString
 314:NextionLCD_Communication.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 315:NextionLCD_Communication.h ****     itoa(value, num_str, 10);
 1493              		.loc 3 315 0
 1494 000e 7A68     		ldr	r2, [r7, #4]
 1495 0010 07F10C03 		add	r3, r7, #12
 1496 0014 1046     		mov	r0, r2
 1497 0016 1946     		mov	r1, r3
 1498 0018 0A22     		movs	r2, #10
 1499 001a FFF7FEFF 		bl	itoa
 316:NextionLCD_Communication.h ****     UART_TFT_PutString(num_str);
 1500              		.loc 3 316 0
 1501 001e 07F10C03 		add	r3, r7, #12
 1502 0022 1846     		mov	r0, r3
 1503 0024 FFF7FEFF 		bl	UART_TFT_PutString
 317:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1504              		.loc 3 317 0
 1505 0028 FF20     		movs	r0, #255
 1506 002a FFF7FEFF 		bl	UART_TFT_PutChar
 318:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1507              		.loc 3 318 0
 1508 002e FF20     		movs	r0, #255
 1509 0030 FFF7FEFF 		bl	UART_TFT_PutChar
 319:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);          
 1510              		.loc 3 319 0
 1511 0034 FF20     		movs	r0, #255
 1512 0036 FFF7FEFF 		bl	UART_TFT_PutChar
 320:NextionLCD_Communication.h **** }
 1513              		.loc 3 320 0
 1514 003a 2037     		adds	r7, r7, #32
 1515              		.cfi_def_cfa_offset 8
 1516 003c BD46     		mov	sp, r7
 1517              		.cfi_def_cfa_register 13
 1518              		@ sp needed
 1519 003e 80BD     		pop	{r7, pc}
 1520              	.L73:
 1521              		.align	2
 1522              	.L72:
 1523 0040 94000000 		.word	.LC9
 1524              		.cfi_endproc
 1525              	.LFE74:
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 39


 1526              		.size	Nextion_SendProgressbarValue, .-Nextion_SendProgressbarValue
 1527              		.section	.rodata
 1528              		.align	2
 1529              	.LC10:
 1530 00a0 76697320 		.ascii	"vis b_save,0\000"
 1530      625F7361 
 1530      76652C30 
 1530      00
 1531              		.section	.text.Nextion_HideButtonSaveToUSB,"ax",%progbits
 1532              		.align	2
 1533              		.global	Nextion_HideButtonSaveToUSB
 1534              		.thumb
 1535              		.thumb_func
 1536              		.type	Nextion_HideButtonSaveToUSB, %function
 1537              	Nextion_HideButtonSaveToUSB:
 1538              	.LFB75:
 321:NextionLCD_Communication.h **** 
 322:NextionLCD_Communication.h **** //
 323:NextionLCD_Communication.h **** // Button "Save to USB" auf Export Seite unishctbar machen
 324:NextionLCD_Communication.h **** //
 325:NextionLCD_Communication.h **** void Nextion_HideButtonSaveToUSB(void)
 326:NextionLCD_Communication.h **** {
 1539              		.loc 3 326 0
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 0
 1542              		@ frame_needed = 1, uses_anonymous_args = 0
 1543 0000 80B5     		push	{r7, lr}
 1544              		.cfi_def_cfa_offset 8
 1545              		.cfi_offset 7, -8
 1546              		.cfi_offset 14, -4
 1547 0002 00AF     		add	r7, sp, #0
 1548              		.cfi_def_cfa_register 7
 327:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"vis b_save,0");
 1549              		.loc 3 327 0
 1550 0004 0648     		ldr	r0, .L75
 1551 0006 FFF7FEFF 		bl	UART_TFT_PutString
 328:NextionLCD_Communication.h ****     // Ende der Eingabe markieren
 329:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xff);
 1552              		.loc 3 329 0
 1553 000a FF20     		movs	r0, #255
 1554 000c FFF7FEFF 		bl	UART_TFT_PutChar
 330:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xff);
 1555              		.loc 3 330 0
 1556 0010 FF20     		movs	r0, #255
 1557 0012 FFF7FEFF 		bl	UART_TFT_PutChar
 331:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xff);         
 1558              		.loc 3 331 0
 1559 0016 FF20     		movs	r0, #255
 1560 0018 FFF7FEFF 		bl	UART_TFT_PutChar
 332:NextionLCD_Communication.h **** }
 1561              		.loc 3 332 0
 1562 001c 80BD     		pop	{r7, pc}
 1563              	.L76:
 1564 001e 00BF     		.align	2
 1565              	.L75:
 1566 0020 A0000000 		.word	.LC10
 1567              		.cfi_endproc
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 40


 1568              	.LFE75:
 1569              		.size	Nextion_HideButtonSaveToUSB, .-Nextion_HideButtonSaveToUSB
 1570              		.section	.rodata
 1571 00ad 000000   		.align	2
 1572              	.LC11:
 1573 00b0 736C6964 		.ascii	"slider_saved.val=\000"
 1573      65725F73 
 1573      61766564 
 1573      2E76616C 
 1573      3D00
 1574              		.section	.text.Nextion_SendSaveProgressbarValue,"ax",%progbits
 1575              		.align	2
 1576              		.global	Nextion_SendSaveProgressbarValue
 1577              		.thumb
 1578              		.thumb_func
 1579              		.type	Nextion_SendSaveProgressbarValue, %function
 1580              	Nextion_SendSaveProgressbarValue:
 1581              	.LFB76:
 333:NextionLCD_Communication.h **** 
 334:NextionLCD_Communication.h **** //
 335:NextionLCD_Communication.h **** // Stellwert des Progessbar setzen; Werte von 0 bis 100
 336:NextionLCD_Communication.h **** //
 337:NextionLCD_Communication.h **** void Nextion_SendSaveProgressbarValue(unsigned int value)
 338:NextionLCD_Communication.h **** {
 1582              		.loc 3 338 0
 1583              		.cfi_startproc
 1584              		@ args = 0, pretend = 0, frame = 32
 1585              		@ frame_needed = 1, uses_anonymous_args = 0
 1586 0000 80B5     		push	{r7, lr}
 1587              		.cfi_def_cfa_offset 8
 1588              		.cfi_offset 7, -8
 1589              		.cfi_offset 14, -4
 1590 0002 88B0     		sub	sp, sp, #32
 1591              		.cfi_def_cfa_offset 40
 1592 0004 00AF     		add	r7, sp, #0
 1593              		.cfi_def_cfa_register 7
 1594 0006 7860     		str	r0, [r7, #4]
 339:NextionLCD_Communication.h ****     // Hilfsvariable mit 20 Zeichen, in der slider-Wert als char gespeichert wird
 340:NextionLCD_Communication.h ****     char num_str[20];
 341:NextionLCD_Communication.h **** 
 342:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"slider_saved.val=");
 1595              		.loc 3 342 0
 1596 0008 0D48     		ldr	r0, .L78
 1597 000a FFF7FEFF 		bl	UART_TFT_PutString
 343:NextionLCD_Communication.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 344:NextionLCD_Communication.h ****     itoa(value, num_str, 10);
 1598              		.loc 3 344 0
 1599 000e 7A68     		ldr	r2, [r7, #4]
 1600 0010 07F10C03 		add	r3, r7, #12
 1601 0014 1046     		mov	r0, r2
 1602 0016 1946     		mov	r1, r3
 1603 0018 0A22     		movs	r2, #10
 1604 001a FFF7FEFF 		bl	itoa
 345:NextionLCD_Communication.h ****     UART_TFT_PutString(num_str);
 1605              		.loc 3 345 0
 1606 001e 07F10C03 		add	r3, r7, #12
 1607 0022 1846     		mov	r0, r3
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 41


 1608 0024 FFF7FEFF 		bl	UART_TFT_PutString
 346:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1609              		.loc 3 346 0
 1610 0028 FF20     		movs	r0, #255
 1611 002a FFF7FEFF 		bl	UART_TFT_PutChar
 347:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1612              		.loc 3 347 0
 1613 002e FF20     		movs	r0, #255
 1614 0030 FFF7FEFF 		bl	UART_TFT_PutChar
 348:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);          
 1615              		.loc 3 348 0
 1616 0034 FF20     		movs	r0, #255
 1617 0036 FFF7FEFF 		bl	UART_TFT_PutChar
 349:NextionLCD_Communication.h **** }
 1618              		.loc 3 349 0
 1619 003a 2037     		adds	r7, r7, #32
 1620              		.cfi_def_cfa_offset 8
 1621 003c BD46     		mov	sp, r7
 1622              		.cfi_def_cfa_register 13
 1623              		@ sp needed
 1624 003e 80BD     		pop	{r7, pc}
 1625              	.L79:
 1626              		.align	2
 1627              	.L78:
 1628 0040 B0000000 		.word	.LC11
 1629              		.cfi_endproc
 1630              	.LFE76:
 1631              		.size	Nextion_SendSaveProgressbarValue, .-Nextion_SendSaveProgressbarValue
 1632              		.section	.text.Nextion_NumberOfMeasurementsFromSlider,"ax",%progbits
 1633              		.align	2
 1634              		.global	Nextion_NumberOfMeasurementsFromSlider
 1635              		.thumb
 1636              		.thumb_func
 1637              		.type	Nextion_NumberOfMeasurementsFromSlider, %function
 1638              	Nextion_NumberOfMeasurementsFromSlider:
 1639              	.LFB77:
 350:NextionLCD_Communication.h **** 
 351:NextionLCD_Communication.h **** //
 352:NextionLCD_Communication.h **** // Stellwert des Sliders auslesen und aauf 10 gerundet an die Value Box übergeben;
 353:NextionLCD_Communication.h **** // diese Zahl ist dann die Anzahl der Messungen
 354:NextionLCD_Communication.h **** //
 355:NextionLCD_Communication.h **** int Nextion_NumberOfMeasurementsFromSlider (void)
 356:NextionLCD_Communication.h **** {        
 1640              		.loc 3 356 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 8
 1643              		@ frame_needed = 1, uses_anonymous_args = 0
 1644 0000 80B5     		push	{r7, lr}
 1645              		.cfi_def_cfa_offset 8
 1646              		.cfi_offset 7, -8
 1647              		.cfi_offset 14, -4
 1648 0002 82B0     		sub	sp, sp, #8
 1649              		.cfi_def_cfa_offset 16
 1650 0004 00AF     		add	r7, sp, #0
 1651              		.cfi_def_cfa_register 7
 357:NextionLCD_Communication.h ****     int slider_value = (RX_Buffer[1]+RX_Buffer[2]*256)*10;      // zehnfachen Wert des Sliders als 
 1652              		.loc 3 357 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 42


 1653 0006 154B     		ldr	r3, .L82
 1654 0008 5B78     		ldrb	r3, [r3, #1]
 1655 000a DBB2     		uxtb	r3, r3
 1656 000c 1A46     		mov	r2, r3
 1657 000e 134B     		ldr	r3, .L82
 1658 0010 9B78     		ldrb	r3, [r3, #2]
 1659 0012 DBB2     		uxtb	r3, r3
 1660 0014 1B02     		lsls	r3, r3, #8
 1661 0016 1A44     		add	r2, r2, r3
 1662 0018 1346     		mov	r3, r2
 1663 001a 9B00     		lsls	r3, r3, #2
 1664 001c 1344     		add	r3, r3, r2
 1665 001e 5B00     		lsls	r3, r3, #1
 1666 0020 7B60     		str	r3, [r7, #4]
 358:NextionLCD_Communication.h ****     
 359:NextionLCD_Communication.h ****     UART_TFT_PutString((char*)"e_no_meas.val=");
 1667              		.loc 3 359 0
 1668 0022 0F48     		ldr	r0, .L82+4
 1669 0024 FFF7FEFF 		bl	UART_TFT_PutString
 360:NextionLCD_Communication.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 361:NextionLCD_Communication.h ****     itoa(slider_value, num_str, 10);
 1670              		.loc 3 361 0
 1671 0028 7868     		ldr	r0, [r7, #4]
 1672 002a 0E49     		ldr	r1, .L82+8
 1673 002c 0A22     		movs	r2, #10
 1674 002e FFF7FEFF 		bl	itoa
 362:NextionLCD_Communication.h ****     UART_TFT_PutString(num_str);
 1675              		.loc 3 362 0
 1676 0032 0C48     		ldr	r0, .L82+8
 1677 0034 FFF7FEFF 		bl	UART_TFT_PutString
 363:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1678              		.loc 3 363 0
 1679 0038 FF20     		movs	r0, #255
 1680 003a FFF7FEFF 		bl	UART_TFT_PutChar
 364:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);
 1681              		.loc 3 364 0
 1682 003e FF20     		movs	r0, #255
 1683 0040 FFF7FEFF 		bl	UART_TFT_PutChar
 365:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);  
 1684              		.loc 3 365 0
 1685 0044 FF20     		movs	r0, #255
 1686 0046 FFF7FEFF 		bl	UART_TFT_PutChar
 366:NextionLCD_Communication.h ****     UART_TFT_PutChar(0xFF);   
 1687              		.loc 3 366 0
 1688 004a FF20     		movs	r0, #255
 1689 004c FFF7FEFF 		bl	UART_TFT_PutChar
 367:NextionLCD_Communication.h ****     
 368:NextionLCD_Communication.h ****     return slider_value;
 1690              		.loc 3 368 0
 1691 0050 7B68     		ldr	r3, [r7, #4]
 369:NextionLCD_Communication.h **** }
 1692              		.loc 3 369 0
 1693 0052 1846     		mov	r0, r3
 1694 0054 0837     		adds	r7, r7, #8
 1695              		.cfi_def_cfa_offset 8
 1696 0056 BD46     		mov	sp, r7
 1697              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 43


 1698              		@ sp needed
 1699 0058 80BD     		pop	{r7, pc}
 1700              	.L83:
 1701 005a 00BF     		.align	2
 1702              	.L82:
 1703 005c 00000000 		.word	RX_Buffer
 1704 0060 48000000 		.word	.LC3
 1705 0064 00000000 		.word	num_str
 1706              		.cfi_endproc
 1707              	.LFE77:
 1708              		.size	Nextion_NumberOfMeasurementsFromSlider, .-Nextion_NumberOfMeasurementsFromSlider
 1709              		.section	.text.Nextion_ToggleShowButton,"ax",%progbits
 1710              		.align	2
 1711              		.global	Nextion_ToggleShowButton
 1712              		.thumb
 1713              		.thumb_func
 1714              		.type	Nextion_ToggleShowButton, %function
 1715              	Nextion_ToggleShowButton:
 1716              	.LFB78:
 370:NextionLCD_Communication.h **** 
 371:NextionLCD_Communication.h **** //
 372:NextionLCD_Communication.h **** // Show-Button passend anzeigen
 373:NextionLCD_Communication.h **** //
 374:NextionLCD_Communication.h **** void Nextion_ToggleShowButton (void)
 375:NextionLCD_Communication.h **** {
 1717              		.loc 3 375 0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 0
 1720              		@ frame_needed = 1, uses_anonymous_args = 0
 1721 0000 80B5     		push	{r7, lr}
 1722              		.cfi_def_cfa_offset 8
 1723              		.cfi_offset 7, -8
 1724              		.cfi_offset 14, -4
 1725 0002 00AF     		add	r7, sp, #0
 1726              		.cfi_def_cfa_register 7
 376:NextionLCD_Communication.h ****     // Wenn die Messung läuft
 377:NextionLCD_Communication.h ****     if (Measurement_running == 1)
 1727              		.loc 3 377 0
 1728 0004 0F4B     		ldr	r3, .L87
 1729 0006 1B78     		ldrb	r3, [r3]
 1730 0008 DBB2     		uxtb	r3, r3
 1731 000a 012B     		cmp	r3, #1
 1732 000c 0CD1     		bne	.L85
 378:NextionLCD_Communication.h ****     {
 379:NextionLCD_Communication.h ****         // Show Button sichtbar machen
 380:NextionLCD_Communication.h ****         UART_TFT_PutString("vis b_show,1");
 1733              		.loc 3 380 0
 1734 000e 0E48     		ldr	r0, .L87+4
 1735 0010 FFF7FEFF 		bl	UART_TFT_PutString
 381:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xff);
 1736              		.loc 3 381 0
 1737 0014 FF20     		movs	r0, #255
 1738 0016 FFF7FEFF 		bl	UART_TFT_PutChar
 382:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xff);
 1739              		.loc 3 382 0
 1740 001a FF20     		movs	r0, #255
 1741 001c FFF7FEFF 		bl	UART_TFT_PutChar
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 44


 383:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xff); 
 1742              		.loc 3 383 0
 1743 0020 FF20     		movs	r0, #255
 1744 0022 FFF7FEFF 		bl	UART_TFT_PutChar
 1745 0026 0BE0     		b	.L84
 1746              	.L85:
 384:NextionLCD_Communication.h ****     }
 385:NextionLCD_Communication.h ****     // Wenn die Messung noch nicht gestartet wurde
 386:NextionLCD_Communication.h ****     else
 387:NextionLCD_Communication.h ****     {
 388:NextionLCD_Communication.h ****         // Show Button unsichtbar machen
 389:NextionLCD_Communication.h ****         UART_TFT_PutString("vis b_show,0");
 1747              		.loc 3 389 0
 1748 0028 0848     		ldr	r0, .L87+8
 1749 002a FFF7FEFF 		bl	UART_TFT_PutString
 390:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xff);
 1750              		.loc 3 390 0
 1751 002e FF20     		movs	r0, #255
 1752 0030 FFF7FEFF 		bl	UART_TFT_PutChar
 391:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xff);
 1753              		.loc 3 391 0
 1754 0034 FF20     		movs	r0, #255
 1755 0036 FFF7FEFF 		bl	UART_TFT_PutChar
 392:NextionLCD_Communication.h ****         UART_TFT_PutChar(0xff);
 1756              		.loc 3 392 0
 1757 003a FF20     		movs	r0, #255
 1758 003c FFF7FEFF 		bl	UART_TFT_PutChar
 1759              	.L84:
 393:NextionLCD_Communication.h ****     }   
 394:NextionLCD_Communication.h **** }
 1760              		.loc 3 394 0
 1761 0040 80BD     		pop	{r7, pc}
 1762              	.L88:
 1763 0042 00BF     		.align	2
 1764              	.L87:
 1765 0044 00000000 		.word	Measurement_running
 1766 0048 58000000 		.word	.LC4
 1767 004c 68000000 		.word	.LC5
 1768              		.cfi_endproc
 1769              	.LFE78:
 1770              		.size	Nextion_ToggleShowButton, .-Nextion_ToggleShowButton
 1771              		.global	__aeabi_f2d
 1772              		.global	__aeabi_d2f
 1773              		.global	__aeabi_i2f
 1774              		.global	__aeabi_fdiv
 1775              		.global	__aeabi_fsub
 1776              		.global	__aeabi_fmul
 1777              		.global	__aeabi_fadd
 1778              		.section	.rodata
 1779 00c2 0000     		.align	2
 1780              	.LC12:
 1781 00c4 63697273 		.ascii	"cirs \000"
 1781      2000
 1782              		.global	__aeabi_f2iz
 1783 00ca 0000     		.align	2
 1784              	.LC13:
 1785 00cc 52454400 		.ascii	"RED\000"
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 45


 1786              		.section	.text.PointToLiveDataAxes,"ax",%progbits
 1787              		.align	2
 1788              		.global	PointToLiveDataAxes
 1789              		.thumb
 1790              		.thumb_func
 1791              		.type	PointToLiveDataAxes, %function
 1792              	PointToLiveDataAxes:
 1793              	.LFB79:
 1794              		.file 4 "NextionLCD_PlotLiveData.h"
   1:NextionLCD_PlotLiveData.h **** /* ========================================
   2:NextionLCD_PlotLiveData.h ****  *
   3:NextionLCD_PlotLiveData.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:NextionLCD_PlotLiveData.h ****  * All Rights Reserved
   5:NextionLCD_PlotLiveData.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:NextionLCD_PlotLiveData.h ****  *
   7:NextionLCD_PlotLiveData.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:NextionLCD_PlotLiveData.h ****  * WHICH IS THE PROPERTY OF your company.
   9:NextionLCD_PlotLiveData.h ****  *
  10:NextionLCD_PlotLiveData.h ****  * ========================================
  11:NextionLCD_PlotLiveData.h **** */
  12:NextionLCD_PlotLiveData.h **** 
  13:NextionLCD_PlotLiveData.h **** #include <project.h>
  14:NextionLCD_PlotLiveData.h **** #include <math.h>
  15:NextionLCD_PlotLiveData.h **** #include <stdlib.h>
  16:NextionLCD_PlotLiveData.h **** 
  17:NextionLCD_PlotLiveData.h **** //
  18:NextionLCD_PlotLiveData.h **** // Achtung!!! #ifndef #define #endif-Konstruktion zur Vermeidung von doppelten Definitione
  19:NextionLCD_PlotLiveData.h **** //
  20:NextionLCD_PlotLiveData.h **** #ifndef NextionLCD_Communication                // Funktionen für Kommunikation mit dem LCD-Displa
  21:NextionLCD_PlotLiveData.h **** #define NextionLCD_Communication                
  22:NextionLCD_PlotLiveData.h **** #endif 
  23:NextionLCD_PlotLiveData.h **** 
  24:NextionLCD_PlotLiveData.h **** //#ifndef Measurement_Setup
  25:NextionLCD_PlotLiveData.h **** //#define Measurement_Setup
  26:NextionLCD_PlotLiveData.h **** //#endif
  27:NextionLCD_PlotLiveData.h **** 
  28:NextionLCD_PlotLiveData.h **** #include "NextionLCD_PlotParameters.h"
  29:NextionLCD_PlotLiveData.h **** 
  30:NextionLCD_PlotLiveData.h **** //
  31:NextionLCD_PlotLiveData.h **** // Messpunkt in DataLive einzeichnen
  32:NextionLCD_PlotLiveData.h **** //
  33:NextionLCD_PlotLiveData.h **** void PointToLiveDataAxes (float x, float y)
  34:NextionLCD_PlotLiveData.h **** {
 1795              		.loc 4 34 0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 32
 1798              		@ frame_needed = 1, uses_anonymous_args = 0
 1799 0000 B0B5     		push	{r4, r5, r7, lr}
 1800              		.cfi_def_cfa_offset 16
 1801              		.cfi_offset 4, -16
 1802              		.cfi_offset 5, -12
 1803              		.cfi_offset 7, -8
 1804              		.cfi_offset 14, -4
 1805 0002 88B0     		sub	sp, sp, #32
 1806              		.cfi_def_cfa_offset 48
 1807 0004 00AF     		add	r7, sp, #0
 1808              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 46


 1809 0006 7860     		str	r0, [r7, #4]	@ float
 1810 0008 3960     		str	r1, [r7]	@ float
  35:NextionLCD_PlotLiveData.h ****     // Hilfsvariable mit 20 Zeichen
  36:NextionLCD_PlotLiveData.h ****     char num_str[20];
  37:NextionLCD_PlotLiveData.h ****     
  38:NextionLCD_PlotLiveData.h ****     // Umskalieren des Wertes, sodass er in Zeichenfläche liegt
  39:NextionLCD_PlotLiveData.h ****     //x = Nextion_plot_LiveData_x+Nextion_plot_LiveData_w*((x-1.0)/(1.0*NumberOfMeasurements-1.0));
  40:NextionLCD_PlotLiveData.h ****     x = Nextion_plot_LiveData_x+Nextion_plot_LiveData_w*((x-1.0)/(1.0*NumberOfMeasurements-1.0));  
 1811              		.loc 4 40 0
 1812 000a 7868     		ldr	r0, [r7, #4]	@ float
 1813 000c FFF7FEFF 		bl	__aeabi_f2d
 1814 0010 0246     		mov	r2, r0
 1815 0012 0B46     		mov	r3, r1
 1816 0014 1046     		mov	r0, r2
 1817 0016 1946     		mov	r1, r3
 1818 0018 4FF00002 		mov	r2, #0
 1819 001c 4E4B     		ldr	r3, .L90+8
 1820 001e FFF7FEFF 		bl	__aeabi_dsub
 1821 0022 0246     		mov	r2, r0
 1822 0024 0B46     		mov	r3, r1
 1823 0026 1446     		mov	r4, r2
 1824 0028 1D46     		mov	r5, r3
 1825 002a 4C4B     		ldr	r3, .L90+12
 1826 002c 1B68     		ldr	r3, [r3]
 1827 002e 1846     		mov	r0, r3
 1828 0030 FFF7FEFF 		bl	__aeabi_i2d
 1829 0034 0246     		mov	r2, r0
 1830 0036 0B46     		mov	r3, r1
 1831 0038 1046     		mov	r0, r2
 1832 003a 1946     		mov	r1, r3
 1833 003c 4FF00002 		mov	r2, #0
 1834 0040 454B     		ldr	r3, .L90+8
 1835 0042 FFF7FEFF 		bl	__aeabi_dsub
 1836 0046 0246     		mov	r2, r0
 1837 0048 0B46     		mov	r3, r1
 1838 004a 2046     		mov	r0, r4
 1839 004c 2946     		mov	r1, r5
 1840 004e FFF7FEFF 		bl	__aeabi_ddiv
 1841 0052 0246     		mov	r2, r0
 1842 0054 0B46     		mov	r3, r1
 1843 0056 1046     		mov	r0, r2
 1844 0058 1946     		mov	r1, r3
 1845 005a 3DA3     		adr	r3, .L90
 1846 005c D3E90023 		ldrd	r2, [r3]
 1847 0060 FFF7FEFF 		bl	__aeabi_dmul
 1848 0064 0246     		mov	r2, r0
 1849 0066 0B46     		mov	r3, r1
 1850 0068 1046     		mov	r0, r2
 1851 006a 1946     		mov	r1, r3
 1852 006c 4FF00002 		mov	r2, #0
 1853 0070 3B4B     		ldr	r3, .L90+16
 1854 0072 FFF7FEFF 		bl	__aeabi_dadd
 1855 0076 0246     		mov	r2, r0
 1856 0078 0B46     		mov	r3, r1
 1857 007a 1046     		mov	r0, r2
 1858 007c 1946     		mov	r1, r3
 1859 007e FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 47


 1860 0082 0346     		mov	r3, r0
 1861 0084 7B60     		str	r3, [r7, #4]	@ float
  41:NextionLCD_PlotLiveData.h ****     y = Nextion_plot_LiveData_y+Nextion_plot_LiveData_h*(1-y/Lifetime_max);                        
 1862              		.loc 4 41 0
 1863 0086 374B     		ldr	r3, .L90+20
 1864 0088 1B68     		ldr	r3, [r3]
 1865 008a 1846     		mov	r0, r3
 1866 008c FFF7FEFF 		bl	__aeabi_i2f
 1867 0090 0346     		mov	r3, r0
 1868 0092 3868     		ldr	r0, [r7]	@ float
 1869 0094 1946     		mov	r1, r3
 1870 0096 FFF7FEFF 		bl	__aeabi_fdiv
 1871 009a 0346     		mov	r3, r0
 1872 009c 4FF07E50 		mov	r0, #1065353216
 1873 00a0 1946     		mov	r1, r3
 1874 00a2 FFF7FEFF 		bl	__aeabi_fsub
 1875 00a6 0346     		mov	r3, r0
 1876 00a8 1846     		mov	r0, r3
 1877 00aa 2F49     		ldr	r1, .L90+24
 1878 00ac FFF7FEFF 		bl	__aeabi_fmul
 1879 00b0 0346     		mov	r3, r0
 1880 00b2 1846     		mov	r0, r3
 1881 00b4 2D49     		ldr	r1, .L90+28
 1882 00b6 FFF7FEFF 		bl	__aeabi_fadd
 1883 00ba 0346     		mov	r3, r0
 1884 00bc 3B60     		str	r3, [r7]	@ float
  42:NextionLCD_PlotLiveData.h ****     
  43:NextionLCD_PlotLiveData.h ****     // Zielstring "cir x-Koordinate,y-Koordinate,Radius,Farbe"
  44:NextionLCD_PlotLiveData.h ****     UART_TFT_PutString("cirs ");
 1885              		.loc 4 44 0
 1886 00be 2C48     		ldr	r0, .L90+32
 1887 00c0 FFF7FEFF 		bl	UART_TFT_PutString
  45:NextionLCD_PlotLiveData.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
  46:NextionLCD_PlotLiveData.h ****     itoa(x, num_str, 10);
 1888              		.loc 4 46 0
 1889 00c4 7868     		ldr	r0, [r7, #4]	@ float
 1890 00c6 FFF7FEFF 		bl	__aeabi_f2iz
 1891 00ca 0246     		mov	r2, r0
 1892 00cc 07F10C03 		add	r3, r7, #12
 1893 00d0 1046     		mov	r0, r2
 1894 00d2 1946     		mov	r1, r3
 1895 00d4 0A22     		movs	r2, #10
 1896 00d6 FFF7FEFF 		bl	itoa
  47:NextionLCD_PlotLiveData.h ****     UART_TFT_PutString(num_str);
 1897              		.loc 4 47 0
 1898 00da 07F10C03 		add	r3, r7, #12
 1899 00de 1846     		mov	r0, r3
 1900 00e0 FFF7FEFF 		bl	UART_TFT_PutString
  48:NextionLCD_PlotLiveData.h ****     UART_TFT_PutChar(',');
 1901              		.loc 4 48 0
 1902 00e4 2C20     		movs	r0, #44
 1903 00e6 FFF7FEFF 		bl	UART_TFT_PutChar
  49:NextionLCD_PlotLiveData.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
  50:NextionLCD_PlotLiveData.h ****     itoa((int)y, num_str, 10);
 1904              		.loc 4 50 0
 1905 00ea 3868     		ldr	r0, [r7]	@ float
 1906 00ec FFF7FEFF 		bl	__aeabi_f2iz
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 48


 1907 00f0 0246     		mov	r2, r0
 1908 00f2 07F10C03 		add	r3, r7, #12
 1909 00f6 1046     		mov	r0, r2
 1910 00f8 1946     		mov	r1, r3
 1911 00fa 0A22     		movs	r2, #10
 1912 00fc FFF7FEFF 		bl	itoa
  51:NextionLCD_PlotLiveData.h ****     UART_TFT_PutString(num_str);
 1913              		.loc 4 51 0
 1914 0100 07F10C03 		add	r3, r7, #12
 1915 0104 1846     		mov	r0, r3
 1916 0106 FFF7FEFF 		bl	UART_TFT_PutString
  52:NextionLCD_PlotLiveData.h ****     UART_TFT_PutChar(',');
 1917              		.loc 4 52 0
 1918 010a 2C20     		movs	r0, #44
 1919 010c FFF7FEFF 		bl	UART_TFT_PutChar
  53:NextionLCD_PlotLiveData.h ****     // Mark Size übertragen
  54:NextionLCD_PlotLiveData.h ****     itoa(Settings_MarkSize, num_str, 10);
 1920              		.loc 4 54 0
 1921 0110 07F10C03 		add	r3, r7, #12
 1922 0114 0320     		movs	r0, #3
 1923 0116 1946     		mov	r1, r3
 1924 0118 0A22     		movs	r2, #10
 1925 011a FFF7FEFF 		bl	itoa
  55:NextionLCD_PlotLiveData.h ****     UART_TFT_PutString(num_str);
 1926              		.loc 4 55 0
 1927 011e 07F10C03 		add	r3, r7, #12
 1928 0122 1846     		mov	r0, r3
 1929 0124 FFF7FEFF 		bl	UART_TFT_PutString
  56:NextionLCD_PlotLiveData.h ****     UART_TFT_PutChar(',');
 1930              		.loc 4 56 0
 1931 0128 2C20     		movs	r0, #44
 1932 012a FFF7FEFF 		bl	UART_TFT_PutChar
  57:NextionLCD_PlotLiveData.h ****     // Farbe übertragen
  58:NextionLCD_PlotLiveData.h ****     UART_TFT_PutString("RED");
 1933              		.loc 4 58 0
 1934 012e 1148     		ldr	r0, .L90+36
 1935 0130 FFF7FEFF 		bl	UART_TFT_PutString
  59:NextionLCD_PlotLiveData.h ****     // Ende der Eingabe markieren
  60:NextionLCD_PlotLiveData.h ****     UART_TFT_PutChar(0xff);
 1936              		.loc 4 60 0
 1937 0134 FF20     		movs	r0, #255
 1938 0136 FFF7FEFF 		bl	UART_TFT_PutChar
  61:NextionLCD_PlotLiveData.h ****     UART_TFT_PutChar(0xff);
 1939              		.loc 4 61 0
 1940 013a FF20     		movs	r0, #255
 1941 013c FFF7FEFF 		bl	UART_TFT_PutChar
  62:NextionLCD_PlotLiveData.h ****     UART_TFT_PutChar(0xff);     
 1942              		.loc 4 62 0
 1943 0140 FF20     		movs	r0, #255
 1944 0142 FFF7FEFF 		bl	UART_TFT_PutChar
  63:NextionLCD_PlotLiveData.h **** }
 1945              		.loc 4 63 0
 1946 0146 2037     		adds	r7, r7, #32
 1947              		.cfi_def_cfa_offset 16
 1948 0148 BD46     		mov	sp, r7
 1949              		.cfi_def_cfa_register 13
 1950              		@ sp needed
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 49


 1951 014a B0BD     		pop	{r4, r5, r7, pc}
 1952              	.L91:
 1953 014c AFF30080 		.align	3
 1954              	.L90:
 1955 0150 00000000 		.word	0
 1956 0154 00C07740 		.word	1081589760
 1957 0158 0000F03F 		.word	1072693248
 1958 015c 00000000 		.word	NumberOfMeasurements
 1959 0160 00805140 		.word	1079083008
 1960 0164 00000000 		.word	Lifetime_max
 1961 0168 00003443 		.word	1127481344
 1962 016c 00007042 		.word	1114636288
 1963 0170 C4000000 		.word	.LC12
 1964 0174 CC000000 		.word	.LC13
 1965              		.cfi_endproc
 1966              	.LFE79:
 1967              		.size	PointToLiveDataAxes, .-PointToLiveDataAxes
 1968              		.section	.rodata
 1969              		.align	2
 1970              	.LC14:
 1971 00d0 47524545 		.ascii	"GREEN\000"
 1971      4E00
 1972              		.section	.text.PointToScaledDataAxes,"ax",%progbits
 1973              		.align	2
 1974              		.global	PointToScaledDataAxes
 1975              		.thumb
 1976              		.thumb_func
 1977              		.type	PointToScaledDataAxes, %function
 1978              	PointToScaledDataAxes:
 1979              	.LFB80:
 1980              		.file 5 "NextionLCD_PlotScaledData.h"
   1:NextionLCD_PlotScaledData.h **** /* ========================================
   2:NextionLCD_PlotScaledData.h ****  *
   3:NextionLCD_PlotScaledData.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:NextionLCD_PlotScaledData.h ****  * All Rights Reserved
   5:NextionLCD_PlotScaledData.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:NextionLCD_PlotScaledData.h ****  *
   7:NextionLCD_PlotScaledData.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:NextionLCD_PlotScaledData.h ****  * WHICH IS THE PROPERTY OF your company.
   9:NextionLCD_PlotScaledData.h ****  *
  10:NextionLCD_PlotScaledData.h ****  * ========================================
  11:NextionLCD_PlotScaledData.h **** */
  12:NextionLCD_PlotScaledData.h **** #include <project.h>
  13:NextionLCD_PlotScaledData.h **** #include <math.h>
  14:NextionLCD_PlotScaledData.h **** #include <stdlib.h>
  15:NextionLCD_PlotScaledData.h **** 
  16:NextionLCD_PlotScaledData.h **** //
  17:NextionLCD_PlotScaledData.h **** // Achtung!!! #ifndef #define #endif-Konstruktion zur Vermeidung von doppelten Definitione
  18:NextionLCD_PlotScaledData.h **** //
  19:NextionLCD_PlotScaledData.h **** #ifndef NextionLCD_Communication                // Funktionen für Kommunikation mit dem LCD-Displa
  20:NextionLCD_PlotScaledData.h **** #define NextionLCD_Communication                
  21:NextionLCD_PlotScaledData.h **** #endif 
  22:NextionLCD_PlotScaledData.h **** 
  23:NextionLCD_PlotScaledData.h **** //#ifndef Measurement_Setup
  24:NextionLCD_PlotScaledData.h **** //#define Measurement_Setup
  25:NextionLCD_PlotScaledData.h **** //#endif
  26:NextionLCD_PlotScaledData.h **** 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 50


  27:NextionLCD_PlotScaledData.h **** #include "NextionLCD_PlotParameters.h"
  28:NextionLCD_PlotScaledData.h **** 
  29:NextionLCD_PlotScaledData.h **** //
  30:NextionLCD_PlotScaledData.h **** // Messpunkt in DataLive einzeichnen
  31:NextionLCD_PlotScaledData.h **** //
  32:NextionLCD_PlotScaledData.h **** void PointToScaledDataAxes (float x, float y)
  33:NextionLCD_PlotScaledData.h **** {
 1981              		.loc 5 33 0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 32
 1984              		@ frame_needed = 1, uses_anonymous_args = 0
 1985 0000 80B5     		push	{r7, lr}
 1986              		.cfi_def_cfa_offset 8
 1987              		.cfi_offset 7, -8
 1988              		.cfi_offset 14, -4
 1989 0002 88B0     		sub	sp, sp, #32
 1990              		.cfi_def_cfa_offset 40
 1991 0004 00AF     		add	r7, sp, #0
 1992              		.cfi_def_cfa_register 7
 1993 0006 7860     		str	r0, [r7, #4]	@ float
 1994 0008 3960     		str	r1, [r7]	@ float
  34:NextionLCD_PlotScaledData.h ****     // Hilfsvariable mit 20 Zeichen
  35:NextionLCD_PlotScaledData.h ****     char num_str[20];
  36:NextionLCD_PlotScaledData.h ****     
  37:NextionLCD_PlotScaledData.h ****     // Umskalieren des Wertes, sodass er in Zeichenfläche liegt
  38:NextionLCD_PlotScaledData.h ****     x = Nextion_plot_ScaledData_x+Nextion_plot_ScaledData_w*(x/(1.0*NumberOfBins));         // Plot
 1995              		.loc 5 38 0
 1996 000a 7868     		ldr	r0, [r7, #4]	@ float
 1997 000c FFF7FEFF 		bl	__aeabi_f2d
 1998 0010 0246     		mov	r2, r0
 1999 0012 0B46     		mov	r3, r1
 2000 0014 1046     		mov	r0, r2
 2001 0016 1946     		mov	r1, r3
 2002 0018 4FF00002 		mov	r2, #0
 2003 001c 4A4B     		ldr	r3, .L93+8
 2004 001e FFF7FEFF 		bl	__aeabi_ddiv
 2005 0022 0246     		mov	r2, r0
 2006 0024 0B46     		mov	r3, r1
 2007 0026 1046     		mov	r0, r2
 2008 0028 1946     		mov	r1, r3
 2009 002a 45A3     		adr	r3, .L93
 2010 002c D3E90023 		ldrd	r2, [r3]
 2011 0030 FFF7FEFF 		bl	__aeabi_dmul
 2012 0034 0246     		mov	r2, r0
 2013 0036 0B46     		mov	r3, r1
 2014 0038 1046     		mov	r0, r2
 2015 003a 1946     		mov	r1, r3
 2016 003c 4FF00002 		mov	r2, #0
 2017 0040 424B     		ldr	r3, .L93+12
 2018 0042 FFF7FEFF 		bl	__aeabi_dadd
 2019 0046 0246     		mov	r2, r0
 2020 0048 0B46     		mov	r3, r1
 2021 004a 1046     		mov	r0, r2
 2022 004c 1946     		mov	r1, r3
 2023 004e FFF7FEFF 		bl	__aeabi_d2f
 2024 0052 0346     		mov	r3, r0
 2025 0054 7B60     		str	r3, [r7, #4]	@ float
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 51


  39:NextionLCD_PlotScaledData.h ****     y = Nextion_plot_ScaledData_y+Nextion_plot_ScaledData_h*(1-(1.0*y/100));                // Plot
 2026              		.loc 5 39 0
 2027 0056 3868     		ldr	r0, [r7]	@ float
 2028 0058 FFF7FEFF 		bl	__aeabi_f2d
 2029 005c 0246     		mov	r2, r0
 2030 005e 0B46     		mov	r3, r1
 2031 0060 1046     		mov	r0, r2
 2032 0062 1946     		mov	r1, r3
 2033 0064 4FF00002 		mov	r2, #0
 2034 0068 394B     		ldr	r3, .L93+16
 2035 006a FFF7FEFF 		bl	__aeabi_ddiv
 2036 006e 0246     		mov	r2, r0
 2037 0070 0B46     		mov	r3, r1
 2038 0072 4FF00000 		mov	r0, #0
 2039 0076 3749     		ldr	r1, .L93+20
 2040 0078 FFF7FEFF 		bl	__aeabi_dsub
 2041 007c 0246     		mov	r2, r0
 2042 007e 0B46     		mov	r3, r1
 2043 0080 1046     		mov	r0, r2
 2044 0082 1946     		mov	r1, r3
 2045 0084 4FF00002 		mov	r2, #0
 2046 0088 334B     		ldr	r3, .L93+24
 2047 008a FFF7FEFF 		bl	__aeabi_dmul
 2048 008e 0246     		mov	r2, r0
 2049 0090 0B46     		mov	r3, r1
 2050 0092 1046     		mov	r0, r2
 2051 0094 1946     		mov	r1, r3
 2052 0096 4FF00002 		mov	r2, #0
 2053 009a 304B     		ldr	r3, .L93+28
 2054 009c FFF7FEFF 		bl	__aeabi_dadd
 2055 00a0 0246     		mov	r2, r0
 2056 00a2 0B46     		mov	r3, r1
 2057 00a4 1046     		mov	r0, r2
 2058 00a6 1946     		mov	r1, r3
 2059 00a8 FFF7FEFF 		bl	__aeabi_d2f
 2060 00ac 0346     		mov	r3, r0
 2061 00ae 3B60     		str	r3, [r7]	@ float
  40:NextionLCD_PlotScaledData.h ****     
  41:NextionLCD_PlotScaledData.h ****     // Zielstring "cir x-Koordinate,y-Koordinate,Radius,Farbe"
  42:NextionLCD_PlotScaledData.h ****     UART_TFT_PutString("cirs ");
 2062              		.loc 5 42 0
 2063 00b0 2B48     		ldr	r0, .L93+32
 2064 00b2 FFF7FEFF 		bl	UART_TFT_PutString
  43:NextionLCD_PlotScaledData.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
  44:NextionLCD_PlotScaledData.h ****     itoa(x, num_str, 10);
 2065              		.loc 5 44 0
 2066 00b6 7868     		ldr	r0, [r7, #4]	@ float
 2067 00b8 FFF7FEFF 		bl	__aeabi_f2iz
 2068 00bc 0246     		mov	r2, r0
 2069 00be 07F10C03 		add	r3, r7, #12
 2070 00c2 1046     		mov	r0, r2
 2071 00c4 1946     		mov	r1, r3
 2072 00c6 0A22     		movs	r2, #10
 2073 00c8 FFF7FEFF 		bl	itoa
  45:NextionLCD_PlotScaledData.h ****     UART_TFT_PutString(num_str);
 2074              		.loc 5 45 0
 2075 00cc 07F10C03 		add	r3, r7, #12
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 52


 2076 00d0 1846     		mov	r0, r3
 2077 00d2 FFF7FEFF 		bl	UART_TFT_PutString
  46:NextionLCD_PlotScaledData.h ****     UART_TFT_PutChar(',');
 2078              		.loc 5 46 0
 2079 00d6 2C20     		movs	r0, #44
 2080 00d8 FFF7FEFF 		bl	UART_TFT_PutChar
  47:NextionLCD_PlotScaledData.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
  48:NextionLCD_PlotScaledData.h ****     itoa((int)y, num_str, 10);
 2081              		.loc 5 48 0
 2082 00dc 3868     		ldr	r0, [r7]	@ float
 2083 00de FFF7FEFF 		bl	__aeabi_f2iz
 2084 00e2 0246     		mov	r2, r0
 2085 00e4 07F10C03 		add	r3, r7, #12
 2086 00e8 1046     		mov	r0, r2
 2087 00ea 1946     		mov	r1, r3
 2088 00ec 0A22     		movs	r2, #10
 2089 00ee FFF7FEFF 		bl	itoa
  49:NextionLCD_PlotScaledData.h ****     UART_TFT_PutString(num_str);
 2090              		.loc 5 49 0
 2091 00f2 07F10C03 		add	r3, r7, #12
 2092 00f6 1846     		mov	r0, r3
 2093 00f8 FFF7FEFF 		bl	UART_TFT_PutString
  50:NextionLCD_PlotScaledData.h ****     UART_TFT_PutChar(',');
 2094              		.loc 5 50 0
 2095 00fc 2C20     		movs	r0, #44
 2096 00fe FFF7FEFF 		bl	UART_TFT_PutChar
  51:NextionLCD_PlotScaledData.h ****     // Mark Size übertragen
  52:NextionLCD_PlotScaledData.h ****     itoa(Settings_MarkSize, num_str, 10);
 2097              		.loc 5 52 0
 2098 0102 07F10C03 		add	r3, r7, #12
 2099 0106 0320     		movs	r0, #3
 2100 0108 1946     		mov	r1, r3
 2101 010a 0A22     		movs	r2, #10
 2102 010c FFF7FEFF 		bl	itoa
  53:NextionLCD_PlotScaledData.h ****     UART_TFT_PutString(num_str);
 2103              		.loc 5 53 0
 2104 0110 07F10C03 		add	r3, r7, #12
 2105 0114 1846     		mov	r0, r3
 2106 0116 FFF7FEFF 		bl	UART_TFT_PutString
  54:NextionLCD_PlotScaledData.h ****     UART_TFT_PutChar(',');
 2107              		.loc 5 54 0
 2108 011a 2C20     		movs	r0, #44
 2109 011c FFF7FEFF 		bl	UART_TFT_PutChar
  55:NextionLCD_PlotScaledData.h ****     // Farbe übertragen
  56:NextionLCD_PlotScaledData.h ****     UART_TFT_PutString("GREEN");
 2110              		.loc 5 56 0
 2111 0120 1048     		ldr	r0, .L93+36
 2112 0122 FFF7FEFF 		bl	UART_TFT_PutString
  57:NextionLCD_PlotScaledData.h ****     // Ende der Eingabe markieren
  58:NextionLCD_PlotScaledData.h ****     UART_TFT_PutChar(0xff);
 2113              		.loc 5 58 0
 2114 0126 FF20     		movs	r0, #255
 2115 0128 FFF7FEFF 		bl	UART_TFT_PutChar
  59:NextionLCD_PlotScaledData.h ****     UART_TFT_PutChar(0xff);
 2116              		.loc 5 59 0
 2117 012c FF20     		movs	r0, #255
 2118 012e FFF7FEFF 		bl	UART_TFT_PutChar
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 53


  60:NextionLCD_PlotScaledData.h ****     UART_TFT_PutChar(0xff);            
 2119              		.loc 5 60 0
 2120 0132 FF20     		movs	r0, #255
 2121 0134 FFF7FEFF 		bl	UART_TFT_PutChar
  61:NextionLCD_PlotScaledData.h **** }
 2122              		.loc 5 61 0
 2123 0138 2037     		adds	r7, r7, #32
 2124              		.cfi_def_cfa_offset 8
 2125 013a BD46     		mov	sp, r7
 2126              		.cfi_def_cfa_register 13
 2127              		@ sp needed
 2128 013c 80BD     		pop	{r7, pc}
 2129              	.L94:
 2130 013e 00BF     		.align	3
 2131              	.L93:
 2132 0140 00000000 		.word	0
 2133 0144 00C07740 		.word	1081589760
 2134 0148 00003E40 		.word	1077805056
 2135 014c 00805140 		.word	1079083008
 2136 0150 00005940 		.word	1079574528
 2137 0154 0000F03F 		.word	1072693248
 2138 0158 00806640 		.word	1080459264
 2139 015c 00004E40 		.word	1078853632
 2140 0160 C4000000 		.word	.LC12
 2141 0164 D0000000 		.word	.LC14
 2142              		.cfi_endproc
 2143              	.LFE80:
 2144              		.size	PointToScaledDataAxes, .-PointToScaledDataAxes
 2145              		.section	.rodata
 2146 00d6 0000     		.align	2
 2147              	.LC15:
 2148 00d8 61646420 		.ascii	"add 2,0,\000"
 2148      322C302C 
 2148      00
 2149 00e1 000000   		.align	2
 2150              	.LC16:
 2151 00e4 61646420 		.ascii	"add 2,1,\000"
 2151      322C312C 
 2151      00
 2152 00ed 000000   		.align	2
 2153              	.LC17:
 2154 00f0 61646420 		.ascii	"add 2,2,\000"
 2154      322C322C 
 2154      00
 2155              		.section	.text.PointsToSettingsAxes,"ax",%progbits
 2156              		.align	2
 2157              		.global	PointsToSettingsAxes
 2158              		.thumb
 2159              		.thumb_func
 2160              		.type	PointsToSettingsAxes, %function
 2161              	PointsToSettingsAxes:
 2162              	.LFB81:
 2163              		.file 6 "NextionLCD_PlotSettings.h"
   1:NextionLCD_PlotSettings.h **** /* ========================================
   2:NextionLCD_PlotSettings.h ****  *
   3:NextionLCD_PlotSettings.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:NextionLCD_PlotSettings.h ****  * All Rights Reserved
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 54


   5:NextionLCD_PlotSettings.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:NextionLCD_PlotSettings.h ****  *
   7:NextionLCD_PlotSettings.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:NextionLCD_PlotSettings.h ****  * WHICH IS THE PROPERTY OF your company.
   9:NextionLCD_PlotSettings.h ****  *
  10:NextionLCD_PlotSettings.h ****  * ========================================
  11:NextionLCD_PlotSettings.h **** */
  12:NextionLCD_PlotSettings.h **** #include <project.h>
  13:NextionLCD_PlotSettings.h **** #include <math.h>
  14:NextionLCD_PlotSettings.h **** #include <stdlib.h>                             // enthält u.a. itoa
  15:NextionLCD_PlotSettings.h **** 
  16:NextionLCD_PlotSettings.h **** //
  17:NextionLCD_PlotSettings.h **** // Achtung!!! #ifndef #define #endif-Konstruktion zur Vermeidung von doppelten Definitione
  18:NextionLCD_PlotSettings.h **** //
  19:NextionLCD_PlotSettings.h **** #ifndef NextionLCD_Communication                // Funktionen für Kommunikation mit dem LCD-Displa
  20:NextionLCD_PlotSettings.h **** #define NextionLCD_Communication                
  21:NextionLCD_PlotSettings.h **** #endif 
  22:NextionLCD_PlotSettings.h **** 
  23:NextionLCD_PlotSettings.h **** //#ifndef Measurement_Setup
  24:NextionLCD_PlotSettings.h **** //#define Measurement_Setup
  25:NextionLCD_PlotSettings.h **** //#endif
  26:NextionLCD_PlotSettings.h **** 
  27:NextionLCD_PlotSettings.h **** #include "NextionLCD_PlotParameters.h"
  28:NextionLCD_PlotSettings.h **** 
  29:NextionLCD_PlotSettings.h **** 
  30:NextionLCD_PlotSettings.h **** //
  31:NextionLCD_PlotSettings.h **** // Messpunkt in "Settings" einzeichnen
  32:NextionLCD_PlotSettings.h **** //
  33:NextionLCD_PlotSettings.h **** void PointsToSettingsAxes(float presence_ths, float ref_ths, float intensity)
  34:NextionLCD_PlotSettings.h **** {
 2164              		.loc 6 34 0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 40
 2167              		@ frame_needed = 1, uses_anonymous_args = 0
 2168 0000 80B5     		push	{r7, lr}
 2169              		.cfi_def_cfa_offset 8
 2170              		.cfi_offset 7, -8
 2171              		.cfi_offset 14, -4
 2172 0002 8AB0     		sub	sp, sp, #40
 2173              		.cfi_def_cfa_offset 48
 2174 0004 00AF     		add	r7, sp, #0
 2175              		.cfi_def_cfa_register 7
 2176 0006 F860     		str	r0, [r7, #12]	@ float
 2177 0008 B960     		str	r1, [r7, #8]	@ float
 2178 000a 7A60     		str	r2, [r7, #4]	@ float
  35:NextionLCD_PlotSettings.h ****     // Hilfsvariable mit 20 Zeichen
  36:NextionLCD_PlotSettings.h ****     char num_str[20];
  37:NextionLCD_PlotSettings.h ****     
  38:NextionLCD_PlotSettings.h ****     // Umskalieren der Werte, sodass sie in Zeichenfläche liegen, maximaler erlaubter Plotwert = 2
  39:NextionLCD_PlotSettings.h **** //    presence_ths = 255.0*(1.0*presence_ths/Nextion_plot_Settings_ymax);
  40:NextionLCD_PlotSettings.h **** //    ref_ths = 255.0*(1.0*ref_ths/Nextion_plot_Settings_ymax);
  41:NextionLCD_PlotSettings.h **** //    intensity = 255.0*(1.0*intensity/Nextion_plot_Settings_ymax);
  42:NextionLCD_PlotSettings.h **** 
  43:NextionLCD_PlotSettings.h ****     // bescheuerte Skalierung!!!! Höhe im Nextion Editor is massgeblich
  44:NextionLCD_PlotSettings.h ****     presence_ths = 1.0*Nextion_plot_Settings_h*(1.0*presence_ths/Nextion_plot_Settings_ymax);
 2179              		.loc 6 44 0
 2180 000c F868     		ldr	r0, [r7, #12]	@ float
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 55


 2181 000e FFF7FEFF 		bl	__aeabi_f2d
 2182 0012 0246     		mov	r2, r0
 2183 0014 0B46     		mov	r3, r1
 2184 0016 1046     		mov	r0, r2
 2185 0018 1946     		mov	r1, r3
 2186 001a 53A3     		adr	r3, .L96
 2187 001c D3E90023 		ldrd	r2, [r3]
 2188 0020 FFF7FEFF 		bl	__aeabi_ddiv
 2189 0024 0246     		mov	r2, r0
 2190 0026 0B46     		mov	r3, r1
 2191 0028 1046     		mov	r0, r2
 2192 002a 1946     		mov	r1, r3
 2193 002c 4FF00002 		mov	r2, #0
 2194 0030 4F4B     		ldr	r3, .L96+8
 2195 0032 FFF7FEFF 		bl	__aeabi_dmul
 2196 0036 0246     		mov	r2, r0
 2197 0038 0B46     		mov	r3, r1
 2198 003a 1046     		mov	r0, r2
 2199 003c 1946     		mov	r1, r3
 2200 003e FFF7FEFF 		bl	__aeabi_d2f
 2201 0042 0346     		mov	r3, r0
 2202 0044 FB60     		str	r3, [r7, #12]	@ float
  45:NextionLCD_PlotSettings.h ****     ref_ths = 1.0*Nextion_plot_Settings_h*(1.0*ref_ths/Nextion_plot_Settings_ymax);
 2203              		.loc 6 45 0
 2204 0046 B868     		ldr	r0, [r7, #8]	@ float
 2205 0048 FFF7FEFF 		bl	__aeabi_f2d
 2206 004c 0246     		mov	r2, r0
 2207 004e 0B46     		mov	r3, r1
 2208 0050 1046     		mov	r0, r2
 2209 0052 1946     		mov	r1, r3
 2210 0054 44A3     		adr	r3, .L96
 2211 0056 D3E90023 		ldrd	r2, [r3]
 2212 005a FFF7FEFF 		bl	__aeabi_ddiv
 2213 005e 0246     		mov	r2, r0
 2214 0060 0B46     		mov	r3, r1
 2215 0062 1046     		mov	r0, r2
 2216 0064 1946     		mov	r1, r3
 2217 0066 4FF00002 		mov	r2, #0
 2218 006a 414B     		ldr	r3, .L96+8
 2219 006c FFF7FEFF 		bl	__aeabi_dmul
 2220 0070 0246     		mov	r2, r0
 2221 0072 0B46     		mov	r3, r1
 2222 0074 1046     		mov	r0, r2
 2223 0076 1946     		mov	r1, r3
 2224 0078 FFF7FEFF 		bl	__aeabi_d2f
 2225 007c 0346     		mov	r3, r0
 2226 007e BB60     		str	r3, [r7, #8]	@ float
  46:NextionLCD_PlotSettings.h ****     intensity = 1.0*Nextion_plot_Settings_h*(1.0*intensity/Nextion_plot_Settings_ymax);
 2227              		.loc 6 46 0
 2228 0080 7868     		ldr	r0, [r7, #4]	@ float
 2229 0082 FFF7FEFF 		bl	__aeabi_f2d
 2230 0086 0246     		mov	r2, r0
 2231 0088 0B46     		mov	r3, r1
 2232 008a 1046     		mov	r0, r2
 2233 008c 1946     		mov	r1, r3
 2234 008e 36A3     		adr	r3, .L96
 2235 0090 D3E90023 		ldrd	r2, [r3]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 56


 2236 0094 FFF7FEFF 		bl	__aeabi_ddiv
 2237 0098 0246     		mov	r2, r0
 2238 009a 0B46     		mov	r3, r1
 2239 009c 1046     		mov	r0, r2
 2240 009e 1946     		mov	r1, r3
 2241 00a0 4FF00002 		mov	r2, #0
 2242 00a4 324B     		ldr	r3, .L96+8
 2243 00a6 FFF7FEFF 		bl	__aeabi_dmul
 2244 00aa 0246     		mov	r2, r0
 2245 00ac 0B46     		mov	r3, r1
 2246 00ae 1046     		mov	r0, r2
 2247 00b0 1946     		mov	r1, r3
 2248 00b2 FFF7FEFF 		bl	__aeabi_d2f
 2249 00b6 0346     		mov	r3, r0
 2250 00b8 7B60     		str	r3, [r7, #4]	@ float
  47:NextionLCD_PlotSettings.h ****     
  48:NextionLCD_PlotSettings.h ****     // -> setze jeweiligen Wert in Kanäle 0, 1 und 2 der Zeichenfläche mit ID 2
  49:NextionLCD_PlotSettings.h ****     
  50:NextionLCD_PlotSettings.h ****     // Wert für Detektionsgrenze -> darunter wird die Zeitmessung gestoppt
  51:NextionLCD_PlotSettings.h ****     UART_TFT_PutString("add 2,0,");
 2251              		.loc 6 51 0
 2252 00ba 2E48     		ldr	r0, .L96+12
 2253 00bc FFF7FEFF 		bl	UART_TFT_PutString
  52:NextionLCD_PlotSettings.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
  53:NextionLCD_PlotSettings.h ****     itoa((int)presence_ths, num_str, 10);
 2254              		.loc 6 53 0
 2255 00c0 F868     		ldr	r0, [r7, #12]	@ float
 2256 00c2 FFF7FEFF 		bl	__aeabi_f2iz
 2257 00c6 0246     		mov	r2, r0
 2258 00c8 07F11403 		add	r3, r7, #20
 2259 00cc 1046     		mov	r0, r2
 2260 00ce 1946     		mov	r1, r3
 2261 00d0 0A22     		movs	r2, #10
 2262 00d2 FFF7FEFF 		bl	itoa
  54:NextionLCD_PlotSettings.h ****     UART_TFT_PutString(num_str);
 2263              		.loc 6 54 0
 2264 00d6 07F11403 		add	r3, r7, #20
 2265 00da 1846     		mov	r0, r3
 2266 00dc FFF7FEFF 		bl	UART_TFT_PutString
  55:NextionLCD_PlotSettings.h ****     // Ende der Eingabe markieren
  56:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff);
 2267              		.loc 6 56 0
 2268 00e0 FF20     		movs	r0, #255
 2269 00e2 FFF7FEFF 		bl	UART_TFT_PutChar
  57:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff);
 2270              		.loc 6 57 0
 2271 00e6 FF20     		movs	r0, #255
 2272 00e8 FFF7FEFF 		bl	UART_TFT_PutChar
  58:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff); 
 2273              		.loc 6 58 0
 2274 00ec FF20     		movs	r0, #255
 2275 00ee FFF7FEFF 		bl	UART_TFT_PutChar
  59:NextionLCD_PlotSettings.h ****     
  60:NextionLCD_PlotSettings.h ****     // Wert für Autokalibrierung -> wenn überschritten, ist das die Sampling Position
  61:NextionLCD_PlotSettings.h ****     UART_TFT_PutString("add 2,1,");
 2276              		.loc 6 61 0
 2277 00f2 2148     		ldr	r0, .L96+16
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 57


 2278 00f4 FFF7FEFF 		bl	UART_TFT_PutString
  62:NextionLCD_PlotSettings.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
  63:NextionLCD_PlotSettings.h ****     itoa((int)ref_ths, num_str, 10);
 2279              		.loc 6 63 0
 2280 00f8 B868     		ldr	r0, [r7, #8]	@ float
 2281 00fa FFF7FEFF 		bl	__aeabi_f2iz
 2282 00fe 0246     		mov	r2, r0
 2283 0100 07F11403 		add	r3, r7, #20
 2284 0104 1046     		mov	r0, r2
 2285 0106 1946     		mov	r1, r3
 2286 0108 0A22     		movs	r2, #10
 2287 010a FFF7FEFF 		bl	itoa
  64:NextionLCD_PlotSettings.h ****     UART_TFT_PutString(num_str);
 2288              		.loc 6 64 0
 2289 010e 07F11403 		add	r3, r7, #20
 2290 0112 1846     		mov	r0, r3
 2291 0114 FFF7FEFF 		bl	UART_TFT_PutString
  65:NextionLCD_PlotSettings.h ****     // Ende der Eingabe markieren
  66:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff);
 2292              		.loc 6 66 0
 2293 0118 FF20     		movs	r0, #255
 2294 011a FFF7FEFF 		bl	UART_TFT_PutChar
  67:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff);
 2295              		.loc 6 67 0
 2296 011e FF20     		movs	r0, #255
 2297 0120 FFF7FEFF 		bl	UART_TFT_PutChar
  68:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff); 
 2298              		.loc 6 68 0
 2299 0124 FF20     		movs	r0, #255
 2300 0126 FFF7FEFF 		bl	UART_TFT_PutChar
  69:NextionLCD_PlotSettings.h ****     
  70:NextionLCD_PlotSettings.h ****     // Momentaner Wert vom ADC
  71:NextionLCD_PlotSettings.h ****     UART_TFT_PutString("add 2,2,");
 2301              		.loc 6 71 0
 2302 012a 1448     		ldr	r0, .L96+20
 2303 012c FFF7FEFF 		bl	UART_TFT_PutString
  72:NextionLCD_PlotSettings.h ****     // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
  73:NextionLCD_PlotSettings.h ****     itoa((int)intensity, num_str, 10);
 2304              		.loc 6 73 0
 2305 0130 7868     		ldr	r0, [r7, #4]	@ float
 2306 0132 FFF7FEFF 		bl	__aeabi_f2iz
 2307 0136 0246     		mov	r2, r0
 2308 0138 07F11403 		add	r3, r7, #20
 2309 013c 1046     		mov	r0, r2
 2310 013e 1946     		mov	r1, r3
 2311 0140 0A22     		movs	r2, #10
 2312 0142 FFF7FEFF 		bl	itoa
  74:NextionLCD_PlotSettings.h ****     UART_TFT_PutString(num_str);
 2313              		.loc 6 74 0
 2314 0146 07F11403 		add	r3, r7, #20
 2315 014a 1846     		mov	r0, r3
 2316 014c FFF7FEFF 		bl	UART_TFT_PutString
  75:NextionLCD_PlotSettings.h ****     // Ende der Eingabe markieren
  76:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff);
 2317              		.loc 6 76 0
 2318 0150 FF20     		movs	r0, #255
 2319 0152 FFF7FEFF 		bl	UART_TFT_PutChar
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 58


  77:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff);
 2320              		.loc 6 77 0
 2321 0156 FF20     		movs	r0, #255
 2322 0158 FFF7FEFF 		bl	UART_TFT_PutChar
  78:NextionLCD_PlotSettings.h ****     UART_TFT_PutChar(0xff); 
 2323              		.loc 6 78 0
 2324 015c FF20     		movs	r0, #255
 2325 015e FFF7FEFF 		bl	UART_TFT_PutChar
  79:NextionLCD_PlotSettings.h ****     
  80:NextionLCD_PlotSettings.h **** //    // Maximal möglicher Wert vom ADC
  81:NextionLCD_PlotSettings.h **** //    UART_TFT_PutString("add 2,3,");
  82:NextionLCD_PlotSettings.h **** //    // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
  83:NextionLCD_PlotSettings.h **** //    itoa((int)Nextion_plot_Settings_ymax, num_str, 10);
  84:NextionLCD_PlotSettings.h **** //    UART_TFT_PutString(num_str);
  85:NextionLCD_PlotSettings.h **** //    // Ende der Eingabe markieren
  86:NextionLCD_PlotSettings.h **** //    UART_TFT_PutChar(0xff);
  87:NextionLCD_PlotSettings.h **** //    UART_TFT_PutChar(0xff);
  88:NextionLCD_PlotSettings.h **** //    UART_TFT_PutChar(0xff);     
  89:NextionLCD_PlotSettings.h **** }
 2326              		.loc 6 89 0
 2327 0162 2837     		adds	r7, r7, #40
 2328              		.cfi_def_cfa_offset 8
 2329 0164 BD46     		mov	sp, r7
 2330              		.cfi_def_cfa_register 13
 2331              		@ sp needed
 2332 0166 80BD     		pop	{r7, pc}
 2333              	.L97:
 2334              		.align	3
 2335              	.L96:
 2336 0168 00000000 		.word	0
 2337 016c 00FEAF40 		.word	1085275648
 2338 0170 00806640 		.word	1080459264
 2339 0174 D8000000 		.word	.LC15
 2340 0178 E4000000 		.word	.LC16
 2341 017c F0000000 		.word	.LC17
 2342              		.cfi_endproc
 2343              	.LFE81:
 2344              		.size	PointsToSettingsAxes, .-PointsToSettingsAxes
 2345              		.section	.text.AutoCalibration,"ax",%progbits
 2346              		.align	2
 2347              		.global	AutoCalibration
 2348              		.thumb
 2349              		.thumb_func
 2350              		.type	AutoCalibration, %function
 2351              	AutoCalibration:
 2352              	.LFB82:
 2353              		.file 7 "Photodiode_Data.h"
   1:Photodiode_Data.h **** /* ========================================
   2:Photodiode_Data.h ****  *
   3:Photodiode_Data.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:Photodiode_Data.h ****  * All Rights Reserved
   5:Photodiode_Data.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:Photodiode_Data.h ****  *
   7:Photodiode_Data.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:Photodiode_Data.h ****  * WHICH IS THE PROPERTY OF your company.
   9:Photodiode_Data.h ****  *
  10:Photodiode_Data.h ****  * ========================================
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 59


  11:Photodiode_Data.h **** */
  12:Photodiode_Data.h **** 
  13:Photodiode_Data.h **** #include <project.h>
  14:Photodiode_Data.h **** #include <math.h>                   // Mathe-Modul -> erlaubt unter anderem "NAN"-Werte
  15:Photodiode_Data.h **** 
  16:Photodiode_Data.h **** //
  17:Photodiode_Data.h **** // Selbstständige Suche der Referenzposition mit Intensittät oberhalb Schwellwert
  18:Photodiode_Data.h **** //
  19:Photodiode_Data.h **** void AutoCalibration (void)
  20:Photodiode_Data.h **** {
 2354              		.loc 7 20 0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 0
 2357              		@ frame_needed = 1, uses_anonymous_args = 0
 2358              		@ link register save eliminated.
 2359 0000 80B4     		push	{r7}
 2360              		.cfi_def_cfa_offset 4
 2361              		.cfi_offset 7, -4
 2362 0002 00AF     		add	r7, sp, #0
 2363              		.cfi_def_cfa_register 7
  21:Photodiode_Data.h **** }
 2364              		.loc 7 21 0
 2365 0004 BD46     		mov	sp, r7
 2366              		.cfi_def_cfa_register 13
 2367              		@ sp needed
 2368 0006 5DF8047B 		ldr	r7, [sp], #4
 2369              		.cfi_restore 7
 2370              		.cfi_def_cfa_offset 0
 2371 000a 7047     		bx	lr
 2372              		.cfi_endproc
 2373              	.LFE82:
 2374              		.size	AutoCalibration, .-AutoCalibration
 2375              		.section	.text.Get_Single_Lamella_Lifetime,"ax",%progbits
 2376              		.align	2
 2377              		.global	Get_Single_Lamella_Lifetime
 2378              		.thumb
 2379              		.thumb_func
 2380              		.type	Get_Single_Lamella_Lifetime, %function
 2381              	Get_Single_Lamella_Lifetime:
 2382              	.LFB83:
  22:Photodiode_Data.h **** 
  23:Photodiode_Data.h **** // 
  24:Photodiode_Data.h **** // Aufnahme eines Messwertes -> Fahren von Home-Position in Sampling Position und
  25:Photodiode_Data.h **** // wieder zurück in Home-Position
  26:Photodiode_Data.h **** //
  27:Photodiode_Data.h **** long Get_Single_Lamella_Lifetime (void)
  28:Photodiode_Data.h **** {
 2383              		.loc 7 28 0
 2384              		.cfi_startproc
 2385              		@ args = 0, pretend = 0, frame = 8
 2386              		@ frame_needed = 1, uses_anonymous_args = 0
 2387 0000 80B5     		push	{r7, lr}
 2388              		.cfi_def_cfa_offset 8
 2389              		.cfi_offset 7, -8
 2390              		.cfi_offset 14, -4
 2391 0002 82B0     		sub	sp, sp, #8
 2392              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 60


 2393 0004 00AF     		add	r7, sp, #0
 2394              		.cfi_def_cfa_register 7
  29:Photodiode_Data.h ****     float LifeTime = NAN;            // Initialisierung des Rückgabewerts als "Not A Number"
 2395              		.loc 7 29 0
 2396 0006 054B     		ldr	r3, .L101
 2397 0008 7B60     		str	r3, [r7, #4]	@ float
  30:Photodiode_Data.h ****     
  31:Photodiode_Data.h ****     return LifeTime;
 2398              		.loc 7 31 0
 2399 000a 7868     		ldr	r0, [r7, #4]	@ float
 2400 000c FFF7FEFF 		bl	__aeabi_f2iz
 2401 0010 0346     		mov	r3, r0
  32:Photodiode_Data.h **** }
 2402              		.loc 7 32 0
 2403 0012 1846     		mov	r0, r3
 2404 0014 0837     		adds	r7, r7, #8
 2405              		.cfi_def_cfa_offset 8
 2406 0016 BD46     		mov	sp, r7
 2407              		.cfi_def_cfa_register 13
 2408              		@ sp needed
 2409 0018 80BD     		pop	{r7, pc}
 2410              	.L102:
 2411 001a 00BF     		.align	2
 2412              	.L101:
 2413 001c 0000C07F 		.word	2143289344
 2414              		.cfi_endproc
 2415              	.LFE83:
 2416              		.size	Get_Single_Lamella_Lifetime, .-Get_Single_Lamella_Lifetime
 2417              		.global	__aeabi_d2iz
 2418              		.section	.text.Measurement_Init_Number,"ax",%progbits
 2419              		.align	2
 2420              		.global	Measurement_Init_Number
 2421              		.thumb
 2422              		.thumb_func
 2423              		.type	Measurement_Init_Number, %function
 2424              	Measurement_Init_Number:
 2425              	.LFB84:
 2426              		.file 8 "Measurement_Setup.h"
   1:Measurement_Setup.h **** /* ========================================
   2:Measurement_Setup.h ****  *
   3:Measurement_Setup.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:Measurement_Setup.h ****  * All Rights Reserved
   5:Measurement_Setup.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:Measurement_Setup.h ****  *
   7:Measurement_Setup.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:Measurement_Setup.h ****  * WHICH IS THE PROPERTY OF your company.
   9:Measurement_Setup.h ****  *
  10:Measurement_Setup.h ****  * ========================================
  11:Measurement_Setup.h **** */
  12:Measurement_Setup.h **** 
  13:Measurement_Setup.h **** #include <project.h>
  14:Measurement_Setup.h **** #include <math.h>
  15:Measurement_Setup.h **** 
  16:Measurement_Setup.h **** #ifndef NextionLCD_Communication
  17:Measurement_Setup.h **** #define NextionLCD_Communication
  18:Measurement_Setup.h **** #endif
  19:Measurement_Setup.h **** 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 61


  20:Measurement_Setup.h **** //
  21:Measurement_Setup.h **** // Bestimmung der Zahl der Messungen und Initialisierungen so weit möglich
  22:Measurement_Setup.h **** //
  23:Measurement_Setup.h **** void Measurement_Init_Number(void)
  24:Measurement_Setup.h **** {
 2427              		.loc 8 24 0
 2428              		.cfi_startproc
 2429              		@ args = 0, pretend = 0, frame = 8
 2430              		@ frame_needed = 1, uses_anonymous_args = 0
 2431 0000 80B5     		push	{r7, lr}
 2432              		.cfi_def_cfa_offset 8
 2433              		.cfi_offset 7, -8
 2434              		.cfi_offset 14, -4
 2435 0002 82B0     		sub	sp, sp, #8
 2436              		.cfi_def_cfa_offset 16
 2437 0004 00AF     		add	r7, sp, #0
 2438              		.cfi_def_cfa_register 7
  25:Measurement_Setup.h ****     double slider_val;
  26:Measurement_Setup.h ****     
  27:Measurement_Setup.h ****     // Momentanen Sliderwert abragen
  28:Measurement_Setup.h ****     slider_val = Nextion_GetSliderValue();
 2439              		.loc 8 28 0
 2440 0006 FFF7FEFF 		bl	Nextion_GetSliderValue
 2441 000a 0346     		mov	r3, r0
 2442 000c 1846     		mov	r0, r3
 2443 000e FFF7FEFF 		bl	__aeabi_i2d
 2444 0012 0246     		mov	r2, r0
 2445 0014 0B46     		mov	r3, r1
 2446 0016 C7E90023 		strd	r2, [r7]
  29:Measurement_Setup.h ****     // Slider-Wert auf 10 runden
  30:Measurement_Setup.h ****     slider_val = round(slider_val/10)*10;
 2447              		.loc 8 30 0
 2448 001a D7E90001 		ldrd	r0, [r7]
 2449 001e 4FF00002 		mov	r2, #0
 2450 0022 144B     		ldr	r3, .L104
 2451 0024 FFF7FEFF 		bl	__aeabi_ddiv
 2452 0028 0246     		mov	r2, r0
 2453 002a 0B46     		mov	r3, r1
 2454 002c 1046     		mov	r0, r2
 2455 002e 1946     		mov	r1, r3
 2456 0030 FFF7FEFF 		bl	round
 2457 0034 0246     		mov	r2, r0
 2458 0036 0B46     		mov	r3, r1
 2459 0038 1046     		mov	r0, r2
 2460 003a 1946     		mov	r1, r3
 2461 003c 4FF00002 		mov	r2, #0
 2462 0040 0C4B     		ldr	r3, .L104
 2463 0042 FFF7FEFF 		bl	__aeabi_dmul
 2464 0046 0246     		mov	r2, r0
 2465 0048 0B46     		mov	r3, r1
 2466 004a C7E90023 		strd	r2, [r7]
  31:Measurement_Setup.h ****     // neuen Slider-Wert in slider und Anzeigetext setzen
  32:Measurement_Setup.h ****     Nextion_SendSliderValue((int)slider_val);
 2467              		.loc 8 32 0
 2468 004e D7E90001 		ldrd	r0, [r7]
 2469 0052 FFF7FEFF 		bl	__aeabi_d2iz
 2470 0056 0346     		mov	r3, r0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 62


 2471 0058 1846     		mov	r0, r3
 2472 005a FFF7FEFF 		bl	Nextion_SendSliderValue
  33:Measurement_Setup.h ****     Nextion_SendTextNoMeas((int)slider_val);
 2473              		.loc 8 33 0
 2474 005e D7E90001 		ldrd	r0, [r7]
 2475 0062 FFF7FEFF 		bl	__aeabi_d2iz
 2476 0066 0346     		mov	r3, r0
 2477 0068 1846     		mov	r0, r3
 2478 006a FFF7FEFF 		bl	Nextion_SendTextNoMeas
  34:Measurement_Setup.h ****     
  35:Measurement_Setup.h ****     // Dimensionierung des maximalen Wertes der x-Achse in plot "LiveData"
  36:Measurement_Setup.h ****     //#define Nextion_plot_LiveData_xmax 7000  
  37:Measurement_Setup.h ****     //#define Nextion_plot_LiveData_xmax slider_val 
  38:Measurement_Setup.h **** }
 2479              		.loc 8 38 0
 2480 006e 0837     		adds	r7, r7, #8
 2481              		.cfi_def_cfa_offset 8
 2482 0070 BD46     		mov	sp, r7
 2483              		.cfi_def_cfa_register 13
 2484              		@ sp needed
 2485 0072 80BD     		pop	{r7, pc}
 2486              	.L105:
 2487              		.align	2
 2488              	.L104:
 2489 0074 00002440 		.word	1076101120
 2490              		.cfi_endproc
 2491              	.LFE84:
 2492              		.size	Measurement_Init_Number, .-Measurement_Init_Number
 2493              		.section	.text.UART_TFT_InterruptFunction,"ax",%progbits
 2494              		.align	2
 2495              		.global	UART_TFT_InterruptFunction
 2496              		.thumb
 2497              		.thumb_func
 2498              		.type	UART_TFT_InterruptFunction, %function
 2499              	UART_TFT_InterruptFunction:
 2500              	.LFB85:
 2501              		.file 9 "CY_ISR_Interrupt.h"
   1:CY_ISR_Interrupt.h **** /* ========================================
   2:CY_ISR_Interrupt.h ****  *
   3:CY_ISR_Interrupt.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:CY_ISR_Interrupt.h ****  * All Rights Reserved
   5:CY_ISR_Interrupt.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:CY_ISR_Interrupt.h ****  *
   7:CY_ISR_Interrupt.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:CY_ISR_Interrupt.h ****  * WHICH IS THE PROPERTY OF your company.
   9:CY_ISR_Interrupt.h ****  *
  10:CY_ISR_Interrupt.h ****  * ========================================
  11:CY_ISR_Interrupt.h **** */
  12:CY_ISR_Interrupt.h **** 
  13:CY_ISR_Interrupt.h **** #include <project.h>
  14:CY_ISR_Interrupt.h **** #include <math.h>
  15:CY_ISR_Interrupt.h **** #include <stdio.h>
  16:CY_ISR_Interrupt.h **** #include <stdlib.h>                                 // enthält u.a. itoa
  17:CY_ISR_Interrupt.h **** 
  18:CY_ISR_Interrupt.h **** #ifndef NextionLCD_Communication
  19:CY_ISR_Interrupt.h **** #define NextionLCD_Communication
  20:CY_ISR_Interrupt.h **** #endif
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 63


  21:CY_ISR_Interrupt.h **** 
  22:CY_ISR_Interrupt.h **** #ifndef StepperMotor_Control
  23:CY_ISR_Interrupt.h **** #define StepperMotor_Control
  24:CY_ISR_Interrupt.h **** #endif
  25:CY_ISR_Interrupt.h **** 
  26:CY_ISR_Interrupt.h **** #ifndef DataLogger
  27:CY_ISR_Interrupt.h **** #define DataLogger
  28:CY_ISR_Interrupt.h **** #endif
  29:CY_ISR_Interrupt.h **** 
  30:CY_ISR_Interrupt.h **** CY_ISR(UART_TFT_InterruptFunction)
  31:CY_ISR_Interrupt.h **** {
 2502              		.loc 9 31 0
 2503              		.cfi_startproc
 2504              		@ args = 0, pretend = 0, frame = 8
 2505              		@ frame_needed = 1, uses_anonymous_args = 0
 2506 0000 80B5     		push	{r7, lr}
 2507              		.cfi_def_cfa_offset 8
 2508              		.cfi_offset 7, -8
 2509              		.cfi_offset 14, -4
 2510 0002 82B0     		sub	sp, sp, #8
 2511              		.cfi_def_cfa_offset 16
 2512 0004 00AF     		add	r7, sp, #0
 2513              		.cfi_def_cfa_register 7
  32:CY_ISR_Interrupt.h ****     static uint8 counter = 0;                      // Laufvariable
  33:CY_ISR_Interrupt.h ****     
  34:CY_ISR_Interrupt.h ****     // letztes Byte einlesen
  35:CY_ISR_Interrupt.h ****     uint8 last_byte;
  36:CY_ISR_Interrupt.h ****     last_byte = UART_TFT_GetChar();                
 2514              		.loc 9 36 0
 2515 0006 FFF7FEFF 		bl	UART_TFT_GetChar
 2516 000a 0346     		mov	r3, r0
 2517 000c FB70     		strb	r3, [r7, #3]
  37:CY_ISR_Interrupt.h ****     
  38:CY_ISR_Interrupt.h ****     if (slider_val_sent == 0)
 2518              		.loc 9 38 0
 2519 000e 4E4B     		ldr	r3, .L122
 2520 0010 1B78     		ldrb	r3, [r3]
 2521 0012 DBB2     		uxtb	r3, r3
 2522 0014 002B     		cmp	r3, #0
 2523 0016 77D1     		bne	.L107
  39:CY_ISR_Interrupt.h ****     {        
  40:CY_ISR_Interrupt.h ****         // Fallunterscheidung bzw. Abrage der momentanen Menüseite
  41:CY_ISR_Interrupt.h ****         if (last_byte == 0x48)                              // LCD hat ein "H" gesendet; -> ASCII "
 2524              		.loc 9 41 0
 2525 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2526 001a 482B     		cmp	r3, #72
 2527 001c 02D1     		bne	.L108
  42:CY_ISR_Interrupt.h ****         {
  43:CY_ISR_Interrupt.h ****             menustate = 0;                                  // von Nextion aus: Wechsel auf "Home" 
 2528              		.loc 9 43 0
 2529 001e 4B4B     		ldr	r3, .L122+4
 2530 0020 0022     		movs	r2, #0
 2531 0022 1A70     		strb	r2, [r3]
 2532              	.L108:
  44:CY_ISR_Interrupt.h ****         }
  45:CY_ISR_Interrupt.h ****         
  46:CY_ISR_Interrupt.h ****         if (last_byte == 0x53)                              // LCD hat ein "S" gesendet; -> ASCII "
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 64


 2533              		.loc 9 46 0
 2534 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2535 0026 532B     		cmp	r3, #83
 2536 0028 02D1     		bne	.L109
  47:CY_ISR_Interrupt.h ****         {
  48:CY_ISR_Interrupt.h ****             menustate = 1;                                  // von Nextion aus: Wechsel auf "Settin
 2537              		.loc 9 48 0
 2538 002a 484B     		ldr	r3, .L122+4
 2539 002c 0122     		movs	r2, #1
 2540 002e 1A70     		strb	r2, [r3]
 2541              	.L109:
  49:CY_ISR_Interrupt.h ****         }
  50:CY_ISR_Interrupt.h ****         
  51:CY_ISR_Interrupt.h ****         if (last_byte == 0x4D)                              // LCD hat ein "M" gesendet -> Messung 
 2542              		.loc 9 51 0
 2543 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2544 0032 4D2B     		cmp	r3, #77
 2545 0034 38D1     		bne	.L110
  52:CY_ISR_Interrupt.h ****         {
  53:CY_ISR_Interrupt.h ****             menustate = 2;                                  // von Nextion aus: Wechsel auf "LiveDa
 2546              		.loc 9 53 0
 2547 0036 454B     		ldr	r3, .L122+4
 2548 0038 0222     		movs	r2, #2
 2549 003a 1A70     		strb	r2, [r3]
  54:CY_ISR_Interrupt.h ****             
  55:CY_ISR_Interrupt.h ****             // Togglen der Variable, die angibt, ob die Messung läuft  
  56:CY_ISR_Interrupt.h ****             if (Measurement_running == 0)
 2550              		.loc 9 56 0
 2551 003c 444B     		ldr	r3, .L122+8
 2552 003e 1B78     		ldrb	r3, [r3]
 2553 0040 DBB2     		uxtb	r3, r3
 2554 0042 002B     		cmp	r3, #0
 2555 0044 28D1     		bne	.L111
 2556              	.LBB2:
  57:CY_ISR_Interrupt.h ****             {   // Zu Beginn Messposition anfahren
  58:CY_ISR_Interrupt.h ****                 MoveToSamplingPosition ();
 2557              		.loc 9 58 0
 2558 0046 FFF7FEFF 		bl	MoveToSamplingPosition
  59:CY_ISR_Interrupt.h ****                 Measurement_running = 1; 
 2559              		.loc 9 59 0
 2560 004a 414B     		ldr	r3, .L122+8
 2561 004c 0122     		movs	r2, #1
 2562 004e 1A70     		strb	r2, [r3]
  60:CY_ISR_Interrupt.h ****                 // Zähler zurücksetzen
  61:CY_ISR_Interrupt.h ****                 counter_Timer1_steps = 0;                   // Zähler für Durchläufe der Timerfu
 2563              		.loc 9 61 0
 2564 0050 404B     		ldr	r3, .L122+12
 2565 0052 0022     		movs	r2, #0
 2566 0054 1A60     		str	r2, [r3]
  62:CY_ISR_Interrupt.h ****                 counter_Lamella_Number = 0;                 // Zähler für die Anzahl der zu betra
 2567              		.loc 9 62 0
 2568 0056 404B     		ldr	r3, .L122+16
 2569 0058 0022     		movs	r2, #0
 2570 005a 1A60     		str	r2, [r3]
  63:CY_ISR_Interrupt.h ****                 // Werte, die neu erhalten werden als nicht gespeichert setzen
  64:CY_ISR_Interrupt.h ****                 STI100_present_results_saved = 0;
 2571              		.loc 9 64 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 65


 2572 005c 3F4B     		ldr	r3, .L122+20
 2573 005e 0022     		movs	r2, #0
 2574 0060 1A60     		str	r2, [r3]
  65:CY_ISR_Interrupt.h ****                 // Maximallebensdauer zurücksetzen
  66:CY_ISR_Interrupt.h ****                 Lifetime_max = 0;
 2575              		.loc 9 66 0
 2576 0062 3F4B     		ldr	r3, .L122+24
 2577 0064 0022     		movs	r2, #0
 2578 0066 1A60     		str	r2, [r3]
  67:CY_ISR_Interrupt.h ****                 // Ergebnisarray reinitialisieren;
  68:CY_ISR_Interrupt.h ****                 int i;
  69:CY_ISR_Interrupt.h ****                 for (i=0;i<1000;i++)
 2579              		.loc 9 69 0
 2580 0068 0023     		movs	r3, #0
 2581 006a 7B60     		str	r3, [r7, #4]
 2582 006c 0CE0     		b	.L112
 2583              	.L113:
  70:CY_ISR_Interrupt.h ****                 {
  71:CY_ISR_Interrupt.h ****                     Number[i] = 0;
 2584              		.loc 9 71 0 discriminator 3
 2585 006e 3D4A     		ldr	r2, .L122+28
 2586 0070 7B68     		ldr	r3, [r7, #4]
 2587 0072 0021     		movs	r1, #0
 2588 0074 42F82310 		str	r1, [r2, r3, lsl #2]
  72:CY_ISR_Interrupt.h ****                     Lifetime[i]= 0;
 2589              		.loc 9 72 0 discriminator 3
 2590 0078 3B4A     		ldr	r2, .L122+32
 2591 007a 7B68     		ldr	r3, [r7, #4]
 2592 007c 0021     		movs	r1, #0
 2593 007e 42F82310 		str	r1, [r2, r3, lsl #2]
  69:CY_ISR_Interrupt.h ****                 {
 2594              		.loc 9 69 0 discriminator 3
 2595 0082 7B68     		ldr	r3, [r7, #4]
 2596 0084 0133     		adds	r3, r3, #1
 2597 0086 7B60     		str	r3, [r7, #4]
 2598              	.L112:
  69:CY_ISR_Interrupt.h ****                 {
 2599              		.loc 9 69 0 is_stmt 0 discriminator 1
 2600 0088 7B68     		ldr	r3, [r7, #4]
 2601 008a B3F57A7F 		cmp	r3, #1000
 2602 008e EEDB     		blt	.L113
  73:CY_ISR_Interrupt.h ****                 }
  74:CY_ISR_Interrupt.h ****                 // erlauben, dass der 100ms Messtimer wieder feuert
  75:CY_ISR_Interrupt.h ****                 new_pickup_initialized = 0;
 2603              		.loc 9 75 0 is_stmt 1
 2604 0090 364B     		ldr	r3, .L122+36
 2605 0092 0022     		movs	r2, #0
 2606 0094 1A70     		strb	r2, [r3]
 2607              	.LBE2:
 2608 0096 07E0     		b	.L110
 2609              	.L111:
  76:CY_ISR_Interrupt.h ****             }
  77:CY_ISR_Interrupt.h ****             else if (Measurement_running == 1)
 2610              		.loc 9 77 0
 2611 0098 2D4B     		ldr	r3, .L122+8
 2612 009a 1B78     		ldrb	r3, [r3]
 2613 009c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 66


 2614 009e 012B     		cmp	r3, #1
 2615 00a0 02D1     		bne	.L110
  78:CY_ISR_Interrupt.h ****             {
  79:CY_ISR_Interrupt.h ****                 // Messung wird abgebrochen
  80:CY_ISR_Interrupt.h ****                 Measurement_running = 0; 
 2616              		.loc 9 80 0
 2617 00a2 2B4B     		ldr	r3, .L122+8
 2618 00a4 0022     		movs	r2, #0
 2619 00a6 1A70     		strb	r2, [r3]
 2620              	.L110:
  81:CY_ISR_Interrupt.h ****                 // Momentanes File des Datenloggers schliessen
  82:CY_ISR_Interrupt.h ****                 // CloseLoggerFile();
  83:CY_ISR_Interrupt.h ****             }
  84:CY_ISR_Interrupt.h ****                       
  85:CY_ISR_Interrupt.h ****         }
  86:CY_ISR_Interrupt.h ****         
  87:CY_ISR_Interrupt.h ****         if (last_byte == 0x41)                              // LCD hat ein "A" gesendet; -> ASCII "
 2621              		.loc 9 87 0
 2622 00a8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2623 00aa 412B     		cmp	r3, #65
 2624 00ac 02D1     		bne	.L114
  88:CY_ISR_Interrupt.h ****         {
  89:CY_ISR_Interrupt.h ****             menustate = 3;                                  // von Nextion aus: Wechsel auf "Scaled
 2625              		.loc 9 89 0
 2626 00ae 274B     		ldr	r3, .L122+4
 2627 00b0 0322     		movs	r2, #3
 2628 00b2 1A70     		strb	r2, [r3]
 2629              	.L114:
  90:CY_ISR_Interrupt.h ****         }
  91:CY_ISR_Interrupt.h ****         
  92:CY_ISR_Interrupt.h ****         if (last_byte == 0x45)                              // LCD hat ein "E" gesendet; -> ASCII "
 2630              		.loc 9 92 0
 2631 00b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2632 00b6 452B     		cmp	r3, #69
 2633 00b8 02D1     		bne	.L115
  93:CY_ISR_Interrupt.h ****         {
  94:CY_ISR_Interrupt.h ****             menustate = 4;                                  // von Nextion aus: Wechsel auf "Export
 2634              		.loc 9 94 0
 2635 00ba 244B     		ldr	r3, .L122+4
 2636 00bc 0422     		movs	r2, #4
 2637 00be 1A70     		strb	r2, [r3]
 2638              	.L115:
  95:CY_ISR_Interrupt.h ****         }
  96:CY_ISR_Interrupt.h ****         
  97:CY_ISR_Interrupt.h ****         if (last_byte == 0x4C)                              // LCD hat ein "L" gesendet; -> ASCII "
 2639              		.loc 9 97 0
 2640 00c0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2641 00c2 4C2B     		cmp	r3, #76
 2642 00c4 02D1     		bne	.L116
  98:CY_ISR_Interrupt.h ****         {
  99:CY_ISR_Interrupt.h ****             // hier nur auslesen der Bereits gesammelten Werte
 100:CY_ISR_Interrupt.h ****             menustate = 2;                                  // von Nextion aus: Wechsel auf "Export
 2643              		.loc 9 100 0
 2644 00c6 214B     		ldr	r3, .L122+4
 2645 00c8 0222     		movs	r2, #2
 2646 00ca 1A70     		strb	r2, [r3]
 2647              	.L116:
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 67


 101:CY_ISR_Interrupt.h ****         }
 102:CY_ISR_Interrupt.h ****         
 103:CY_ISR_Interrupt.h ****         if (last_byte == 0x58)                              // LCD hat ein "X" gesendet; -> Touch R
 2648              		.loc 9 103 0
 2649 00cc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2650 00ce 582B     		cmp	r3, #88
 2651 00d0 05D1     		bne	.L117
 104:CY_ISR_Interrupt.h ****         {
 105:CY_ISR_Interrupt.h ****             menustate = 0;
 2652              		.loc 9 105 0
 2653 00d2 1E4B     		ldr	r3, .L122+4
 2654 00d4 0022     		movs	r2, #0
 2655 00d6 1A70     		strb	r2, [r3]
 106:CY_ISR_Interrupt.h ****             slider_val_sent = 1;
 2656              		.loc 9 106 0
 2657 00d8 1B4B     		ldr	r3, .L122
 2658 00da 0122     		movs	r2, #1
 2659 00dc 1A70     		strb	r2, [r3]
 2660              	.L117:
 107:CY_ISR_Interrupt.h ****         }
 108:CY_ISR_Interrupt.h ****         
 109:CY_ISR_Interrupt.h ****         if (last_byte == 0x2B)                              // LCD hat ein "+" gesendet von "Settin
 2661              		.loc 9 109 0
 2662 00de FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2663 00e0 2B2B     		cmp	r3, #43
 2664 00e2 01D1     		bne	.L118
 110:CY_ISR_Interrupt.h ****         {
 111:CY_ISR_Interrupt.h ****             // Einen Schritt nach rechts drehen
 112:CY_ISR_Interrupt.h ****             MoveOneStep_CounterClockwise();
 2665              		.loc 9 112 0
 2666 00e4 FFF7FEFF 		bl	MoveOneStep_CounterClockwise
 2667              	.L118:
 113:CY_ISR_Interrupt.h ****         }
 114:CY_ISR_Interrupt.h ****  
 115:CY_ISR_Interrupt.h ****         if (last_byte == 0x2D)                              // LCD hat ein "-" gesendet von "Settin
 2668              		.loc 9 115 0
 2669 00e8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2670 00ea 2D2B     		cmp	r3, #45
 2671 00ec 01D1     		bne	.L119
 116:CY_ISR_Interrupt.h ****         {
 117:CY_ISR_Interrupt.h ****             // Einen Schritt nach links drehen
 118:CY_ISR_Interrupt.h ****             MoveOneStep_Clockwise();
 2672              		.loc 9 118 0
 2673 00ee FFF7FEFF 		bl	MoveOneStep_Clockwise
 2674              	.L119:
 119:CY_ISR_Interrupt.h ****         }
 120:CY_ISR_Interrupt.h ****         
 121:CY_ISR_Interrupt.h ****         if (last_byte == 0x21)                              // LCD hat ein "!" gesendet von "Settin
 2675              		.loc 9 121 0
 2676 00f2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2677 00f4 212B     		cmp	r3, #33
 2678 00f6 01D1     		bne	.L120
 122:CY_ISR_Interrupt.h ****         {
 123:CY_ISR_Interrupt.h ****             // Pick-Up-Position anfahren
 124:CY_ISR_Interrupt.h ****             MoveToHomePosition();
 2679              		.loc 9 124 0
 2680 00f8 FFF7FEFF 		bl	MoveToHomePosition
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 68


 2681              	.L120:
 125:CY_ISR_Interrupt.h ****         }  
 126:CY_ISR_Interrupt.h ****         
 127:CY_ISR_Interrupt.h ****         if (last_byte == 0x55)                              // LCD hat ein "U" gesendet von "Export
 2682              		.loc 9 127 0
 2683 00fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2684 00fe 552B     		cmp	r3, #85
 2685 0100 02D1     		bne	.L107
 128:CY_ISR_Interrupt.h ****         {
 129:CY_ISR_Interrupt.h ****             // Ergebnisse auf USB-Stick schreiben
 130:CY_ISR_Interrupt.h ****             STI100_write_requested = 1;
 2686              		.loc 9 130 0
 2687 0102 1B4B     		ldr	r3, .L122+40
 2688 0104 0122     		movs	r2, #1
 2689 0106 1A60     		str	r2, [r3]
 2690              	.L107:
 131:CY_ISR_Interrupt.h ****         }  
 132:CY_ISR_Interrupt.h ****     }
 133:CY_ISR_Interrupt.h **** 
 134:CY_ISR_Interrupt.h ****     // wenn der Screen ein "X" gesendet hat -> nächste 4 Bytes einlesen auf Indices 0, 1, 2, 3
 135:CY_ISR_Interrupt.h ****     if (slider_val_sent == 1)
 2691              		.loc 9 135 0
 2692 0108 0F4B     		ldr	r3, .L122
 2693 010a 1B78     		ldrb	r3, [r3]
 2694 010c DBB2     		uxtb	r3, r3
 2695 010e 012B     		cmp	r3, #1
 2696 0110 16D1     		bne	.L106
 136:CY_ISR_Interrupt.h ****     {
 137:CY_ISR_Interrupt.h ****         RX_Buffer[counter++] = last_byte;                   // Post-Inkrement; erst alten Wert nehm
 2697              		.loc 9 137 0
 2698 0112 184B     		ldr	r3, .L122+44
 2699 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2700 0116 5A1C     		adds	r2, r3, #1
 2701 0118 D1B2     		uxtb	r1, r2
 2702 011a 164A     		ldr	r2, .L122+44
 2703 011c 1170     		strb	r1, [r2]
 2704 011e 1946     		mov	r1, r3
 2705 0120 154A     		ldr	r2, .L122+48
 2706 0122 FB78     		ldrb	r3, [r7, #3]
 2707 0124 5354     		strb	r3, [r2, r1]
 138:CY_ISR_Interrupt.h ****         if (counter == 4)
 2708              		.loc 9 138 0
 2709 0126 134B     		ldr	r3, .L122+44
 2710 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2711 012a 042B     		cmp	r3, #4
 2712 012c 08D1     		bne	.L106
 139:CY_ISR_Interrupt.h ****         {
 140:CY_ISR_Interrupt.h ****             counter = 0;            
 2713              		.loc 9 140 0
 2714 012e 114B     		ldr	r3, .L122+44
 2715 0130 0022     		movs	r2, #0
 2716 0132 1A70     		strb	r2, [r3]
 141:CY_ISR_Interrupt.h ****             slider_val_sent = 0;
 2717              		.loc 9 141 0
 2718 0134 044B     		ldr	r3, .L122
 2719 0136 0022     		movs	r2, #0
 2720 0138 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 69


 142:CY_ISR_Interrupt.h ****             slider_val_received = 1;
 2721              		.loc 9 142 0
 2722 013a 104B     		ldr	r3, .L122+52
 2723 013c 0122     		movs	r2, #1
 2724 013e 1A70     		strb	r2, [r3]
 2725              	.L106:
 143:CY_ISR_Interrupt.h ****         }        
 144:CY_ISR_Interrupt.h ****     }
 145:CY_ISR_Interrupt.h **** 
 146:CY_ISR_Interrupt.h **** }
 2726              		.loc 9 146 0
 2727 0140 0837     		adds	r7, r7, #8
 2728              		.cfi_def_cfa_offset 8
 2729 0142 BD46     		mov	sp, r7
 2730              		.cfi_def_cfa_register 13
 2731              		@ sp needed
 2732 0144 80BD     		pop	{r7, pc}
 2733              	.L123:
 2734 0146 00BF     		.align	2
 2735              	.L122:
 2736 0148 00000000 		.word	slider_val_sent
 2737 014c 00000000 		.word	menustate
 2738 0150 00000000 		.word	Measurement_running
 2739 0154 00000000 		.word	counter_Timer1_steps
 2740 0158 00000000 		.word	counter_Lamella_Number
 2741 015c 00000000 		.word	STI100_present_results_saved
 2742 0160 00000000 		.word	Lifetime_max
 2743 0164 00000000 		.word	Number
 2744 0168 00000000 		.word	Lifetime
 2745 016c 00000000 		.word	new_pickup_initialized
 2746 0170 00000000 		.word	STI100_write_requested
 2747 0174 58000000 		.word	counter.9086
 2748 0178 00000000 		.word	RX_Buffer
 2749 017c 00000000 		.word	slider_val_received
 2750              		.cfi_endproc
 2751              	.LFE85:
 2752              		.size	UART_TFT_InterruptFunction, .-UART_TFT_InterruptFunction
 2753              		.section	.text.Timer1_Interrupt_Function,"ax",%progbits
 2754              		.align	2
 2755              		.global	Timer1_Interrupt_Function
 2756              		.thumb
 2757              		.thumb_func
 2758              		.type	Timer1_Interrupt_Function, %function
 2759              	Timer1_Interrupt_Function:
 2760              	.LFB86:
 2761              		.file 10 "CYISR_Timer1_Interrupt.h"
   1:CYISR_Timer1_Interrupt.h **** /* ========================================
   2:CYISR_Timer1_Interrupt.h ****  *
   3:CYISR_Timer1_Interrupt.h ****  * Copyright YOUR COMPANY, THE YEAR
   4:CYISR_Timer1_Interrupt.h ****  * All Rights Reserved
   5:CYISR_Timer1_Interrupt.h ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:CYISR_Timer1_Interrupt.h ****  *
   7:CYISR_Timer1_Interrupt.h ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:CYISR_Timer1_Interrupt.h ****  * WHICH IS THE PROPERTY OF your company.
   9:CYISR_Timer1_Interrupt.h ****  *
  10:CYISR_Timer1_Interrupt.h ****  * ========================================
  11:CYISR_Timer1_Interrupt.h **** */
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 70


  12:CYISR_Timer1_Interrupt.h **** 
  13:CYISR_Timer1_Interrupt.h **** #include <project.h>
  14:CYISR_Timer1_Interrupt.h **** #include <stdlib.h>
  15:CYISR_Timer1_Interrupt.h **** 
  16:CYISR_Timer1_Interrupt.h **** #ifndef Measurement_Parameters
  17:CYISR_Timer1_Interrupt.h **** #define Measurement_Parameters
  18:CYISR_Timer1_Interrupt.h **** #endif
  19:CYISR_Timer1_Interrupt.h **** 
  20:CYISR_Timer1_Interrupt.h **** 
  21:CYISR_Timer1_Interrupt.h **** // 
  22:CYISR_Timer1_Interrupt.h **** // Timer mit 1ms Takt -> von ihm kann man mittels Zählvariablen "langsamere" Timer ableiten
  23:CYISR_Timer1_Interrupt.h **** //
  24:CYISR_Timer1_Interrupt.h **** CY_ISR(Timer1_Interrupt_Function)
  25:CYISR_Timer1_Interrupt.h **** {
 2762              		.loc 10 25 0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 0
 2765              		@ frame_needed = 1, uses_anonymous_args = 0
 2766              		@ link register save eliminated.
 2767 0000 80B4     		push	{r7}
 2768              		.cfi_def_cfa_offset 4
 2769              		.cfi_offset 7, -4
 2770 0002 00AF     		add	r7, sp, #0
 2771              		.cfi_def_cfa_register 7
  26:CYISR_Timer1_Interrupt.h ****     // Zähler alle 1ms Inkrementieren
  27:CYISR_Timer1_Interrupt.h ****     cnt_timer100ms++;
 2772              		.loc 10 27 0
 2773 0004 1C4B     		ldr	r3, .L128
 2774 0006 1B68     		ldr	r3, [r3]
 2775 0008 0133     		adds	r3, r3, #1
 2776 000a 1B4A     		ldr	r2, .L128
 2777 000c 1360     		str	r3, [r2]
  28:CYISR_Timer1_Interrupt.h ****     cnt_timer1000ms++;
 2778              		.loc 10 28 0
 2779 000e 1B4B     		ldr	r3, .L128+4
 2780 0010 1B68     		ldr	r3, [r3]
 2781 0012 0133     		adds	r3, r3, #1
 2782 0014 194A     		ldr	r2, .L128+4
 2783 0016 1360     		str	r3, [r2]
  29:CYISR_Timer1_Interrupt.h ****     cnt_timer5000ms++;
 2784              		.loc 10 29 0
 2785 0018 194B     		ldr	r3, .L128+8
 2786 001a 1B68     		ldr	r3, [r3]
 2787 001c 0133     		adds	r3, r3, #1
 2788 001e 184A     		ldr	r2, .L128+8
 2789 0020 1360     		str	r3, [r2]
  30:CYISR_Timer1_Interrupt.h ****     
  31:CYISR_Timer1_Interrupt.h ****     // Timerflag für 100ms Timer setzen
  32:CYISR_Timer1_Interrupt.h ****     if (cnt_timer100ms == 100)
 2790              		.loc 10 32 0
 2791 0022 154B     		ldr	r3, .L128
 2792 0024 1B68     		ldr	r3, [r3]
 2793 0026 642B     		cmp	r3, #100
 2794 0028 0AD1     		bne	.L125
  33:CYISR_Timer1_Interrupt.h ****     {   
  34:CYISR_Timer1_Interrupt.h ****         // Zähler für diesen Counter zurücksetzen
  35:CYISR_Timer1_Interrupt.h ****         cnt_timer100ms = 0;
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 71


 2795              		.loc 10 35 0
 2796 002a 134B     		ldr	r3, .L128
 2797 002c 0022     		movs	r2, #0
 2798 002e 1A60     		str	r2, [r3]
  36:CYISR_Timer1_Interrupt.h ****         // Variable, dass Timer gelaufen ist nur dann umschalten, wenn nicht gerade eine neue Lamel
  37:CYISR_Timer1_Interrupt.h ****         if (new_pickup_initialized == 0)
 2799              		.loc 10 37 0
 2800 0030 144B     		ldr	r3, .L128+12
 2801 0032 1B78     		ldrb	r3, [r3]
 2802 0034 DBB2     		uxtb	r3, r3
 2803 0036 002B     		cmp	r3, #0
 2804 0038 02D1     		bne	.L125
  38:CYISR_Timer1_Interrupt.h ****         {
  39:CYISR_Timer1_Interrupt.h ****             timerflag100ms = 1;                      // globale Variable, die angibt, dass die Time
 2805              		.loc 10 39 0
 2806 003a 134B     		ldr	r3, .L128+16
 2807 003c 0122     		movs	r2, #1
 2808 003e 1A70     		strb	r2, [r3]
 2809              	.L125:
  40:CYISR_Timer1_Interrupt.h ****         }
  41:CYISR_Timer1_Interrupt.h ****     }
  42:CYISR_Timer1_Interrupt.h ****     
  43:CYISR_Timer1_Interrupt.h ****     // Timerflag für 1000ms Timer setzen
  44:CYISR_Timer1_Interrupt.h ****     if (cnt_timer1000ms == 1000)
 2810              		.loc 10 44 0
 2811 0040 0E4B     		ldr	r3, .L128+4
 2812 0042 1B68     		ldr	r3, [r3]
 2813 0044 B3F57A7F 		cmp	r3, #1000
 2814 0048 05D1     		bne	.L126
  45:CYISR_Timer1_Interrupt.h ****     {   
  46:CYISR_Timer1_Interrupt.h ****         // Zähler für diesen Counter zurücksetzen
  47:CYISR_Timer1_Interrupt.h ****         cnt_timer1000ms = 0;
 2815              		.loc 10 47 0
 2816 004a 0C4B     		ldr	r3, .L128+4
 2817 004c 0022     		movs	r2, #0
 2818 004e 1A60     		str	r2, [r3]
  48:CYISR_Timer1_Interrupt.h ****         timerflag1000ms = 1;                      // globale Variable, die angibt, dass die Timerfu
 2819              		.loc 10 48 0
 2820 0050 0E4B     		ldr	r3, .L128+20
 2821 0052 0122     		movs	r2, #1
 2822 0054 1A70     		strb	r2, [r3]
 2823              	.L126:
  49:CYISR_Timer1_Interrupt.h **** 
  50:CYISR_Timer1_Interrupt.h ****     }   
  51:CYISR_Timer1_Interrupt.h ****     
  52:CYISR_Timer1_Interrupt.h ****     // Timerflag für 5000ms Timer setzen
  53:CYISR_Timer1_Interrupt.h ****     if (cnt_timer5000ms == 5000)
 2824              		.loc 10 53 0
 2825 0056 0A4B     		ldr	r3, .L128+8
 2826 0058 1B68     		ldr	r3, [r3]
 2827 005a 41F28832 		movw	r2, #5000
 2828 005e 9342     		cmp	r3, r2
 2829 0060 05D1     		bne	.L124
  54:CYISR_Timer1_Interrupt.h ****     {   
  55:CYISR_Timer1_Interrupt.h ****         // Zähler für diesen Counter zurücksetzen
  56:CYISR_Timer1_Interrupt.h ****         cnt_timer5000ms = 0;
 2830              		.loc 10 56 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 72


 2831 0062 074B     		ldr	r3, .L128+8
 2832 0064 0022     		movs	r2, #0
 2833 0066 1A60     		str	r2, [r3]
  57:CYISR_Timer1_Interrupt.h ****         timerflag5000ms = 1;                      // globale Variable, die angibt, dass die Timerfu
 2834              		.loc 10 57 0
 2835 0068 094B     		ldr	r3, .L128+24
 2836 006a 0122     		movs	r2, #1
 2837 006c 1A70     		strb	r2, [r3]
 2838              	.L124:
  58:CYISR_Timer1_Interrupt.h **** 
  59:CYISR_Timer1_Interrupt.h ****     }    
  60:CYISR_Timer1_Interrupt.h **** }
 2839              		.loc 10 60 0
 2840 006e BD46     		mov	sp, r7
 2841              		.cfi_def_cfa_register 13
 2842              		@ sp needed
 2843 0070 5DF8047B 		ldr	r7, [sp], #4
 2844              		.cfi_restore 7
 2845              		.cfi_def_cfa_offset 0
 2846 0074 7047     		bx	lr
 2847              	.L129:
 2848 0076 00BF     		.align	2
 2849              	.L128:
 2850 0078 00000000 		.word	cnt_timer100ms
 2851 007c 00000000 		.word	cnt_timer1000ms
 2852 0080 00000000 		.word	cnt_timer5000ms
 2853 0084 00000000 		.word	new_pickup_initialized
 2854 0088 00000000 		.word	timerflag100ms
 2855 008c 00000000 		.word	timerflag1000ms
 2856 0090 00000000 		.word	timerflag5000ms
 2857              		.cfi_endproc
 2858              	.LFE86:
 2859              		.size	Timer1_Interrupt_Function, .-Timer1_Interrupt_Function
 2860              		.comm	FileNameCurrentLamellaFile,30,4
 2861              		.global	bool_NewLamellaFileNameSet
 2862              		.bss
 2863              		.align	2
 2864              		.type	bool_NewLamellaFileNameSet, %object
 2865              		.size	bool_NewLamellaFileNameSet, 4
 2866              	bool_NewLamellaFileNameSet:
 2867 0054 00000000 		.space	4
 2868              		.global	AllDataPointLoggerTimeLimit_s
 2869              		.section	.rodata
 2870 00f9 000000   		.align	2
 2871              		.type	AllDataPointLoggerTimeLimit_s, %object
 2872              		.size	AllDataPointLoggerTimeLimit_s, 4
 2873              	AllDataPointLoggerTimeLimit_s:
 2874 00fc 84030000 		.word	900
 2875              		.comm	FileNameLogger,4,4
 2876              		.align	2
 2877              	.LC18:
 2878 0100 252E3166 		.ascii	"%.1f,%d\012\000"
 2878      2C25640A 
 2878      00
 2879              		.section	.text.IntensityLogger_ONE_Channel,"ax",%progbits
 2880              		.align	2
 2881              		.global	IntensityLogger_ONE_Channel
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 73


 2882              		.thumb
 2883              		.thumb_func
 2884              		.type	IntensityLogger_ONE_Channel, %function
 2885              	IntensityLogger_ONE_Channel:
 2886              	.LFB87:
 2887              		.file 11 "DataLogger.h"
   1:DataLogger.h  **** /* ========================================
   2:DataLogger.h  ****  *
   3:DataLogger.h  ****  * Copyright YOUR COMPANY, THE YEAR
   4:DataLogger.h  ****  * All Rights Reserved
   5:DataLogger.h  ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:DataLogger.h  ****  *
   7:DataLogger.h  ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:DataLogger.h  ****  * WHICH IS THE PROPERTY OF your company.
   9:DataLogger.h  ****  *
  10:DataLogger.h  ****  * ========================================
  11:DataLogger.h  **** */
  12:DataLogger.h  **** 
  13:DataLogger.h  **** #include <project.h>
  14:DataLogger.h  **** #include <stdio.h>      // -> für "sprintf", etc.
  15:DataLogger.h  **** #include <FS.h>         // für Data-Handling über SD-Karte
  16:DataLogger.h  **** 
  17:DataLogger.h  **** char FileNameCurrentLamellaFile[30];    
  18:DataLogger.h  **** int bool_NewLamellaFileNameSet = 0;                 // Boolean, die angibt, ob der Name der Datei, 
  19:DataLogger.h  **** 
  20:DataLogger.h  **** const int AllDataPointLoggerTimeLimit_s = 900;      // Zeit unterhalb der jeder gemessen Datenpunkt
  21:DataLogger.h  **** 
  22:DataLogger.h  **** FS_FILE *FileNameLogger;                            // Pointer auf Datei, die gelogte Daten enthäl
  23:DataLogger.h  **** 
  24:DataLogger.h  **** //
  25:DataLogger.h  **** // Logger für Intensität aus einem Kanal
  26:DataLogger.h  **** //
  27:DataLogger.h  **** void IntensityLogger_ONE_Channel(int NumberOfEntry, int value)
  28:DataLogger.h  **** {
 2888              		.loc 11 28 0
 2889              		.cfi_startproc
 2890              		@ args = 0, pretend = 0, frame = 24
 2891              		@ frame_needed = 1, uses_anonymous_args = 0
 2892 0000 B0B5     		push	{r4, r5, r7, lr}
 2893              		.cfi_def_cfa_offset 16
 2894              		.cfi_offset 4, -16
 2895              		.cfi_offset 5, -12
 2896              		.cfi_offset 7, -8
 2897              		.cfi_offset 14, -4
 2898 0002 88B0     		sub	sp, sp, #32
 2899              		.cfi_def_cfa_offset 48
 2900 0004 02AF     		add	r7, sp, #8
 2901              		.cfi_def_cfa 7, 40
 2902 0006 7860     		str	r0, [r7, #4]
 2903 0008 3960     		str	r1, [r7]
  29:DataLogger.h  ****     char buffer_Lamella_nextline[10];               // Puffer für nächste zu schreibende Zeile
  30:DataLogger.h  ****     
  31:DataLogger.h  ****     //
  32:DataLogger.h  ****     // unterhalb der Grenzzeit wir jede gemessene Reflektivität geloggt
  33:DataLogger.h  ****     //
  34:DataLogger.h  ****     if  (NumberOfEntry <= (int)(AllDataPointLoggerTimeLimit_s*SampligCountsPerSecond))
 2904              		.loc 11 34 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 74


 2905 000a 4FF46173 		mov	r3, #900
 2906 000e 0A22     		movs	r2, #10
 2907 0010 02FB03F2 		mul	r2, r2, r3
 2908 0014 7B68     		ldr	r3, [r7, #4]
 2909 0016 9A42     		cmp	r2, r3
 2910 0018 26DB     		blt	.L131
  35:DataLogger.h  ****     {        
  36:DataLogger.h  ****         // nächste Zeile in "buffer_Lamella_nextline" abspeichern
  37:DataLogger.h  ****         sprintf((char*)buffer_Lamella_nextline, "%.1f,%d\n", ((float)NumberOfEntry)/10, value);
 2911              		.loc 11 37 0
 2912 001a 7868     		ldr	r0, [r7, #4]
 2913 001c FFF7FEFF 		bl	__aeabi_i2f
 2914 0020 0346     		mov	r3, r0
 2915 0022 1846     		mov	r0, r3
 2916 0024 2949     		ldr	r1, .L133
 2917 0026 FFF7FEFF 		bl	__aeabi_fdiv
 2918 002a 0346     		mov	r3, r0
 2919 002c 1846     		mov	r0, r3
 2920 002e FFF7FEFF 		bl	__aeabi_f2d
 2921 0032 0446     		mov	r4, r0
 2922 0034 0D46     		mov	r5, r1
 2923 0036 07F10C02 		add	r2, r7, #12
 2924 003a 3B68     		ldr	r3, [r7]
 2925 003c 0093     		str	r3, [sp]
 2926 003e 1046     		mov	r0, r2
 2927 0040 2349     		ldr	r1, .L133+4
 2928 0042 2246     		mov	r2, r4
 2929 0044 2B46     		mov	r3, r5
 2930 0046 FFF7FEFF 		bl	sprintf
  38:DataLogger.h  ****         // gepufferte Zeile in Ergebnisdatei schreiben
  39:DataLogger.h  ****         if (0 != FS_Write(FileNameLogger, buffer_Lamella_nextline, strlen(buffer_Lamella_nextline))
 2931              		.loc 11 39 0
 2932 004a 224B     		ldr	r3, .L133+8
 2933 004c 1C68     		ldr	r4, [r3]
 2934 004e 07F10C03 		add	r3, r7, #12
 2935 0052 1846     		mov	r0, r3
 2936 0054 FFF7FEFF 		bl	strlen
 2937 0058 0246     		mov	r2, r0
 2938 005a 07F10C03 		add	r3, r7, #12
 2939 005e 2046     		mov	r0, r4
 2940 0060 1946     		mov	r1, r3
 2941 0062 FFF7FEFF 		bl	FS_Write
 2942 0066 2EE0     		b	.L130
 2943              	.L131:
  40:DataLogger.h  ****         {
  41:DataLogger.h  ****             // kein Fehler
  42:DataLogger.h  ****         } 
  43:DataLogger.h  ****         else
  44:DataLogger.h  ****         {
  45:DataLogger.h  ****             // Fehlerbehandlung
  46:DataLogger.h  ****         }
  47:DataLogger.h  ****     }
  48:DataLogger.h  ****     //
  49:DataLogger.h  ****     // --> hier alle "counter_Lamella_Logger_steps" = 1[s] mit Hilfe des Modulo-Operators (%) 
  50:DataLogger.h  ****     // Nach mehr als 900 [s] (= 15 Minuten) Lebenszeit Reflektivität nut noch jede Sekunde loggen 
  51:DataLogger.h  ****     //
  52:DataLogger.h  ****     else
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 75


  53:DataLogger.h  ****     {
  54:DataLogger.h  ****         if (NumberOfEntry%SampligCountsPerSecond == 0)
 2944              		.loc 11 54 0
 2945 0068 0A22     		movs	r2, #10
 2946 006a 7B68     		ldr	r3, [r7, #4]
 2947 006c 93FBF2F1 		sdiv	r1, r3, r2
 2948 0070 02FB01F2 		mul	r2, r2, r1
 2949 0074 9B1A     		subs	r3, r3, r2
 2950 0076 002B     		cmp	r3, #0
 2951 0078 25D1     		bne	.L130
  55:DataLogger.h  ****         {
  56:DataLogger.h  ****             // nächste Zeile in "buffer_Lamella_nextline" abspeichern
  57:DataLogger.h  ****             sprintf((char*)buffer_Lamella_nextline, "%.1f,%d\n", ((float)NumberOfEntry)/10, value);
 2952              		.loc 11 57 0
 2953 007a 7868     		ldr	r0, [r7, #4]
 2954 007c FFF7FEFF 		bl	__aeabi_i2f
 2955 0080 0346     		mov	r3, r0
 2956 0082 1846     		mov	r0, r3
 2957 0084 1149     		ldr	r1, .L133
 2958 0086 FFF7FEFF 		bl	__aeabi_fdiv
 2959 008a 0346     		mov	r3, r0
 2960 008c 1846     		mov	r0, r3
 2961 008e FFF7FEFF 		bl	__aeabi_f2d
 2962 0092 0446     		mov	r4, r0
 2963 0094 0D46     		mov	r5, r1
 2964 0096 07F10C02 		add	r2, r7, #12
 2965 009a 3B68     		ldr	r3, [r7]
 2966 009c 0093     		str	r3, [sp]
 2967 009e 1046     		mov	r0, r2
 2968 00a0 0B49     		ldr	r1, .L133+4
 2969 00a2 2246     		mov	r2, r4
 2970 00a4 2B46     		mov	r3, r5
 2971 00a6 FFF7FEFF 		bl	sprintf
  58:DataLogger.h  ****             // gepufferte Zeile in Ergebnisdatei schreiben
  59:DataLogger.h  ****             if (0 != FS_Write(FileNameLogger, buffer_Lamella_nextline, strlen(buffer_Lamella_nextli
 2972              		.loc 11 59 0
 2973 00aa 0A4B     		ldr	r3, .L133+8
 2974 00ac 1C68     		ldr	r4, [r3]
 2975 00ae 07F10C03 		add	r3, r7, #12
 2976 00b2 1846     		mov	r0, r3
 2977 00b4 FFF7FEFF 		bl	strlen
 2978 00b8 0246     		mov	r2, r0
 2979 00ba 07F10C03 		add	r3, r7, #12
 2980 00be 2046     		mov	r0, r4
 2981 00c0 1946     		mov	r1, r3
 2982 00c2 FFF7FEFF 		bl	FS_Write
 2983              	.L130:
  60:DataLogger.h  ****             {
  61:DataLogger.h  ****                 // kein Fehler
  62:DataLogger.h  ****             } 
  63:DataLogger.h  ****             else
  64:DataLogger.h  ****             {
  65:DataLogger.h  ****                 // Fehlerbehandlung
  66:DataLogger.h  ****             }
  67:DataLogger.h  ****         }        
  68:DataLogger.h  ****     }
  69:DataLogger.h  **** }
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 76


 2984              		.loc 11 69 0
 2985 00c6 1837     		adds	r7, r7, #24
 2986              		.cfi_def_cfa_offset 16
 2987 00c8 BD46     		mov	sp, r7
 2988              		.cfi_def_cfa_register 13
 2989              		@ sp needed
 2990 00ca B0BD     		pop	{r4, r5, r7, pc}
 2991              	.L134:
 2992              		.align	2
 2993              	.L133:
 2994 00cc 00002041 		.word	1092616192
 2995 00d0 00010000 		.word	.LC18
 2996 00d4 00000000 		.word	FileNameLogger
 2997              		.cfi_endproc
 2998              	.LFE87:
 2999              		.size	IntensityLogger_ONE_Channel, .-IntensityLogger_ONE_Channel
 3000              		.section	.text.CloseLoggerFile,"ax",%progbits
 3001              		.align	2
 3002              		.global	CloseLoggerFile
 3003              		.thumb
 3004              		.thumb_func
 3005              		.type	CloseLoggerFile, %function
 3006              	CloseLoggerFile:
 3007              	.LFB88:
  70:DataLogger.h  **** 
  71:DataLogger.h  **** 
  72:DataLogger.h  **** //
  73:DataLogger.h  **** // Logger-Datei schliessen
  74:DataLogger.h  **** //
  75:DataLogger.h  **** void CloseLoggerFile (void)
  76:DataLogger.h  **** {
 3008              		.loc 11 76 0
 3009              		.cfi_startproc
 3010              		@ args = 0, pretend = 0, frame = 0
 3011              		@ frame_needed = 1, uses_anonymous_args = 0
 3012 0000 80B5     		push	{r7, lr}
 3013              		.cfi_def_cfa_offset 8
 3014              		.cfi_offset 7, -8
 3015              		.cfi_offset 14, -4
 3016 0002 00AF     		add	r7, sp, #0
 3017              		.cfi_def_cfa_register 7
  77:DataLogger.h  ****     // Schliessen der Datei, in die geschrieben wurde
  78:DataLogger.h  ****     if(0 == FS_FClose(FileNameLogger))
 3018              		.loc 11 78 0
 3019 0004 054B     		ldr	r3, .L137
 3020 0006 1B68     		ldr	r3, [r3]
 3021 0008 1846     		mov	r0, r3
 3022 000a FFF7FEFF 		bl	FS_FClose
 3023 000e 0346     		mov	r3, r0
 3024 0010 002B     		cmp	r3, #0
 3025 0012 02D1     		bne	.L135
  79:DataLogger.h  ****     {
  80:DataLogger.h  ****         // alles ok
  81:DataLogger.h  ****         CyDelay(200);
 3026              		.loc 11 81 0
 3027 0014 C820     		movs	r0, #200
 3028 0016 FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 77


 3029              	.L135:
  82:DataLogger.h  ****     }
  83:DataLogger.h  ****     else
  84:DataLogger.h  ****     {
  85:DataLogger.h  ****         // Fehler -> "Fehler beim Schliessen"
  86:DataLogger.h  **** //        UART_TFT_PutString((char*)"t_line.txt=ERR on C.");
  87:DataLogger.h  **** //        // Ende der Eingabe markieren
  88:DataLogger.h  **** //        UART_TFT_PutChar(0xff);
  89:DataLogger.h  **** //        UART_TFT_PutChar(0xff);
  90:DataLogger.h  **** //        UART_TFT_PutChar(0xff);
  91:DataLogger.h  ****     } 
  92:DataLogger.h  **** }
 3030              		.loc 11 92 0
 3031 001a 80BD     		pop	{r7, pc}
 3032              	.L138:
 3033              		.align	2
 3034              	.L137:
 3035 001c 00000000 		.word	FileNameLogger
 3036              		.cfi_endproc
 3037              	.LFE88:
 3038              		.size	CloseLoggerFile, .-CloseLoggerFile
 3039              		.comm	Bin_Number,120,4
 3040              		.comm	Bin_Lifetime_Probability,120,4
 3041              		.section	.text.VFDClearDisplay,"ax",%progbits
 3042              		.align	2
 3043              		.global	VFDClearDisplay
 3044              		.thumb
 3045              		.thumb_func
 3046              		.type	VFDClearDisplay, %function
 3047              	VFDClearDisplay:
 3048              	.LFB89:
 3049              		.file 12 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  *
   3:main.c        ****  * Copyright YOUR COMPANY, THE YEAR
   4:main.c        ****  * All Rights Reserved
   5:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:main.c        ****  *
   7:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:main.c        ****  * WHICH IS THE PROPERTY OF your company.
   9:main.c        ****  *
  10:main.c        **** https://www.segger.com/downloads/emfile/UM02001_emFile.pdf
  11:main.c        **** 
  12:main.c        **** */
  13:main.c        **** #include <project.h>
  14:main.c        **** #include <float.h>
  15:main.c        **** #include <stdio.h>
  16:main.c        **** #include <stdlib.h>
  17:main.c        **** #include <math.h>
  18:main.c        **** #include <FS.h>
  19:main.c        **** #include <string.h>
  20:main.c        **** 
  21:main.c        **** #define InitLED_ON Pin_LED_Write(1)
  22:main.c        **** #define InitLED_OFF Pin_LED_Write(0)
  23:main.c        **** 
  24:main.c        **** volatile int NumberOfMeasurements = 0;          // Anzahl durchzuführender Messungen als globale V
  25:main.c        **** 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 78


  26:main.c        **** int ADC_value;                                  // letzter Messwert des ADC
  27:main.c        **** volatile int Number[1000];                      // Ergebnisarray für Nummer der Messung
  28:main.c        **** volatile int Lifetime[1000];                    // Ergebnisarray für Lebenszeit der jewiligen Lame
  29:main.c        **** 
  30:main.c        **** volatile int Lifetime_max = 0;                  // Maximale Lebenszeit
  31:main.c        **** 
  32:main.c        **** volatile char menustate = 0;                    // Momentaner Menüstand als globale Variable defin
  33:main.c        **** 
  34:main.c        **** volatile char RX_Buffer[4];                     // Array aus 4 Bytes, das den Wert des Sliders enth
  35:main.c        **** 
  36:main.c        **** volatile int counter_Timer1_steps = 0;          // Zähler für Durchläufe der Timerfuktion 
  37:main.c        **** volatile int counter_Lamella_Number = 0;        // Zähler für die Anzahl der zu betrachtenden Lam
  38:main.c        **** 
  39:main.c        **** //const int Lamella_Relaxation_Time_s = 1;        // Zeit, die der Lamelle gegeben wird, bis sich k
  40:main.c        **** int counter_Lamella_Relaxation_steps;           // "Gnadenfrist" in timer Steps 
  41:main.c        **** //const int Maximum_Lamella_Time_h = 1;           // Maximal "erlaubte" Lebenszeit einer Lamelle in
  42:main.c        **** int counter_Maximum_Lamella_Time_steps;         // Maximal "erlaubte" Lebenszeit in steps
  43:main.c        **** //const int Rupture_Confirmation_Time_s = 1;      // Zeit, die das Signal, den Grenzwert unterschre
  44:main.c        **** int counter_Rupture_Confirmation_Target;        // Target-Counts, die Signal unter dem Grenzwert bl
  45:main.c        **** int counter_Rupture_Confirmation = 0;           // Momentaner Zählerstand der Unterschreitungen de
  46:main.c        **** int bool_Rupture_Confirmed = 0;                 // Bool, die angibt, ob die aktuelle Lamelle als ge
  47:main.c        **** 
  48:main.c        **** int WidthOfBin;                                 // Breite einer "Bin" für Darstellung auf Seite "S
  49:main.c        **** 
  50:main.c        **** volatile char timerflag100ms = 0;               // Flag für 100ms Timer
  51:main.c        **** volatile char timerflag1000ms = 0;              // Falg für 1000ms Timer
  52:main.c        **** volatile char timerflag5000ms = 0;              // Falg für 1000ms Timer
  53:main.c        **** 
  54:main.c        **** volatile int cnt_timer100ms =0;                 // Counter für 100ms Takt
  55:main.c        **** volatile int cnt_timer1000ms =0;                // Counter für 1000ms Takt
  56:main.c        **** volatile int cnt_timer5000ms =0;                // Counter für 5000ms Takt
  57:main.c        **** 
  58:main.c        **** volatile char slider_ready = 0;                         // Boolean, die angibt, ob Slider bereit is
  59:main.c        **** volatile char Measurement_running = 0;                  // Boolean, die angibt, ob bereits eine Mes
  60:main.c        **** int present_Result_saved = 0;                           // Boolean, die angibt, ob zuletzt gemessen
  61:main.c        **** volatile char new_pickup_initialized = 0;               // Boolean, die angibt, dass gerade eine ne
  62:main.c        **** volatile char slider_val_sent = 0;                      // Boolean für Abfrage, ob Slider-Wert ang
  63:main.c        **** volatile char slider_val_received = 0;                  // Boolean für Abfrage, ob Slider-Wert aus
  64:main.c        **** volatile int present_LiveData_plot_refreshed = 0;       // Boolean, die angibt, ob in der momentane
  65:main.c        **** volatile int current_RescaledData_plot_refreshed = 0;   // Boolean, die angibt, ob in der momentane
  66:main.c        **** volatile int STI100_writing = 0;                        // Boolean, die angibt, ob gerade Daten auf
  67:main.c        **** volatile int STI100_write_requested = 0;                // Boolean, die angibt, ob Anfrage auf Schr
  68:main.c        **** volatile int STI100_present_results_saved = 0;          // Boolean, die angibt, dass die zuletzt ge
  69:main.c        **** 
  70:main.c        **** char num_str[20];                               // Hilfvariable, die transformierte Zahl als String
  71:main.c        **** unsigned char *NameOfValuebox;                  // Name der Valuebox für Übertragung neuer Werte
  72:main.c        **** 
  73:main.c        **** int i=0;                                        // Laufvariable
  74:main.c        **** int j=0;                                        // Laufvariable
  75:main.c        **** 
  76:main.c        **** volatile int plot_every_nth = 1;                // gibt an, wie viele Punkt beim Plotten ausgelasse
  77:main.c        **** 
  78:main.c        **** const int Lamella_Logger_Time_s = 1;            // gibt an, in welchen Abständen der Wert des refl
  79:main.c        **** int counter_Lamella_Logger_steps;               // Steps, nach denen Zahlenwert in die .lam Datei g
  80:main.c        **** 
  81:main.c        **** #include "Measurement_Parameters.h"
  82:main.c        **** #include "Laser_Control.h"                      // Funktionen zum Ansteuern des Lasers
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 79


  83:main.c        **** #include "StepperMotor_Control.h"               // Funktionen zum Ansteuern des Schrittmotors
  84:main.c        **** #include "NextionLCD_PlotParameters.h"          // Parameter für Plots
  85:main.c        **** #include "NextionLCD_Communication.h"           // Funktionen für Kommunikation mit dem LCD-Displa
  86:main.c        **** #include "NextionLCD_PlotLiveData.h"            // Funktionen für Plots im Fenster "LiveData"
  87:main.c        **** #include "NextionLCD_PlotScaledData.h"          // Funktionen für Plots im Fenster "ScaledData"
  88:main.c        **** #include "NextionLCD_PlotSettings.h"            // Funktionen für Plots im Fenster "Settings"
  89:main.c        **** #include "Photodiode_Data.h"                    // Funktionen zum Auslesen der Werte der Photodiode
  90:main.c        **** #include "Measurement_Setup.h"                  // Setup der Messung
  91:main.c        **** #include "CY_ISR_Interrupt.h"                   // Interrupt-Funktion zum Einlesen der Slider-Werte
  92:main.c        **** #include "CYISR_Timer1_Interrupt.h"             // Timerfunktion von Timer1
  93:main.c        **** #include "DataLogger.h"                         // Loggen der ADC-Werte
  94:main.c        ****     
  95:main.c        **** float Bin_Number[NumberOfBins];                 // Arrays für Wahrscheinlichkeiten definieren; Dar
  96:main.c        **** float Bin_Lifetime_Probability[NumberOfBins];   // Arrays für Wahrscheinlichkeiten definieren; Dar
  97:main.c        **** 
  98:main.c        **** 
  99:main.c        **** // Soft UART Display Routinen
 100:main.c        **** // Display löschen
 101:main.c        **** void VFDClearDisplay()
 102:main.c        **** {
 3050              		.loc 12 102 0
 3051              		.cfi_startproc
 3052              		@ args = 0, pretend = 0, frame = 0
 3053              		@ frame_needed = 1, uses_anonymous_args = 0
 3054 0000 80B5     		push	{r7, lr}
 3055              		.cfi_def_cfa_offset 8
 3056              		.cfi_offset 7, -8
 3057              		.cfi_offset 14, -4
 3058 0002 00AF     		add	r7, sp, #0
 3059              		.cfi_def_cfa_register 7
 103:main.c        ****             SW_Tx_UART_1_PutChar(0x0E);
 3060              		.loc 12 103 0
 3061 0004 0E20     		movs	r0, #14
 3062 0006 FFF7FEFF 		bl	SW_Tx_UART_1_PutChar
 104:main.c        ****             CyDelay(2);
 3063              		.loc 12 104 0
 3064 000a 0220     		movs	r0, #2
 3065 000c FFF7FEFF 		bl	CyDelay
 105:main.c        ****             SW_Tx_UART_1_PutChar(0x0C);
 3066              		.loc 12 105 0
 3067 0010 0C20     		movs	r0, #12
 3068 0012 FFF7FEFF 		bl	SW_Tx_UART_1_PutChar
 106:main.c        **** }
 3069              		.loc 12 106 0
 3070 0016 80BD     		pop	{r7, pc}
 3071              		.cfi_endproc
 3072              	.LFE89:
 3073              		.size	VFDClearDisplay, .-VFDClearDisplay
 3074              		.section	.text.VFDHome,"ax",%progbits
 3075              		.align	2
 3076              		.global	VFDHome
 3077              		.thumb
 3078              		.thumb_func
 3079              		.type	VFDHome, %function
 3080              	VFDHome:
 3081              	.LFB90:
 107:main.c        **** 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 80


 108:main.c        **** // Cursor in Home Position
 109:main.c        **** void VFDHome()
 110:main.c        **** {
 3082              		.loc 12 110 0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 0
 3085              		@ frame_needed = 1, uses_anonymous_args = 0
 3086 0000 80B5     		push	{r7, lr}
 3087              		.cfi_def_cfa_offset 8
 3088              		.cfi_offset 7, -8
 3089              		.cfi_offset 14, -4
 3090 0002 00AF     		add	r7, sp, #0
 3091              		.cfi_def_cfa_register 7
 111:main.c        ****             SW_Tx_UART_1_PutChar(0x0C);
 3092              		.loc 12 111 0
 3093 0004 0C20     		movs	r0, #12
 3094 0006 FFF7FEFF 		bl	SW_Tx_UART_1_PutChar
 112:main.c        **** }
 3095              		.loc 12 112 0
 3096 000a 80BD     		pop	{r7, pc}
 3097              		.cfi_endproc
 3098              	.LFE90:
 3099              		.size	VFDHome, .-VFDHome
 3100              		.section	.text.VFDCursorOff,"ax",%progbits
 3101              		.align	2
 3102              		.global	VFDCursorOff
 3103              		.thumb
 3104              		.thumb_func
 3105              		.type	VFDCursorOff, %function
 3106              	VFDCursorOff:
 3107              	.LFB91:
 113:main.c        **** 
 114:main.c        **** // Cursor in Home Position
 115:main.c        **** void VFDCursorOff()
 116:main.c        **** {
 3108              		.loc 12 116 0
 3109              		.cfi_startproc
 3110              		@ args = 0, pretend = 0, frame = 0
 3111              		@ frame_needed = 1, uses_anonymous_args = 0
 3112 0000 80B5     		push	{r7, lr}
 3113              		.cfi_def_cfa_offset 8
 3114              		.cfi_offset 7, -8
 3115              		.cfi_offset 14, -4
 3116 0002 00AF     		add	r7, sp, #0
 3117              		.cfi_def_cfa_register 7
 117:main.c        ****             SW_Tx_UART_1_PutChar(0x16);
 3118              		.loc 12 117 0
 3119 0004 1620     		movs	r0, #22
 3120 0006 FFF7FEFF 		bl	SW_Tx_UART_1_PutChar
 118:main.c        **** }
 3121              		.loc 12 118 0
 3122 000a 80BD     		pop	{r7, pc}
 3123              		.cfi_endproc
 3124              	.LFE91:
 3125              		.size	VFDCursorOff, .-VFDCursorOff
 3126              		.section	.rodata
 3127 0109 000000   		.align	2
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 81


 3128              	.LC19:
 3129 010c 53746172 		.ascii	"Start ....\000"
 3129      74202E2E 
 3129      2E2E00
 3130 0117 00       		.align	2
 3131              	.LC20:
 3132 0118 25642D25 		.ascii	"%d-%d.lam\000"
 3132      642E6C61 
 3132      6D00
 3133 0122 0000     		.align	2
 3134              	.LC21:
 3135 0124 74302E74 		.ascii	"t0.txt=\"\000"
 3135      78743D22 
 3135      00
 3136 012d 000000   		.align	2
 3137              	.LC22:
 3138 0130 7700     		.ascii	"w\000"
 3139 0132 0000     		.align	2
 3140              	.LC23:
 3141 0134 72656620 		.ascii	"ref LiveData\000"
 3141      4C697665 
 3141      44617461 
 3141      00
 3142 0141 000000   		.align	2
 3143              	.LC24:
 3144 0144 72656620 		.ascii	"ref ScaledData\000"
 3144      5363616C 
 3144      65644461 
 3144      746100
 3145 0153 00       		.align	2
 3146              	.LC25:
 3147 0154 625F6D65 		.ascii	"b_measure.txt=\"Start Measurement\"\000"
 3147      61737572 
 3147      652E7478 
 3147      743D2253 
 3147      74617274 
 3148 0176 0000     		.align	2
 3149              	.LC26:
 3150 0178 625F6D65 		.ascii	"b_measure.bco=1024\000"
 3150      61737572 
 3150      652E6263 
 3150      6F3D3130 
 3150      323400
 3151 018b 00       		.align	2
 3152              	.LC27:
 3153 018c 72656620 		.ascii	"ref Home\000"
 3153      486F6D65 
 3153      00
 3154 0195 000000   		.align	2
 3155              	.LC28:
 3156 0198 76697320 		.ascii	"vis slider,1\000"
 3156      736C6964 
 3156      65722C31 
 3156      00
 3157 01a5 000000   		.align	2
 3158              	.LC29:
 3159 01a8 70616765 		.ascii	"page Export\000"
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 82


 3159      20457870 
 3159      6F727400 
 3160              		.align	2
 3161              	.LC30:
 3162 01b4 796D6178 		.ascii	"ymax_LiveData.val=\000"
 3162      5F4C6976 
 3162      65446174 
 3162      612E7661 
 3162      6C3D00
 3163 01c7 00       		.align	2
 3164              	.LC31:
 3165 01c8 786D6178 		.ascii	"xmax_LiveData.val=\000"
 3165      5F4C6976 
 3165      65446174 
 3165      612E7661 
 3165      6C3D00
 3166 01db 00       		.align	2
 3167              	.LC32:
 3168 01dc 786D6178 		.ascii	"xmax_Scaled.val=\000"
 3168      5F536361 
 3168      6C65642E 
 3168      76616C3D 
 3168      00
 3169              		.global	__aeabi_dcmple
 3170 01ed 000000   		.align	2
 3171              	.LC33:
 3172 01f0 4E722D25 		.ascii	"Nr-%04d.txt\000"
 3172      3034642E 
 3172      74787400 
 3173              		.align	2
 3174              	.LC35:
 3175 01fc 25303464 		.ascii	"%04d,%0.1f\012\000"
 3175      2C25302E 
 3175      31660A00 
 3176              		.align	2
 3177              	.LC36:
 3178 0208 6E6F5F73 		.ascii	"no_save.val=\000"
 3178      6176652E 
 3178      76616C3D 
 3178      00
 3179 0215 000000   		.align	2
 3180              	.LC34:
 3181 0218 4E6F4D65 		.ascii	"NoMeasurement_au,LifeTime_s\012\000"
 3181      61737572 
 3181      656D656E 
 3181      745F6175 
 3181      2C4C6966 
 3182              		.section	.text.main,"ax",%progbits
 3183              		.align	2
 3184              		.global	main
 3185              		.thumb
 3186              		.thumb_func
 3187              		.type	main, %function
 3188              	main:
 3189              	.LFB92:
 119:main.c        **** 
 120:main.c        **** 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 83


 121:main.c        **** int main()
 122:main.c        **** {
 3190              		.loc 12 122 0
 3191              		.cfi_startproc
 3192              		@ args = 0, pretend = 0, frame = 128
 3193              		@ frame_needed = 1, uses_anonymous_args = 0
 3194 0000 2DE9B043 		push	{r4, r5, r7, r8, r9, lr}
 3195              		.cfi_def_cfa_offset 24
 3196              		.cfi_offset 4, -24
 3197              		.cfi_offset 5, -20
 3198              		.cfi_offset 7, -16
 3199              		.cfi_offset 8, -12
 3200              		.cfi_offset 9, -8
 3201              		.cfi_offset 14, -4
 3202 0004 A2B0     		sub	sp, sp, #136
 3203              		.cfi_def_cfa_offset 160
 3204 0006 02AF     		add	r7, sp, #8
 3205              		.cfi_def_cfa 7, 152
 123:main.c        ****     // INITIALISLISIERUNG 
 124:main.c        ****     
 125:main.c        ****     // char str[80];
 126:main.c        **** 
 127:main.c        ****     // sprintf(str, "Value of Pi = %f", M_PI);
 128:main.c        ****     // puts(str);
 129:main.c        ****     
 130:main.c        ****     // Enable global interrupts -> wichtig: sonst keine Interaktion Touchscreen <-> PSOC
 131:main.c        ****     CyGlobalIntEnable; 
 3206              		.loc 12 131 0
 3207              	@ 131 "main.c" 1
 3208 0008 62B6     		CPSIE   i
 3209              	@ 0 "" 2
 132:main.c        **** 
 133:main.c        ****     // Status-LED an Pin 2.1 an -> zeigt, dass Initialisierung gestartet
 134:main.c        ****     InitLED_ON;
 3210              		.loc 12 134 0
 3211              		.thumb
 3212 000a 0120     		movs	r0, #1
 3213 000c FFF7FEFF 		bl	Pin_LED_Write
 135:main.c        ****     
 136:main.c        ****     // Stewpper und Laser Test
 137:main.c        ****     // TestRotationMove(900);
 138:main.c        ****     
 139:main.c        ****         /* Start the TIA component */
 140:main.c        ****     TIA_1_Start();
 3214              		.loc 12 140 0
 3215 0010 FFF7FEFF 		bl	TIA_1_Start
 141:main.c        ****     /* Set the Resistive feedback to 40k ohms */
 142:main.c        ****     // TIA_1_SetResFB(TIA_1_RES_FEEDBACK_40K);
 143:main.c        ****     /* Set the capacitive feedback to 3.3pF */
 144:main.c        ****     // TIA_1_SetCapFB(TIA_1_CAP_FEEDBACK_3_3PF);
 145:main.c        ****     // Ergebnisarray initialisieren;
 146:main.c        ****     
 147:main.c        ****     PGA_Photo_Start();
 3216              		.loc 12 147 0
 3217 0014 FFF7FEFF 		bl	PGA_Photo_Start
 148:main.c        ****     
 149:main.c        ****     SW_Tx_UART_1_Start();
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 84


 3218              		.loc 12 149 0
 3219 0018 FFF7FEFF 		bl	SW_Tx_UART_1_Start
 150:main.c        ****     
 151:main.c        ****     VFDClearDisplay();
 3220              		.loc 12 151 0
 3221 001c FFF7FEFF 		bl	VFDClearDisplay
 152:main.c        ****     VFDCursorOff();
 3222              		.loc 12 152 0
 3223 0020 FFF7FEFF 		bl	VFDCursorOff
 153:main.c        ****     VFDHome();
 3224              		.loc 12 153 0
 3225 0024 FFF7FEFF 		bl	VFDHome
 154:main.c        ****     
 155:main.c        ****     SW_Tx_UART_1_PutString("Start ....");
 3226              		.loc 12 155 0
 3227 0028 AB48     		ldr	r0, .L196
 3228 002a FFF7FEFF 		bl	SW_Tx_UART_1_PutString
 156:main.c        ****     
 157:main.c        ****     for (i=0;i<1000;i++)
 3229              		.loc 12 157 0
 3230 002e AB4B     		ldr	r3, .L196+4
 3231 0030 0022     		movs	r2, #0
 3232 0032 1A60     		str	r2, [r3]
 3233 0034 10E0     		b	.L143
 3234              	.L144:
 158:main.c        ****     {
 159:main.c        ****         Number[i] = 0;
 3235              		.loc 12 159 0 discriminator 3
 3236 0036 A94B     		ldr	r3, .L196+4
 3237 0038 1B68     		ldr	r3, [r3]
 3238 003a A94A     		ldr	r2, .L196+8
 3239 003c 0021     		movs	r1, #0
 3240 003e 42F82310 		str	r1, [r2, r3, lsl #2]
 160:main.c        ****         Lifetime[i]= 0;
 3241              		.loc 12 160 0 discriminator 3
 3242 0042 A64B     		ldr	r3, .L196+4
 3243 0044 1B68     		ldr	r3, [r3]
 3244 0046 A74A     		ldr	r2, .L196+12
 3245 0048 0021     		movs	r1, #0
 3246 004a 42F82310 		str	r1, [r2, r3, lsl #2]
 157:main.c        ****     {
 3247              		.loc 12 157 0 discriminator 3
 3248 004e A34B     		ldr	r3, .L196+4
 3249 0050 1B68     		ldr	r3, [r3]
 3250 0052 0133     		adds	r3, r3, #1
 3251 0054 A14A     		ldr	r2, .L196+4
 3252 0056 1360     		str	r3, [r2]
 3253              	.L143:
 157:main.c        ****     {
 3254              		.loc 12 157 0 is_stmt 0 discriminator 1
 3255 0058 A04B     		ldr	r3, .L196+4
 3256 005a 1B68     		ldr	r3, [r3]
 3257 005c B3F57A7F 		cmp	r3, #1000
 3258 0060 E9DB     		blt	.L144
 161:main.c        ****     }
 162:main.c        ****     
 163:main.c        ****     // Wahrscheinlichkeitsarray initialisieren
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 85


 164:main.c        ****     for (i=0;i<NumberOfBins;i++)
 3259              		.loc 12 164 0 is_stmt 1
 3260 0062 9E4B     		ldr	r3, .L196+4
 3261 0064 0022     		movs	r2, #0
 3262 0066 1A60     		str	r2, [r3]
 3263 0068 17E0     		b	.L145
 3264              	.L146:
 165:main.c        ****     {
 166:main.c        ****         Bin_Number[i] = i+1;
 3265              		.loc 12 166 0 discriminator 3
 3266 006a 9C4B     		ldr	r3, .L196+4
 3267 006c 1C68     		ldr	r4, [r3]
 3268 006e 9B4B     		ldr	r3, .L196+4
 3269 0070 1B68     		ldr	r3, [r3]
 3270 0072 0133     		adds	r3, r3, #1
 3271 0074 1846     		mov	r0, r3
 3272 0076 FFF7FEFF 		bl	__aeabi_i2f
 3273 007a 0246     		mov	r2, r0
 3274 007c 9A4B     		ldr	r3, .L196+16
 3275 007e 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 167:main.c        ****         Bin_Lifetime_Probability[i]= 0;
 3276              		.loc 12 167 0 discriminator 3
 3277 0082 964B     		ldr	r3, .L196+4
 3278 0084 1B68     		ldr	r3, [r3]
 3279 0086 994A     		ldr	r2, .L196+20
 3280 0088 4FF00001 		mov	r1, #0
 3281 008c 42F82310 		str	r1, [r2, r3, lsl #2]	@ float
 164:main.c        ****     {
 3282              		.loc 12 164 0 discriminator 3
 3283 0090 924B     		ldr	r3, .L196+4
 3284 0092 1B68     		ldr	r3, [r3]
 3285 0094 0133     		adds	r3, r3, #1
 3286 0096 914A     		ldr	r2, .L196+4
 3287 0098 1360     		str	r3, [r2]
 3288              	.L145:
 164:main.c        ****     {
 3289              		.loc 12 164 0 is_stmt 0 discriminator 1
 3290 009a 904B     		ldr	r3, .L196+4
 3291 009c 1B68     		ldr	r3, [r3]
 3292 009e 1D2B     		cmp	r3, #29
 3293 00a0 E3DD     		ble	.L146
 168:main.c        ****     }
 169:main.c        ****     
 170:main.c        ****     //// Counter für Experiment-Nummer nach neuer Programmierung bei "1" starten lassen
 171:main.c        ****     //static const uint8 CYCODE eepromArray[]= { 0x00, 0x00, 0x00, 0x01 };
 172:main.c        ****     // Counter für Experiment-Nummer nach neuer Programmierung bei "0" starten lassen
 173:main.c        ****     static const uint8 CYCODE eepromArray[]= { 0x00, 0x00, 0x00, 0x00 };
 174:main.c        **** 
 175:main.c        ****     // Counter für EEMPROM als uint8 definieren
 176:main.c        ****     uint8 eeprom_cnt;
 177:main.c        ****     // status als Vauriable der Klasse cystatus definieren = Rückgabewert von EEPROM_Write()
 178:main.c        ****     cystatus status;
 179:main.c        ****     // pointer "ptr" definieren
 180:main.c        ****     volatile const uint8 *ptr;
 181:main.c        ****     
 182:main.c        ****     // EEPROM starten
 183:main.c        ****     Emul_EEPROM_Start();
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 86


 3294              		.loc 12 183 0 is_stmt 1
 3295 00a2 FFF7FEFF 		bl	Emul_EEPROM_Start
 184:main.c        **** 
 185:main.c        ****    
 186:main.c        ****     /* Initialize file system */
 187:main.c        ****     FS_Init();
 3296              		.loc 12 187 0
 3297 00a6 FFF7FEFF 		bl	FS_Init
 188:main.c        ****     
 189:main.c        ****     // Nextion TFT Initialisieren und "Home" als Startseite anzeigen
 190:main.c        ****     Init_NextionTFT();
 3298              		.loc 12 190 0
 3299 00aa FFF7FEFF 		bl	Init_NextionTFT
 191:main.c        **** 
 192:main.c        ****     // Interrupt-Funktion für UART_TFT starten bzw. dem Interrupt eine Funktion zuweisen
 193:main.c        ****     Interr_TFT_StartEx(UART_TFT_InterruptFunction);
 3300              		.loc 12 193 0
 3301 00ae 9048     		ldr	r0, .L196+24
 3302 00b0 FFF7FEFF 		bl	Interr_TFT_StartEx
 194:main.c        ****     // Interrupt von Timer1, also "Timer1_Function" mit "seiner" mit Funktion,"Timer1_Interrupt_Fun
 195:main.c        ****     Timer1_Function_StartEx(Timer1_Interrupt_Function);
 3303              		.loc 12 195 0
 3304 00b4 8F48     		ldr	r0, .L196+28
 3305 00b6 FFF7FEFF 		bl	Timer1_Function_StartEx
 196:main.c        **** 
 197:main.c        ****     // Timer starten
 198:main.c        ****     Timer1_Start();
 3306              		.loc 12 198 0
 3307 00ba FFF7FEFF 		bl	Timer1_Start
 199:main.c        ****     
 200:main.c        ****     // ADC bzw. Analog-Digital-Konverter Initialisieren
 201:main.c        ****     Analog_Digital_Converter_Start();
 3308              		.loc 12 201 0
 3309 00be FFF7FEFF 		bl	Analog_Digital_Converter_Start
 202:main.c        ****     Analog_Digital_Converter_StartConvert();
 3310              		.loc 12 202 0
 3311 00c2 FFF7FEFF 		bl	Analog_Digital_Converter_StartConvert
 203:main.c        ****    
 204:main.c        **** //    // Starten des USB-Interface
 205:main.c        **** //    USBUART_PC_Start(0,USBUART_PC_5V_OPERATION);    
 206:main.c        **** //    // Konfiguration vom PC lesen
 207:main.c        **** //    while(USBUART_PC_GetConfiguration() == 0);    
 208:main.c        **** //    // Initialisierung des CDC-Kommunkations-Interface
 209:main.c        **** //    USBUART_PC_CDC_Init();
 210:main.c        ****     // Initialisierung des UART für Memory-Stick
 211:main.c        ****     //UART_Memory_Start();
 212:main.c        ****     
 213:main.c        ****     // Test-LEDs
 214:main.c        ****     LED_slider_val_sent_Write(slider_val_sent);
 3312              		.loc 12 214 0
 3313 00c6 8C4B     		ldr	r3, .L196+32
 3314 00c8 1B78     		ldrb	r3, [r3]
 3315 00ca DBB2     		uxtb	r3, r3
 3316 00cc 1846     		mov	r0, r3
 3317 00ce FFF7FEFF 		bl	LED_slider_val_sent_Write
 215:main.c        ****     LED_slider_val_received_Write(slider_val_received);
 3318              		.loc 12 215 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 87


 3319 00d2 8A4B     		ldr	r3, .L196+36
 3320 00d4 1B78     		ldrb	r3, [r3]
 3321 00d6 DBB2     		uxtb	r3, r3
 3322 00d8 1846     		mov	r0, r3
 3323 00da FFF7FEFF 		bl	LED_slider_val_received_Write
 216:main.c        ****     LED_Measurement_running_Write(1);    
 3324              		.loc 12 216 0
 3325 00de 0120     		movs	r0, #1
 3326 00e0 FFF7FEFF 		bl	LED_Measurement_running_Write
 217:main.c        ****     
 218:main.c        ****     UART_TFT_PutString((char*)"page Home");
 3327              		.loc 12 218 0
 3328 00e4 8648     		ldr	r0, .L196+40
 3329 00e6 FFF7FEFF 		bl	UART_TFT_PutString
 219:main.c        ****     
 220:main.c        ****     CyDelay(300);
 3330              		.loc 12 220 0
 3331 00ea 4FF49670 		mov	r0, #300
 3332 00ee FFF7FEFF 		bl	CyDelay
 221:main.c        ****         
 222:main.c        ****     // Status-LED an Pin 2.1 aus -> zeigt, dass Initialisierung beendet
 223:main.c        ****     InitLED_OFF; 
 3333              		.loc 12 223 0
 3334 00f2 0020     		movs	r0, #0
 3335 00f4 FFF7FEFF 		bl	Pin_LED_Write
 224:main.c        ****     // MoveToHomePosition(); 
 225:main.c        **** 
 226:main.c        ****     // Dummy-Messergenisse für Testphase (Schreiben auf SD-Karte)
 227:main.c        ****     // volatile int Number[] =  { 1, 2, 3, 4, 5, 6, 7, 8};
 228:main.c        ****     // volatile int Lifetime[] = { 42, 534, 244, 213, 422, 33, 767, 13123};
 229:main.c        ****     // NumberOfMeasurements = 8;
 230:main.c        ****     
 231:main.c        ****     //
 232:main.c        ****     // !!! für die folgenden 3 größen:
 233:main.c        ****     //     der Faktor "10" stammt von der Umrechnung des 100ms Counters, der für die Messung 
 234:main.c        ****     //     verantwortlich auf Sekunden
 235:main.c        ****     //
 236:main.c        ****     // "Gnadenfrist" für Lamelle; unterhalb dieser Zeit wird Lamelle als anwesend angenommen,
 237:main.c        ****     // auch wenn das Signal unterhalb des festgelegten Grenzwerts ist.
 238:main.c        ****     counter_Lamella_Relaxation_steps = (int)Lamella_Relaxation_Time_s*SampligCountsPerSecond;
 3336              		.loc 12 238 0
 3337 00f8 0123     		movs	r3, #1
 3338 00fa 0A22     		movs	r2, #10
 3339 00fc 02FB03F3 		mul	r3, r2, r3
 3340 0100 804A     		ldr	r2, .L196+44
 3341 0102 1360     		str	r3, [r2]
 239:main.c        ****     // Maximal erlaubte Lebenszeit definieren
 240:main.c        ****     counter_Maximum_Lamella_Time_steps = (int)(Maximum_Lamella_Time_h*3600*SampligCountsPerSecond);
 3342              		.loc 12 240 0
 3343 0104 4FF07D53 		mov	r3, #1061158912
 3344 0108 1846     		mov	r0, r3
 3345 010a 7F49     		ldr	r1, .L196+48
 3346 010c FFF7FEFF 		bl	__aeabi_fmul
 3347 0110 0346     		mov	r3, r0
 3348 0112 1C46     		mov	r4, r3
 3349 0114 0A23     		movs	r3, #10
 3350 0116 1846     		mov	r0, r3
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 88


 3351 0118 FFF7FEFF 		bl	__aeabi_i2f
 3352 011c 0346     		mov	r3, r0
 3353 011e 2046     		mov	r0, r4
 3354 0120 1946     		mov	r1, r3
 3355 0122 FFF7FEFF 		bl	__aeabi_fmul
 3356 0126 0346     		mov	r3, r0
 3357 0128 1846     		mov	r0, r3
 3358 012a FFF7FEFF 		bl	__aeabi_f2iz
 3359 012e 0246     		mov	r2, r0
 3360 0130 764B     		ldr	r3, .L196+52
 3361 0132 1A60     		str	r2, [r3]
 241:main.c        ****     // Anzahl der Schritte, die das Signal den Schwellwert unterschreiten muss
 242:main.c        ****     counter_Rupture_Confirmation_Target = Rupture_Confirmation_Time_s*SampligCountsPerSecond;
 3362              		.loc 12 242 0
 3363 0134 0A23     		movs	r3, #10
 3364 0136 1846     		mov	r0, r3
 3365 0138 FFF7FEFF 		bl	__aeabi_i2f
 3366 013c 0246     		mov	r2, r0
 3367 013e 4FF07C53 		mov	r3, #1056964608
 3368 0142 1046     		mov	r0, r2
 3369 0144 1946     		mov	r1, r3
 3370 0146 FFF7FEFF 		bl	__aeabi_fmul
 3371 014a 0346     		mov	r3, r0
 3372 014c 1846     		mov	r0, r3
 3373 014e FFF7FEFF 		bl	__aeabi_f2iz
 3374 0152 0246     		mov	r2, r0
 3375 0154 6E4B     		ldr	r3, .L196+56
 3376 0156 1A60     		str	r2, [r3]
 243:main.c        ****     // Counts festlegen, nach denen oberhalb einer gewissen Grenzzeit in das log-File geschrieben w
 244:main.c        ****     counter_Lamella_Logger_steps = Lamella_Logger_Time_s*SampligCountsPerSecond;
 3377              		.loc 12 244 0
 3378 0158 0123     		movs	r3, #1
 3379 015a 0A22     		movs	r2, #10
 3380 015c 02FB03F3 		mul	r3, r2, r3
 3381 0160 6C4A     		ldr	r2, .L196+60
 3382 0162 1360     		str	r3, [r2]
 245:main.c        ****     
 246:main.c        ****     // Motor initialisieren
 247:main.c        ****     Init_Stepper();
 3383              		.loc 12 247 0
 3384 0164 FFF7FEFF 		bl	Init_Stepper
 248:main.c        ****     
 249:main.c        ****   
 250:main.c        ****     // ##################################################
 251:main.c        ****     // Testzwecke
 252:main.c        ****     int k;
 253:main.c        ****     for (k=0; k <10; k++)
 3385              		.loc 12 253 0
 3386 0168 0023     		movs	r3, #0
 3387 016a FB67     		str	r3, [r7, #124]
 3388 016c 1EE0     		b	.L147
 3389              	.L148:
 254:main.c        ****     {
 255:main.c        ****         // LED togglen, zum Test, ob der Timer läuft
 256:main.c        ****         Pin_LED_Write(!Pin_LED_Read()); 
 3390              		.loc 12 256 0 discriminator 3
 3391 016e FFF7FEFF 		bl	Pin_LED_Read
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 89


 3392 0172 0346     		mov	r3, r0
 3393 0174 002B     		cmp	r3, #0
 3394 0176 0CBF     		ite	eq
 3395 0178 0123     		moveq	r3, #1
 3396 017a 0023     		movne	r3, #0
 3397 017c DBB2     		uxtb	r3, r3
 3398 017e 1846     		mov	r0, r3
 3399 0180 FFF7FEFF 		bl	Pin_LED_Write
 257:main.c        ****         // LED togglen, zum Test, ob der Timer läuft
 258:main.c        ****         CyDelay(50);
 3400              		.loc 12 258 0 discriminator 3
 3401 0184 3220     		movs	r0, #50
 3402 0186 FFF7FEFF 		bl	CyDelay
 259:main.c        ****         Pin_LED_Write(!Pin_LED_Read()); 
 3403              		.loc 12 259 0 discriminator 3
 3404 018a FFF7FEFF 		bl	Pin_LED_Read
 3405 018e 0346     		mov	r3, r0
 3406 0190 002B     		cmp	r3, #0
 3407 0192 0CBF     		ite	eq
 3408 0194 0123     		moveq	r3, #1
 3409 0196 0023     		movne	r3, #0
 3410 0198 DBB2     		uxtb	r3, r3
 3411 019a 1846     		mov	r0, r3
 3412 019c FFF7FEFF 		bl	Pin_LED_Write
 260:main.c        ****         // LED togglen, zum Test, ob der Timer läuft
 261:main.c        ****         CyDelay(50);
 3413              		.loc 12 261 0 discriminator 3
 3414 01a0 3220     		movs	r0, #50
 3415 01a2 FFF7FEFF 		bl	CyDelay
 253:main.c        ****     {
 3416              		.loc 12 253 0 discriminator 3
 3417 01a6 FB6F     		ldr	r3, [r7, #124]
 3418 01a8 0133     		adds	r3, r3, #1
 3419 01aa FB67     		str	r3, [r7, #124]
 3420              	.L147:
 253:main.c        ****     {
 3421              		.loc 12 253 0 is_stmt 0 discriminator 1
 3422 01ac FB6F     		ldr	r3, [r7, #124]
 3423 01ae 092B     		cmp	r3, #9
 3424 01b0 DDDD     		ble	.L148
 3425              	.L193:
 262:main.c        ****     }
 263:main.c        **** 
 264:main.c        **** //    while (1)
 265:main.c        **** //    {
 266:main.c        **** //        MoveTo(3200, RIGHT);  // = volle Umdrehung im 16tel-Schritt Betrieb
 267:main.c        **** //        CyDelay(1000);
 268:main.c        **** //        MoveTo(3200, LEFT);  // = volle Umdrehung im 16tel-Schritt Betrieb
 269:main.c        **** //        CyDelay(1000);
 270:main.c        **** //    }
 271:main.c        ****     // so startet eine "Messung" unmittelbar nach dem Programmieren --> schneller Test mit wenig Wi
 272:main.c        ****     //Measurement_running = 1;
 273:main.c        ****     //NumberOfMeasurements = 2;
 274:main.c        ****     // ##################################################
 275:main.c        **** 
 276:main.c        ****     // MAINLOOP
 277:main.c        ****     for(;;)
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 90


 278:main.c        ****     {       
 279:main.c        ****     // ***  
 280:main.c        ****     Analog_Digital_Converter_IsEndConversion(Analog_Digital_Converter_WAIT_FOR_RESULT);
 3426              		.loc 12 280 0 is_stmt 1
 3427 01b2 0020     		movs	r0, #0
 3428 01b4 FFF7FEFF 		bl	Analog_Digital_Converter_IsEndConversion
 281:main.c        ****     ADC_value = Analog_Digital_Converter_GetResult16();    
 3429              		.loc 12 281 0
 3430 01b8 FFF7FEFF 		bl	Analog_Digital_Converter_GetResult16
 3431 01bc 0346     		mov	r3, r0
 3432 01be 1A46     		mov	r2, r3
 3433 01c0 554B     		ldr	r3, .L196+64
 3434 01c2 1A60     		str	r2, [r3]
 282:main.c        ****         
 283:main.c        ****     LED_slider_val_sent_Write(slider_val_sent);
 3435              		.loc 12 283 0
 3436 01c4 4C4B     		ldr	r3, .L196+32
 3437 01c6 1B78     		ldrb	r3, [r3]
 3438 01c8 DBB2     		uxtb	r3, r3
 3439 01ca 1846     		mov	r0, r3
 3440 01cc FFF7FEFF 		bl	LED_slider_val_sent_Write
 284:main.c        ****     LED_slider_val_received_Write(slider_val_received);
 3441              		.loc 12 284 0
 3442 01d0 4A4B     		ldr	r3, .L196+36
 3443 01d2 1B78     		ldrb	r3, [r3]
 3444 01d4 DBB2     		uxtb	r3, r3
 3445 01d6 1846     		mov	r0, r3
 3446 01d8 FFF7FEFF 		bl	LED_slider_val_received_Write
 285:main.c        ****     LED_Measurement_running_Write(Measurement_running);
 3447              		.loc 12 285 0
 3448 01dc 4F4B     		ldr	r3, .L196+68
 3449 01de 1B78     		ldrb	r3, [r3]
 3450 01e0 DBB2     		uxtb	r3, r3
 3451 01e2 1846     		mov	r0, r3
 3452 01e4 FFF7FEFF 		bl	LED_Measurement_running_Write
 286:main.c        **** 
 287:main.c        ****     if (timerflag100ms)
 3453              		.loc 12 287 0
 3454 01e8 4D4B     		ldr	r3, .L196+72
 3455 01ea 1B78     		ldrb	r3, [r3]
 3456 01ec DBB2     		uxtb	r3, r3
 3457 01ee 002B     		cmp	r3, #0
 3458 01f0 00F04982 		beq	.L149
 288:main.c        ****     {
 289:main.c        ****         timerflag100ms = 0;
 3459              		.loc 12 289 0
 3460 01f4 4A4B     		ldr	r3, .L196+72
 3461 01f6 0022     		movs	r2, #0
 3462 01f8 1A70     		strb	r2, [r3]
 290:main.c        ****         // Wenn Messung noch nicht gestartet wurde
 291:main.c        ****         if (Measurement_running == 1)
 3463              		.loc 12 291 0
 3464 01fa 484B     		ldr	r3, .L196+68
 3465 01fc 1B78     		ldrb	r3, [r3]
 3466 01fe DBB2     		uxtb	r3, r3
 3467 0200 012B     		cmp	r3, #1
 3468 0202 40F04082 		bne	.L149
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 91


 292:main.c        ****         {
 293:main.c        ****             
 294:main.c        ****             // LED togglen, zum Test, ob der Timer läuft
 295:main.c        ****             Pin_LED_Write(!Pin_LED_Read()); 
 3469              		.loc 12 295 0
 3470 0206 FFF7FEFF 		bl	Pin_LED_Read
 3471 020a 0346     		mov	r3, r0
 3472 020c 002B     		cmp	r3, #0
 3473 020e 0CBF     		ite	eq
 3474 0210 0123     		moveq	r3, #1
 3475 0212 0023     		movne	r3, #0
 3476 0214 DBB2     		uxtb	r3, r3
 3477 0216 1846     		mov	r0, r3
 3478 0218 FFF7FEFF 		bl	Pin_LED_Write
 296:main.c        ****             
 297:main.c        ****             // ADC einlesen
 298:main.c        ****             // Warten bis der AD-Wandler fertig ist
 299:main.c        ****             Analog_Digital_Converter_IsEndConversion(Analog_Digital_Converter_WAIT_FOR_RESULT);
 3479              		.loc 12 299 0
 3480 021c 0020     		movs	r0, #0
 3481 021e FFF7FEFF 		bl	Analog_Digital_Converter_IsEndConversion
 300:main.c        ****             // Ergebnis einlesen und als ADC_value abspeichern
 301:main.c        ****             // 4095 entsprechen 2.048V
 302:main.c        ****             ADC_value = Analog_Digital_Converter_GetResult16();    
 3482              		.loc 12 302 0
 3483 0222 FFF7FEFF 		bl	Analog_Digital_Converter_GetResult16
 3484 0226 0346     		mov	r3, r0
 3485 0228 1A46     		mov	r2, r3
 3486 022a 3B4B     		ldr	r3, .L196+64
 3487 022c 1A60     		str	r2, [r3]
 303:main.c        ****             
 304:main.c        ****             // ##################################################
 305:main.c        ****             // ##################################################
 306:main.c        ****             // ##################################################
 307:main.c        ****             // !!!! NEUER LOGGER !!!!!!!!
 308:main.c        ****             //
 309:main.c        ****             // Daten für jede einzelne Lamelle loggen loggen
 310:main.c        ****             // 
 311:main.c        ****             // Testwert des ADC
 312:main.c        **** //            ADC_value = 1000;
 313:main.c        **** ////            // Test, damit Abbruch der Messung nach 3s
 314:main.c        **** //            if (counter_Timer1_steps > 1800*10)
 315:main.c        **** //            {
 316:main.c        **** //                ADC_value = 0;
 317:main.c        **** //            } 
 318:main.c        ****             // ##################################################
 319:main.c        ****             // ##################################################
 320:main.c        ****             // ##################################################
 321:main.c        ****             
 322:main.c        ****             //
 323:main.c        ****             // Name der Logger-Datei setzen und sie öffnen
 324:main.c        ****             //
 325:main.c        ****             if (bool_NewLamellaFileNameSet == 0)
 3488              		.loc 12 325 0
 3489 022e 3D4B     		ldr	r3, .L196+76
 3490 0230 1B68     		ldr	r3, [r3]
 3491 0232 002B     		cmp	r3, #0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 92


 3492 0234 2FD1     		bne	.L150
 326:main.c        ****             {
 327:main.c        ****                 // Pointer auf die Adresse des letzten (= 4.) Eintrag des EEPROM-Arrays setzen
 328:main.c        ****                 ptr = &eepromArray[3];
 3493              		.loc 12 328 0
 3494 0236 3C4B     		ldr	r3, .L196+80
 3495 0238 3B67     		str	r3, [r7, #112]
 329:main.c        ****                 // Dereferenzieren des Pointers -> Wert, auf den "ptr" zeigt in "eeprom_cnt" abspei
 330:main.c        ****                 eeprom_cnt = *ptr;
 3496              		.loc 12 330 0
 3497 023a 3B6F     		ldr	r3, [r7, #112]
 3498 023c 1B78     		ldrb	r3, [r3]
 3499 023e DBB2     		uxtb	r3, r3
 3500 0240 87F85F30 		strb	r3, [r7, #95]
 331:main.c        ****                 // Name der Datei festlegen, in die Reflektivitäten der aktuellen Lamelle geschrie
 332:main.c        ****                 sprintf((char*)FileNameCurrentLamellaFile, "%d-%d.lam", eeprom_cnt, (int)(counter_L
 3501              		.loc 12 332 0
 3502 0244 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 3503 0248 1A46     		mov	r2, r3
 3504 024a 384B     		ldr	r3, .L196+84
 3505 024c 1B68     		ldr	r3, [r3]
 3506 024e 0133     		adds	r3, r3, #1
 3507 0250 3748     		ldr	r0, .L196+88
 3508 0252 3849     		ldr	r1, .L196+92
 3509 0254 FFF7FEFF 		bl	sprintf
 333:main.c        ****                 UART_TFT_PutString("t0.txt=\""); 
 3510              		.loc 12 333 0
 3511 0258 3748     		ldr	r0, .L196+96
 3512 025a FFF7FEFF 		bl	UART_TFT_PutString
 334:main.c        ****                 UART_TFT_PutString((char*)FileNameCurrentLamellaFile);
 3513              		.loc 12 334 0
 3514 025e 3448     		ldr	r0, .L196+88
 3515 0260 FFF7FEFF 		bl	UART_TFT_PutString
 335:main.c        ****                 UART_TFT_PutString((char*)"\"");
 3516              		.loc 12 335 0
 3517 0264 3548     		ldr	r0, .L196+100
 3518 0266 FFF7FEFF 		bl	UART_TFT_PutString
 336:main.c        ****                 UART_TFT_PutChar(0xFF);
 3519              		.loc 12 336 0
 3520 026a FF20     		movs	r0, #255
 3521 026c FFF7FEFF 		bl	UART_TFT_PutChar
 337:main.c        ****                 UART_TFT_PutChar(0xFF);  
 3522              		.loc 12 337 0
 3523 0270 FF20     		movs	r0, #255
 3524 0272 FFF7FEFF 		bl	UART_TFT_PutChar
 338:main.c        ****                 UART_TFT_PutChar(0xFF);
 3525              		.loc 12 338 0
 3526 0276 FF20     		movs	r0, #255
 3527 0278 FFF7FEFF 		bl	UART_TFT_PutChar
 339:main.c        ****                 // Logger-File zum Schreiben öffnen
 340:main.c        ****                 FileNameLogger = FS_FOpen(FileNameCurrentLamellaFile, "w");  
 3528              		.loc 12 340 0
 3529 027c 2C48     		ldr	r0, .L196+88
 3530 027e 3049     		ldr	r1, .L196+104
 3531 0280 FFF7FEFF 		bl	FS_FOpen
 3532 0284 0246     		mov	r2, r0
 3533 0286 2F4B     		ldr	r3, .L196+108
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 93


 3534 0288 1A60     		str	r2, [r3]
 341:main.c        ****                 CyDelay(20);
 3535              		.loc 12 341 0
 3536 028a 1420     		movs	r0, #20
 3537 028c FFF7FEFF 		bl	CyDelay
 342:main.c        **** 
 343:main.c        ****                 // Sicherstellen, dass der Dateiname nur einmal geschrieben wird
 344:main.c        ****                 bool_NewLamellaFileNameSet = 1;
 3538              		.loc 12 344 0
 3539 0290 244B     		ldr	r3, .L196+76
 3540 0292 0122     		movs	r2, #1
 3541 0294 1A60     		str	r2, [r3]
 3542              	.L150:
 345:main.c        ****             }
 346:main.c        ****             //
 347:main.c        ****             // Abspeichern von Zeit und Reflektivität im geöffneteb ".lam"-File mit passendem Nam
 348:main.c        ****             // wird nur einmal geöffnet, wenn der Dateiname gesetzt wird; geschlossen, wenn nächs
 349:main.c        ****             // Lamelle oder Messung gestoppt
 350:main.c        ****             //
 351:main.c        ****             IntensityLogger_ONE_Channel(counter_Timer1_steps, ADC_value);        
 3543              		.loc 12 351 0
 3544 0296 2C4B     		ldr	r3, .L196+112
 3545 0298 1A68     		ldr	r2, [r3]
 3546 029a 1F4B     		ldr	r3, .L196+64
 3547 029c 1B68     		ldr	r3, [r3]
 3548 029e 1046     		mov	r0, r2
 3549 02a0 1946     		mov	r1, r3
 3550 02a2 FFF7FEFF 		bl	IntensityLogger_ONE_Channel
 352:main.c        ****             
 353:main.c        ****             
 354:main.c        ****             // Wenn maximal erlaubte Lebensdauer überschritten ist, so tun als ob Lamelle gerissen
 355:main.c        ****             // den Wert des ADC auf "0" setzen
 356:main.c        ****             if (counter_Timer1_steps >= counter_Maximum_Lamella_Time_steps)
 3551              		.loc 12 356 0
 3552 02a6 284B     		ldr	r3, .L196+112
 3553 02a8 1A68     		ldr	r2, [r3]
 3554 02aa 184B     		ldr	r3, .L196+52
 3555 02ac 1B68     		ldr	r3, [r3]
 3556 02ae 9A42     		cmp	r2, r3
 3557 02b0 02DB     		blt	.L151
 357:main.c        ****             {
 358:main.c        ****                 ADC_value = 0;
 3558              		.loc 12 358 0
 3559 02b2 194B     		ldr	r3, .L196+64
 3560 02b4 0022     		movs	r2, #0
 3561 02b6 1A60     		str	r2, [r3]
 3562              	.L151:
 359:main.c        ****                 // Abriss der Lamelle bestätigt
 360:main.c        ****                 // bool_Rupture_Confirmed = 1;
 361:main.c        ****             }
 362:main.c        **** 
 363:main.c        ****             // Wenn ADC-Wert oberhalb des benötigten Grenzwertes ist -> Lamelle noch da
 364:main.c        ****             if (ADC_value > PresenceThreshold)
 3563              		.loc 12 364 0
 3564 02b8 174B     		ldr	r3, .L196+64
 3565 02ba 1B68     		ldr	r3, [r3]
 3566 02bc 5A2B     		cmp	r3, #90
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 94


 3567 02be 49DD     		ble	.L152
 365:main.c        ****             {
 366:main.c        ****                 // Counter für Anwesenheit der Lamelle inkrementieren
 367:main.c        ****                 counter_Timer1_steps = counter_Timer1_steps + 1;
 3568              		.loc 12 367 0
 3569 02c0 214B     		ldr	r3, .L196+112
 3570 02c2 1B68     		ldr	r3, [r3]
 3571 02c4 0133     		adds	r3, r3, #1
 3572 02c6 204A     		ldr	r2, .L196+112
 3573 02c8 1360     		str	r3, [r2]
 368:main.c        ****                 
 369:main.c        ****                 // Lamelle ist nicht(!) abgerissen, sobald wieder einmal Wert oberhalb des Grenzwer
 370:main.c        ****                 bool_Rupture_Confirmed = 0;
 3574              		.loc 12 370 0
 3575 02ca 204B     		ldr	r3, .L196+116
 3576 02cc 0022     		movs	r2, #0
 3577 02ce 1A60     		str	r2, [r3]
 371:main.c        ****                 // Zähler für Lamellenabriss zurücksetzen
 372:main.c        ****                 counter_Rupture_Confirmation = 0;
 3578              		.loc 12 372 0
 3579 02d0 1F4B     		ldr	r3, .L196+120
 3580 02d2 0022     		movs	r2, #0
 3581 02d4 1A60     		str	r2, [r3]
 3582 02d6 C0E1     		b	.L153
 3583              	.L197:
 3584              		.align	2
 3585              	.L196:
 3586 02d8 0C010000 		.word	.LC19
 3587 02dc 00000000 		.word	i
 3588 02e0 00000000 		.word	Number
 3589 02e4 00000000 		.word	Lifetime
 3590 02e8 00000000 		.word	Bin_Number
 3591 02ec 00000000 		.word	Bin_Lifetime_Probability
 3592 02f0 00000000 		.word	UART_TFT_InterruptFunction
 3593 02f4 00000000 		.word	Timer1_Interrupt_Function
 3594 02f8 00000000 		.word	slider_val_sent
 3595 02fc 00000000 		.word	slider_val_received
 3596 0300 20000000 		.word	.LC0
 3597 0304 00000000 		.word	counter_Lamella_Relaxation_steps
 3598 0308 00006145 		.word	1163984896
 3599 030c 00000000 		.word	counter_Maximum_Lamella_Time_steps
 3600 0310 00000000 		.word	counter_Rupture_Confirmation_Target
 3601 0314 00000000 		.word	counter_Lamella_Logger_steps
 3602 0318 00000000 		.word	ADC_value
 3603 031c 00000000 		.word	Measurement_running
 3604 0320 00000000 		.word	timerflag100ms
 3605 0324 00000000 		.word	bool_NewLamellaFileNameSet
 3606 0328 3B020000 		.word	eepromArray.9123+3
 3607 032c 00000000 		.word	counter_Lamella_Number
 3608 0330 00000000 		.word	FileNameCurrentLamellaFile
 3609 0334 18010000 		.word	.LC20
 3610 0338 24010000 		.word	.LC21
 3611 033c 80000000 		.word	.LC7
 3612 0340 30010000 		.word	.LC22
 3613 0344 00000000 		.word	FileNameLogger
 3614 0348 00000000 		.word	counter_Timer1_steps
 3615 034c 00000000 		.word	bool_Rupture_Confirmed
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 95


 3616 0350 00000000 		.word	counter_Rupture_Confirmation
 3617              	.L152:
 373:main.c        ****                 
 374:main.c        ****                 // Testausgabe des Aktuellen Zeitzählerstands in eine Textbox
 375:main.c        **** //////                UART_TFT_PutString((char*)"t1.txt=");
 376:main.c        **** //////                UART_TFT_PutString((char*)"\"");
 377:main.c        **** //////                // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 378:main.c        **** //////                itoa((int)counter_Timer1_steps, num_str, 10);
 379:main.c        **** //////                UART_TFT_PutString(num_str);
 380:main.c        **** //////                UART_TFT_PutString((char*)"\"");
 381:main.c        **** //////                // Ende der Eingabe markieren
 382:main.c        **** //////                UART_TFT_PutChar(0xff);
 383:main.c        **** //////                UART_TFT_PutChar(0xff);
 384:main.c        **** //////                UART_TFT_PutChar(0xff); 
 385:main.c        ****             }
 386:main.c        ****             // Wenn der Wert zwar unterhalb dem benötigten Grenzwert ist, aber gleichzeitig die La
 387:main.c        ****             // noch nich relaxiert ist, also noch einschwingen muss;
 388:main.c        ****             else if ((counter_Timer1_steps < counter_Lamella_Relaxation_steps) & (bool_Rupture_Conf
 3618              		.loc 12 388 0
 3619 0354 9A4B     		ldr	r3, .L198
 3620 0356 1A68     		ldr	r2, [r3]
 3621 0358 9A4B     		ldr	r3, .L198+4
 3622 035a 1B68     		ldr	r3, [r3]
 3623 035c 9A42     		cmp	r2, r3
 3624 035e B4BF     		ite	lt
 3625 0360 0123     		movlt	r3, #1
 3626 0362 0023     		movge	r3, #0
 3627 0364 DAB2     		uxtb	r2, r3
 3628 0366 984B     		ldr	r3, .L198+8
 3629 0368 1B68     		ldr	r3, [r3]
 3630 036a 002B     		cmp	r3, #0
 3631 036c 0CBF     		ite	eq
 3632 036e 0123     		moveq	r3, #1
 3633 0370 0023     		movne	r3, #0
 3634 0372 DBB2     		uxtb	r3, r3
 3635 0374 1340     		ands	r3, r3, r2
 3636 0376 DBB2     		uxtb	r3, r3
 3637 0378 002B     		cmp	r3, #0
 3638 037a 0BD0     		beq	.L154
 389:main.c        ****             {
 390:main.c        ****                 // so tun, also ob das Signal schon da wäre und einfach den Counter inkrementieren
 391:main.c        ****                 // Counter für Anwesenheit der Lamelle inkrementieren
 392:main.c        ****                 counter_Timer1_steps = counter_Timer1_steps + 1; 
 3639              		.loc 12 392 0
 3640 037c 904B     		ldr	r3, .L198
 3641 037e 1B68     		ldr	r3, [r3]
 3642 0380 0133     		adds	r3, r3, #1
 3643 0382 8F4A     		ldr	r2, .L198
 3644 0384 1360     		str	r3, [r2]
 393:main.c        ****                 // Lamelle ist nicht(!) abgerissen, sobald wieder einmal Wert oberhalb des Grenzwer
 394:main.c        ****                 bool_Rupture_Confirmed = 0;
 3645              		.loc 12 394 0
 3646 0386 904B     		ldr	r3, .L198+8
 3647 0388 0022     		movs	r2, #0
 3648 038a 1A60     		str	r2, [r3]
 395:main.c        ****                 // Zähler für Lamellenabriss zurücksetzen
 396:main.c        ****                 counter_Rupture_Confirmation = 0;
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 96


 3649              		.loc 12 396 0
 3650 038c 8F4B     		ldr	r3, .L198+12
 3651 038e 0022     		movs	r2, #0
 3652 0390 1A60     		str	r2, [r3]
 3653 0392 62E1     		b	.L153
 3654              	.L154:
 397:main.c        ****             }
 398:main.c        ****             // Wenn ADC-Wert zwar unterhalb des benötigten Grenzwertes aber und Lamellenabriss noc
 399:main.c        ****             else if ((ADC_value < PresenceThreshold) & (bool_Rupture_Confirmed == 0) & (counter_Tim
 3655              		.loc 12 399 0
 3656 0394 8E4B     		ldr	r3, .L198+16
 3657 0396 1B68     		ldr	r3, [r3]
 3658 0398 592B     		cmp	r3, #89
 3659 039a D4BF     		ite	le
 3660 039c 0123     		movle	r3, #1
 3661 039e 0023     		movgt	r3, #0
 3662 03a0 DAB2     		uxtb	r2, r3
 3663 03a2 894B     		ldr	r3, .L198+8
 3664 03a4 1B68     		ldr	r3, [r3]
 3665 03a6 002B     		cmp	r3, #0
 3666 03a8 0CBF     		ite	eq
 3667 03aa 0123     		moveq	r3, #1
 3668 03ac 0023     		movne	r3, #0
 3669 03ae DBB2     		uxtb	r3, r3
 3670 03b0 1340     		ands	r3, r3, r2
 3671 03b2 DBB2     		uxtb	r3, r3
 3672 03b4 1946     		mov	r1, r3
 3673 03b6 824B     		ldr	r3, .L198
 3674 03b8 1A68     		ldr	r2, [r3]
 3675 03ba 824B     		ldr	r3, .L198+4
 3676 03bc 1B68     		ldr	r3, [r3]
 3677 03be 9A42     		cmp	r2, r3
 3678 03c0 ACBF     		ite	ge
 3679 03c2 0123     		movge	r3, #1
 3680 03c4 0023     		movlt	r3, #0
 3681 03c6 DBB2     		uxtb	r3, r3
 3682 03c8 0B40     		ands	r3, r3, r1
 3683 03ca 002B     		cmp	r3, #0
 3684 03cc 1BD0     		beq	.L155
 400:main.c        ****             {
 401:main.c        ****                 // so tun, also ob das Signal schon da wäre und einfach den Counter inkrementieren
 402:main.c        ****                 // Counter für Anwesenheit der Lamelle inkrementieren
 403:main.c        ****                 counter_Timer1_steps = counter_Timer1_steps + 1;   
 3685              		.loc 12 403 0
 3686 03ce 7C4B     		ldr	r3, .L198
 3687 03d0 1B68     		ldr	r3, [r3]
 3688 03d2 0133     		adds	r3, r3, #1
 3689 03d4 7A4A     		ldr	r2, .L198
 3690 03d6 1360     		str	r3, [r2]
 404:main.c        ****                 // Zähler für Lamellenabriss hochzählen
 405:main.c        ****                 counter_Rupture_Confirmation = counter_Rupture_Confirmation + 1;
 3691              		.loc 12 405 0
 3692 03d8 7C4B     		ldr	r3, .L198+12
 3693 03da 1B68     		ldr	r3, [r3]
 3694 03dc 0133     		adds	r3, r3, #1
 3695 03de 7B4A     		ldr	r2, .L198+12
 3696 03e0 1360     		str	r3, [r2]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 97


 406:main.c        ****                 if (counter_Rupture_Confirmation == counter_Rupture_Confirmation_Target)
 3697              		.loc 12 406 0
 3698 03e2 7A4B     		ldr	r3, .L198+12
 3699 03e4 1A68     		ldr	r2, [r3]
 3700 03e6 7B4B     		ldr	r3, .L198+20
 3701 03e8 1B68     		ldr	r3, [r3]
 3702 03ea 9A42     		cmp	r2, r3
 3703 03ec 40F03581 		bne	.L153
 407:main.c        ****                 {
 408:main.c        ****                     // Abriss der Lamelle bestätigt
 409:main.c        ****                     bool_Rupture_Confirmed = 1;
 3704              		.loc 12 409 0
 3705 03f0 754B     		ldr	r3, .L198+8
 3706 03f2 0122     		movs	r2, #1
 3707 03f4 1A60     		str	r2, [r3]
 410:main.c        ****                     // Counter für Lebenszeit der Lamelle auf den Wert bei der ersten Grenzwert-Un
 411:main.c        ****                     counter_Timer1_steps = counter_Timer1_steps - counter_Rupture_Confirmation_Targ
 3708              		.loc 12 411 0
 3709 03f6 724B     		ldr	r3, .L198
 3710 03f8 1A68     		ldr	r2, [r3]
 3711 03fa 764B     		ldr	r3, .L198+20
 3712 03fc 1B68     		ldr	r3, [r3]
 3713 03fe D31A     		subs	r3, r2, r3
 3714 0400 6F4A     		ldr	r2, .L198
 3715 0402 1360     		str	r3, [r2]
 3716 0404 29E1     		b	.L153
 3717              	.L155:
 412:main.c        ****                 }
 413:main.c        ****             }
 414:main.c        ****             // Wenn ADC-Wert unterhalb des benötigten Grenzwertes ist und Lamellenabriss bestätig
 415:main.c        ****             else if ((ADC_value < PresenceThreshold) & (bool_Rupture_Confirmed == 1))
 3718              		.loc 12 415 0
 3719 0406 724B     		ldr	r3, .L198+16
 3720 0408 1B68     		ldr	r3, [r3]
 3721 040a 592B     		cmp	r3, #89
 3722 040c D4BF     		ite	le
 3723 040e 0123     		movle	r3, #1
 3724 0410 0023     		movgt	r3, #0
 3725 0412 DAB2     		uxtb	r2, r3
 3726 0414 6C4B     		ldr	r3, .L198+8
 3727 0416 1B68     		ldr	r3, [r3]
 3728 0418 012B     		cmp	r3, #1
 3729 041a 0CBF     		ite	eq
 3730 041c 0123     		moveq	r3, #1
 3731 041e 0023     		movne	r3, #0
 3732 0420 DBB2     		uxtb	r3, r3
 3733 0422 1340     		ands	r3, r3, r2
 3734 0424 DBB2     		uxtb	r3, r3
 3735 0426 002B     		cmp	r3, #0
 3736 0428 00F01781 		beq	.L153
 416:main.c        ****             {
 417:main.c        ****                 // nächste Lamelle ist nicht(!) abgerissen
 418:main.c        ****                 bool_Rupture_Confirmed = 0;
 3737              		.loc 12 418 0
 3738 042c 664B     		ldr	r3, .L198+8
 3739 042e 0022     		movs	r2, #0
 3740 0430 1A60     		str	r2, [r3]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 98


 419:main.c        ****                 // Zähler für Lamellenabriss zurücksetzen
 420:main.c        ****                 counter_Rupture_Confirmation = 0;
 3741              		.loc 12 420 0
 3742 0432 664B     		ldr	r3, .L198+12
 3743 0434 0022     		movs	r2, #0
 3744 0436 1A60     		str	r2, [r3]
 421:main.c        ****                 // Momentanes File des Datenloggers schliessen
 422:main.c        ****                 CloseLoggerFile();
 3745              		.loc 12 422 0
 3746 0438 FFF7FEFF 		bl	CloseLoggerFile
 423:main.c        ****                 // An Datenlogger übergeben, dass der Name für die als nächste abgeholte Lamelle
 424:main.c        ****                 bool_NewLamellaFileNameSet = 0;                
 3747              		.loc 12 424 0
 3748 043c 664B     		ldr	r3, .L198+24
 3749 043e 0022     		movs	r2, #0
 3750 0440 1A60     		str	r2, [r3]
 425:main.c        ****                 
 426:main.c        ****                 // gerade erhaltenes Ergebnis im Ergebnisarray speichern bzw. ablegen
 427:main.c        ****                 if (present_Result_saved == 0)
 3751              		.loc 12 427 0
 3752 0442 664B     		ldr	r3, .L198+28
 3753 0444 1B68     		ldr	r3, [r3]
 3754 0446 002B     		cmp	r3, #0
 3755 0448 4CD1     		bne	.L157
 428:main.c        ****                 {
 429:main.c        ****                     // Bool, die bewirkt, dass der Wert nur einmal(!) in Ergebnisarray geschriebn w
 430:main.c        ****                     present_Result_saved = 1;
 3756              		.loc 12 430 0
 3757 044a 644B     		ldr	r3, .L198+28
 3758 044c 0122     		movs	r2, #1
 3759 044e 1A60     		str	r2, [r3]
 431:main.c        ****                     
 432:main.c        ****                     // Boolean, die anzeigt, dass arrays mit dem neu erhaltenen Wert noch nicht auf
 433:main.c        ****                     STI100_present_results_saved = 0;
 3760              		.loc 12 433 0
 3761 0450 634B     		ldr	r3, .L198+32
 3762 0452 0022     		movs	r2, #0
 3763 0454 1A60     		str	r2, [r3]
 434:main.c        ****                     
 435:main.c        ****                     // Nummer und Lebenszeit der gerade untersuchten Lamelle im Ergebnisarray abspe
 436:main.c        ****                     Number[counter_Lamella_Number] = counter_Lamella_Number + 1;
 3764              		.loc 12 436 0
 3765 0456 634B     		ldr	r3, .L198+36
 3766 0458 1B68     		ldr	r3, [r3]
 3767 045a 624A     		ldr	r2, .L198+36
 3768 045c 1268     		ldr	r2, [r2]
 3769 045e 0132     		adds	r2, r2, #1
 3770 0460 6149     		ldr	r1, .L198+40
 3771 0462 41F82320 		str	r2, [r1, r3, lsl #2]
 437:main.c        ****                     Lifetime[counter_Lamella_Number] = counter_Timer1_steps;            // ein Step
 3772              		.loc 12 437 0
 3773 0466 5F4B     		ldr	r3, .L198+36
 3774 0468 1B68     		ldr	r3, [r3]
 3775 046a 554A     		ldr	r2, .L198
 3776 046c 1268     		ldr	r2, [r2]
 3777 046e 5F49     		ldr	r1, .L198+44
 3778 0470 41F82320 		str	r2, [r1, r3, lsl #2]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 99


 438:main.c        ****                     
 439:main.c        ****                     // Testen, ob bisherige Maximal-Lebensdauer überschritten wurde; Lifetime_max 
 440:main.c        ****                     if (Lifetime_max < counter_Timer1_steps)
 3779              		.loc 12 440 0
 3780 0474 5E4B     		ldr	r3, .L198+48
 3781 0476 1A68     		ldr	r2, [r3]
 3782 0478 514B     		ldr	r3, .L198
 3783 047a 1B68     		ldr	r3, [r3]
 3784 047c 9A42     		cmp	r2, r3
 3785 047e 14DA     		bge	.L158
 441:main.c        ****                     {
 442:main.c        ****                         Lifetime_max = counter_Timer1_steps;
 3786              		.loc 12 442 0
 3787 0480 4F4B     		ldr	r3, .L198
 3788 0482 1B68     		ldr	r3, [r3]
 3789 0484 5A4A     		ldr	r2, .L198+48
 3790 0486 1360     		str	r3, [r2]
 443:main.c        ****                         if (menustate == 2)
 3791              		.loc 12 443 0
 3792 0488 5A4B     		ldr	r3, .L198+52
 3793 048a 1B78     		ldrb	r3, [r3]
 3794 048c DBB2     		uxtb	r3, r3
 3795 048e 022B     		cmp	r3, #2
 3796 0490 0BD1     		bne	.L158
 444:main.c        ****                         {
 445:main.c        ****                             UART_TFT_PutString((char*)"ref LiveData");
 3797              		.loc 12 445 0
 3798 0492 5948     		ldr	r0, .L198+56
 3799 0494 FFF7FEFF 		bl	UART_TFT_PutString
 446:main.c        ****                             // Ende der Eingabe markieren
 447:main.c        ****                             UART_TFT_PutChar(0xff);
 3800              		.loc 12 447 0
 3801 0498 FF20     		movs	r0, #255
 3802 049a FFF7FEFF 		bl	UART_TFT_PutChar
 448:main.c        ****                             UART_TFT_PutChar(0xff);
 3803              		.loc 12 448 0
 3804 049e FF20     		movs	r0, #255
 3805 04a0 FFF7FEFF 		bl	UART_TFT_PutChar
 449:main.c        ****                             UART_TFT_PutChar(0xff);
 3806              		.loc 12 449 0
 3807 04a4 FF20     		movs	r0, #255
 3808 04a6 FFF7FEFF 		bl	UART_TFT_PutChar
 3809              	.L158:
 450:main.c        ****                         } 
 451:main.c        ****                     } 
 452:main.c        ****                     
 453:main.c        ****                     // Umskalierte Darstellung muss bei jedem neuen Wert aktualisiert werden
 454:main.c        ****                     UART_TFT_PutString((char*)"ref ScaledData");
 3810              		.loc 12 454 0
 3811 04aa 5448     		ldr	r0, .L198+60
 3812 04ac FFF7FEFF 		bl	UART_TFT_PutString
 455:main.c        ****                     // Ende der Eingabe markieren
 456:main.c        ****                     UART_TFT_PutChar(0xff);
 3813              		.loc 12 456 0
 3814 04b0 FF20     		movs	r0, #255
 3815 04b2 FFF7FEFF 		bl	UART_TFT_PutChar
 457:main.c        ****                     UART_TFT_PutChar(0xff);
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 100


 3816              		.loc 12 457 0
 3817 04b6 FF20     		movs	r0, #255
 3818 04b8 FFF7FEFF 		bl	UART_TFT_PutChar
 458:main.c        ****                     UART_TFT_PutChar(0xff);
 3819              		.loc 12 458 0
 3820 04bc FF20     		movs	r0, #255
 3821 04be FFF7FEFF 		bl	UART_TFT_PutChar
 459:main.c        ****                     
 460:main.c        ****                     // Bool setzten, die angibt, dass man Plot wieder aktualisieren soll
 461:main.c        ****                     present_LiveData_plot_refreshed = 0;
 3822              		.loc 12 461 0
 3823 04c2 4F4B     		ldr	r3, .L198+64
 3824 04c4 0022     		movs	r2, #0
 3825 04c6 1A60     		str	r2, [r3]
 462:main.c        ****                     current_RescaledData_plot_refreshed = 0;
 3826              		.loc 12 462 0
 3827 04c8 4E4B     		ldr	r3, .L198+68
 3828 04ca 0022     		movs	r2, #0
 3829 04cc 1A60     		str	r2, [r3]
 463:main.c        ****                     
 464:main.c        **** ////                    // Testausgabe
 465:main.c        **** ////                    UART_TFT_PutString((char*)"tl0.txt=");
 466:main.c        **** ////                    UART_TFT_PutString((char*)"\"Messung Nr: ");
 467:main.c        **** ////                    // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 468:main.c        **** ////                    itoa((int)Number[counter_Lamella_Number], num_str, 10);
 469:main.c        **** ////                    UART_TFT_PutString(num_str);
 470:main.c        **** ////                    UART_TFT_PutString((char*)"\"");
 471:main.c        **** ////                    // Ende der Eingabe markieren
 472:main.c        **** ////                    UART_TFT_PutChar(0xff);
 473:main.c        **** ////                    UART_TFT_PutChar(0xff);
 474:main.c        **** ////                    UART_TFT_PutChar(0xff); 
 475:main.c        ****                     
 476:main.c        ****                     // Counter inkrementieren bzw. zurücksetzen
 477:main.c        ****                     counter_Lamella_Number = counter_Lamella_Number + 1;
 3830              		.loc 12 477 0
 3831 04ce 454B     		ldr	r3, .L198+36
 3832 04d0 1B68     		ldr	r3, [r3]
 3833 04d2 0133     		adds	r3, r3, #1
 3834 04d4 434A     		ldr	r2, .L198+36
 3835 04d6 1360     		str	r3, [r2]
 478:main.c        ****                     counter_Timer1_steps = 0; 
 3836              		.loc 12 478 0
 3837 04d8 394B     		ldr	r3, .L198
 3838 04da 0022     		movs	r2, #0
 3839 04dc 1A60     		str	r2, [r3]
 479:main.c        ****                     
 480:main.c        ****                     // Flag, dass neue Lamelle ausgebildet werden soll
 481:main.c        ****                     new_pickup_initialized = 1;
 3840              		.loc 12 481 0
 3841 04de 4A4B     		ldr	r3, .L198+72
 3842 04e0 0122     		movs	r2, #1
 3843 04e2 1A70     		strb	r2, [r3]
 3844              	.L157:
 482:main.c        ****                 }
 483:main.c        ****                 
 484:main.c        ****                 // Wenn Anzahl benötigter Messungen erreicht
 485:main.c        ****                 if (counter_Lamella_Number == NumberOfMeasurements)
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 101


 3845              		.loc 12 485 0
 3846 04e4 3F4B     		ldr	r3, .L198+36
 3847 04e6 1A68     		ldr	r2, [r3]
 3848 04e8 484B     		ldr	r3, .L198+76
 3849 04ea 1B68     		ldr	r3, [r3]
 3850 04ec 9A42     		cmp	r2, r3
 3851 04ee 40F09F80 		bne	.L159
 486:main.c        ****                 {
 487:main.c        ****                     // Messung stoppen
 488:main.c        ****                     Measurement_running = 0;
 3852              		.loc 12 488 0
 3853 04f2 474B     		ldr	r3, .L198+80
 3854 04f4 0022     		movs	r2, #0
 3855 04f6 1A70     		strb	r2, [r3]
 489:main.c        ****                                         
 490:main.c        ****                     // Counter zurücksetzen
 491:main.c        ****                     counter_Lamella_Number = NumberOfMeasurements;
 3856              		.loc 12 491 0
 3857 04f8 444B     		ldr	r3, .L198+76
 3858 04fa 1B68     		ldr	r3, [r3]
 3859 04fc 394A     		ldr	r2, .L198+36
 3860 04fe 1360     		str	r3, [r2]
 492:main.c        ****                     counter_Timer1_steps = 0; 
 3861              		.loc 12 492 0
 3862 0500 2F4B     		ldr	r3, .L198
 3863 0502 0022     		movs	r2, #0
 3864 0504 1A60     		str	r2, [r3]
 493:main.c        ****                     
 494:main.c        ****                     // Pickup-Position anfahren
 495:main.c        ****                     MoveToHomePosition();
 3865              		.loc 12 495 0
 3866 0506 FFF7FEFF 		bl	MoveToHomePosition
 496:main.c        ****                     
 497:main.c        ****                     // Ins Hauptmenü wechseln
 498:main.c        ****                     menustate = 0;
 3867              		.loc 12 498 0
 3868 050a 3A4B     		ldr	r3, .L198+52
 3869 050c 0022     		movs	r2, #0
 3870 050e 1A70     		strb	r2, [r3]
 499:main.c        ****                     
 500:main.c        ****                     // Erscheinungsbild des Buttons anpassen
 501:main.c        ****                     UART_TFT_PutString((char*)"page Home");
 3871              		.loc 12 501 0
 3872 0510 4048     		ldr	r0, .L198+84
 3873 0512 FFF7FEFF 		bl	UART_TFT_PutString
 502:main.c        ****                     // Ende der Eingabe markieren
 503:main.c        ****                     UART_TFT_PutChar(0xff);
 3874              		.loc 12 503 0
 3875 0516 FF20     		movs	r0, #255
 3876 0518 FFF7FEFF 		bl	UART_TFT_PutChar
 504:main.c        ****                     UART_TFT_PutChar(0xff);
 3877              		.loc 12 504 0
 3878 051c FF20     		movs	r0, #255
 3879 051e FFF7FEFF 		bl	UART_TFT_PutChar
 505:main.c        ****                     UART_TFT_PutChar(0xff); 
 3880              		.loc 12 505 0
 3881 0522 FF20     		movs	r0, #255
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 102


 3882 0524 FFF7FEFF 		bl	UART_TFT_PutChar
 506:main.c        ****                     UART_TFT_PutString((char*)"b_measure.txt=\"Start Measurement\"");
 3883              		.loc 12 506 0
 3884 0528 3B48     		ldr	r0, .L198+88
 3885 052a FFF7FEFF 		bl	UART_TFT_PutString
 507:main.c        ****                     // Ende der Eingabe markieren
 508:main.c        ****                     UART_TFT_PutChar(0xff);
 3886              		.loc 12 508 0
 3887 052e FF20     		movs	r0, #255
 3888 0530 FFF7FEFF 		bl	UART_TFT_PutChar
 509:main.c        ****                     UART_TFT_PutChar(0xff);
 3889              		.loc 12 509 0
 3890 0534 FF20     		movs	r0, #255
 3891 0536 FFF7FEFF 		bl	UART_TFT_PutChar
 510:main.c        ****                     UART_TFT_PutChar(0xff); 
 3892              		.loc 12 510 0
 3893 053a FF20     		movs	r0, #255
 3894 053c FFF7FEFF 		bl	UART_TFT_PutChar
 511:main.c        ****                     UART_TFT_PutString((char*)"b_measure.bco=1024");
 3895              		.loc 12 511 0
 3896 0540 3648     		ldr	r0, .L198+92
 3897 0542 FFF7FEFF 		bl	UART_TFT_PutString
 512:main.c        ****                     // Ende der Eingabe markieren
 513:main.c        ****                     UART_TFT_PutChar(0xff);
 3898              		.loc 12 513 0
 3899 0546 FF20     		movs	r0, #255
 3900 0548 FFF7FEFF 		bl	UART_TFT_PutChar
 514:main.c        ****                     UART_TFT_PutChar(0xff);
 3901              		.loc 12 514 0
 3902 054c FF20     		movs	r0, #255
 3903 054e FFF7FEFF 		bl	UART_TFT_PutChar
 515:main.c        ****                     UART_TFT_PutChar(0xff);
 3904              		.loc 12 515 0
 3905 0552 FF20     		movs	r0, #255
 3906 0554 FFF7FEFF 		bl	UART_TFT_PutChar
 516:main.c        ****                     UART_TFT_PutString((char*)"ref Home");
 3907              		.loc 12 516 0
 3908 0558 3148     		ldr	r0, .L198+96
 3909 055a FFF7FEFF 		bl	UART_TFT_PutString
 517:main.c        ****                     // Ende der Eingabe markieren
 518:main.c        ****                     UART_TFT_PutChar(0xff);
 3910              		.loc 12 518 0
 3911 055e FF20     		movs	r0, #255
 3912 0560 FFF7FEFF 		bl	UART_TFT_PutChar
 519:main.c        ****                     UART_TFT_PutChar(0xff);
 3913              		.loc 12 519 0
 3914 0564 FF20     		movs	r0, #255
 3915 0566 FFF7FEFF 		bl	UART_TFT_PutChar
 520:main.c        ****                     UART_TFT_PutChar(0xff); 
 3916              		.loc 12 520 0
 3917 056a FF20     		movs	r0, #255
 3918 056c FFF7FEFF 		bl	UART_TFT_PutChar
 521:main.c        ****                     UART_TFT_PutString((char*)"vis slider,1");
 3919              		.loc 12 521 0
 3920 0570 2C48     		ldr	r0, .L198+100
 3921 0572 FFF7FEFF 		bl	UART_TFT_PutString
 522:main.c        ****                     // Ende der Eingabe markieren
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 103


 523:main.c        ****                     UART_TFT_PutChar(0xff);
 3922              		.loc 12 523 0
 3923 0576 FF20     		movs	r0, #255
 3924 0578 FFF7FEFF 		bl	UART_TFT_PutChar
 524:main.c        ****                     UART_TFT_PutChar(0xff);
 3925              		.loc 12 524 0
 3926 057c FF20     		movs	r0, #255
 3927 057e FFF7FEFF 		bl	UART_TFT_PutChar
 525:main.c        ****                     UART_TFT_PutChar(0xff);
 3928              		.loc 12 525 0
 3929 0582 FF20     		movs	r0, #255
 3930 0584 FFF7FEFF 		bl	UART_TFT_PutChar
 526:main.c        ****                     
 527:main.c        ****                     // Booleans so setzten, dass Plots wieder aktualisiert werden nach Wechsel der 
 528:main.c        ****                     present_LiveData_plot_refreshed = 0;                
 3931              		.loc 12 528 0
 3932 0588 1D4B     		ldr	r3, .L198+64
 3933 058a 0022     		movs	r2, #0
 3934 058c 1A60     		str	r2, [r3]
 529:main.c        ****                     current_RescaledData_plot_refreshed = 0;                    
 3935              		.loc 12 529 0
 3936 058e 1D4B     		ldr	r3, .L198+68
 3937 0590 0022     		movs	r2, #0
 3938 0592 1A60     		str	r2, [r3]
 530:main.c        ****                     
 531:main.c        ****                     // Selbstständiges Abspeichern am Ende der Messung
 532:main.c        ****                     // Anfrage auf Speichern vortäuschen ( = so tun, als ob man
 533:main.c        ****                     // auf die Export und Speicher Taste drücken würde)
 534:main.c        ****                     // "auf Export drücken"
 535:main.c        ****                     menustate = 4;
 3939              		.loc 12 535 0
 3940 0594 174B     		ldr	r3, .L198+52
 3941 0596 0422     		movs	r2, #4
 3942 0598 1A70     		strb	r2, [r3]
 536:main.c        ****                     // " auf Speichern drücken"
 537:main.c        ****                     STI100_write_requested = 1;
 3943              		.loc 12 537 0
 3944 059a 234B     		ldr	r3, .L198+104
 3945 059c 0122     		movs	r2, #1
 3946 059e 1A60     		str	r2, [r3]
 538:main.c        ****                     CyDelay(100);
 3947              		.loc 12 538 0
 3948 05a0 6420     		movs	r0, #100
 3949 05a2 FFF7FEFF 		bl	CyDelay
 539:main.c        ****                     UART_TFT_PutString((char*)"page Export");
 3950              		.loc 12 539 0
 3951 05a6 2148     		ldr	r0, .L198+108
 3952 05a8 FFF7FEFF 		bl	UART_TFT_PutString
 540:main.c        ****                     // Ende der Eingabe markieren
 541:main.c        ****                     UART_TFT_PutChar(0xff);
 3953              		.loc 12 541 0
 3954 05ac FF20     		movs	r0, #255
 3955 05ae FFF7FEFF 		bl	UART_TFT_PutChar
 542:main.c        ****                     UART_TFT_PutChar(0xff);
 3956              		.loc 12 542 0
 3957 05b2 FF20     		movs	r0, #255
 3958 05b4 FFF7FEFF 		bl	UART_TFT_PutChar
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 104


 543:main.c        ****                     UART_TFT_PutChar(0xff); 
 3959              		.loc 12 543 0
 3960 05b8 FF20     		movs	r0, #255
 3961 05ba FFF7FEFF 		bl	UART_TFT_PutChar
 3962 05be 4CE0     		b	.L153
 3963              	.L199:
 3964              		.align	2
 3965              	.L198:
 3966 05c0 00000000 		.word	counter_Timer1_steps
 3967 05c4 00000000 		.word	counter_Lamella_Relaxation_steps
 3968 05c8 00000000 		.word	bool_Rupture_Confirmed
 3969 05cc 00000000 		.word	counter_Rupture_Confirmation
 3970 05d0 00000000 		.word	ADC_value
 3971 05d4 00000000 		.word	counter_Rupture_Confirmation_Target
 3972 05d8 00000000 		.word	bool_NewLamellaFileNameSet
 3973 05dc 00000000 		.word	present_Result_saved
 3974 05e0 00000000 		.word	STI100_present_results_saved
 3975 05e4 00000000 		.word	counter_Lamella_Number
 3976 05e8 00000000 		.word	Number
 3977 05ec 00000000 		.word	Lifetime
 3978 05f0 00000000 		.word	Lifetime_max
 3979 05f4 00000000 		.word	menustate
 3980 05f8 34010000 		.word	.LC23
 3981 05fc 44010000 		.word	.LC24
 3982 0600 00000000 		.word	present_LiveData_plot_refreshed
 3983 0604 00000000 		.word	current_RescaledData_plot_refreshed
 3984 0608 00000000 		.word	new_pickup_initialized
 3985 060c 00000000 		.word	NumberOfMeasurements
 3986 0610 00000000 		.word	Measurement_running
 3987 0614 20000000 		.word	.LC0
 3988 0618 54010000 		.word	.LC25
 3989 061c 78010000 		.word	.LC26
 3990 0620 8C010000 		.word	.LC27
 3991 0624 98010000 		.word	.LC28
 3992 0628 00000000 		.word	STI100_write_requested
 3993 062c A8010000 		.word	.LC29
 3994              	.L159:
 544:main.c        ****                     
 545:main.c        ****                 }
 546:main.c        ****                 // sonst neue Lamelle holen
 547:main.c        ****                 else
 548:main.c        ****                 {
 549:main.c        ****                     // Anzeige, dass gerade eine neue Lamelle abgeholt wird -> Timer Flag "timerfla
 550:main.c        ****                     new_pickup_initialized = 1;
 3995              		.loc 12 550 0
 3996 0630 974B     		ldr	r3, .L200
 3997 0632 0122     		movs	r2, #1
 3998 0634 1A70     		strb	r2, [r3]
 551:main.c        ****                     
 552:main.c        ****                     // Pickup-Position anfahren
 553:main.c        ****                     MoveToHomePosition();
 3999              		.loc 12 553 0
 4000 0636 FFF7FEFF 		bl	MoveToHomePosition
 554:main.c        ****                     // Warten, dass sich die Lamelle ausbildet
 555:main.c        ****                     CyDelay(LamellaFormationTime_ms);
 4001              		.loc 12 555 0
 4002 063a 40F6C413 		movw	r3, #2500
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 105


 4003 063e 1846     		mov	r0, r3
 4004 0640 FFF7FEFF 		bl	CyDelay
 556:main.c        ****                     // Sampling-Position anfahren
 557:main.c        ****                     MoveToSamplingPosition();
 4005              		.loc 12 557 0
 4006 0644 FFF7FEFF 		bl	MoveToSamplingPosition
 558:main.c        ****                     
 559:main.c        ****                     // Anzeige, dass Sampling Position wieder erreicht ist -> Timer Flag "timerflag
 560:main.c        ****                     new_pickup_initialized = 0;
 4007              		.loc 12 560 0
 4008 0648 914B     		ldr	r3, .L200
 4009 064a 0022     		movs	r2, #0
 4010 064c 1A70     		strb	r2, [r3]
 561:main.c        ****                     
 562:main.c        ****                     // -> dann sollte ADC-Wert wieder ausreichend hoch sein; hier wird das "simulie
 563:main.c        ****                     // zum Test -> Lamelle wieder ausbilden bedeutet Intensität oberhalb eines Gre
 564:main.c        ****                     // im Experiment sollte(!) das der Fall sein, wenn Sampling Position wieder err
 565:main.c        ****                     i = 0;
 4011              		.loc 12 565 0
 4012 064e 914B     		ldr	r3, .L200+4
 4013 0650 0022     		movs	r2, #0
 4014 0652 1A60     		str	r2, [r3]
 566:main.c        ****                     
 567:main.c        ****                     present_Result_saved = 0;                      // erlaubt, dass nächster Messw
 4015              		.loc 12 567 0
 4016 0654 904B     		ldr	r3, .L200+8
 4017 0656 0022     		movs	r2, #0
 4018 0658 1A60     		str	r2, [r3]
 4019              	.L153:
 568:main.c        ****                 }
 569:main.c        ****             }
 570:main.c        ****             
 571:main.c        **** //            Nextion_Send_Value_To_Valuebox ("int_now", ADC_value);
 572:main.c        ****                 
 573:main.c        ****             // Momentane Intensität an Valuebox übertragen
 574:main.c        ****             UART_TFT_PutString((char*)"int_now.val=");
 4020              		.loc 12 574 0
 4021 065a 9048     		ldr	r0, .L200+12
 4022 065c FFF7FEFF 		bl	UART_TFT_PutString
 575:main.c        ****             // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 576:main.c        ****             itoa(ADC_value, num_str, 10);
 4023              		.loc 12 576 0
 4024 0660 8F4B     		ldr	r3, .L200+16
 4025 0662 1B68     		ldr	r3, [r3]
 4026 0664 1846     		mov	r0, r3
 4027 0666 8F49     		ldr	r1, .L200+20
 4028 0668 0A22     		movs	r2, #10
 4029 066a FFF7FEFF 		bl	itoa
 577:main.c        ****             UART_TFT_PutString((char*)num_str);
 4030              		.loc 12 577 0
 4031 066e 8D48     		ldr	r0, .L200+20
 4032 0670 FFF7FEFF 		bl	UART_TFT_PutString
 578:main.c        ****             // Ende der Eingabe markieren
 579:main.c        ****             UART_TFT_PutChar(0xff);
 4033              		.loc 12 579 0
 4034 0674 FF20     		movs	r0, #255
 4035 0676 FFF7FEFF 		bl	UART_TFT_PutChar
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 106


 580:main.c        ****             UART_TFT_PutChar(0xff);
 4036              		.loc 12 580 0
 4037 067a FF20     		movs	r0, #255
 4038 067c FFF7FEFF 		bl	UART_TFT_PutChar
 581:main.c        ****             UART_TFT_PutChar(0xff); 
 4039              		.loc 12 581 0
 4040 0680 FF20     		movs	r0, #255
 4041 0682 FFF7FEFF 		bl	UART_TFT_PutChar
 4042              	.L149:
 582:main.c        ****             
 583:main.c        ****                 
 584:main.c        ****         }            
 585:main.c        ****     }  
 586:main.c        ****     
 587:main.c        ****         
 588:main.c        ****     // Switch case Umgebung je nach Hauptseite auf der man sich befindet, wird von Interrupt "CY_IS
 589:main.c        ****     switch (menustate)
 4043              		.loc 12 589 0
 4044 0686 884B     		ldr	r3, .L200+24
 4045 0688 1B78     		ldrb	r3, [r3]
 4046 068a DBB2     		uxtb	r3, r3
 4047 068c 042B     		cmp	r3, #4
 4048 068e 00F20683 		bhi	.L195
 4049 0692 01A2     		adr	r2, .L162
 4050 0694 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4051              		.p2align 2
 4052              	.L162:
 4053 0698 AD060000 		.word	.L161+1
 4054 069c 09070000 		.word	.L163+1
 4055 06a0 25070000 		.word	.L164+1
 4056 06a4 11080000 		.word	.L165+1
 4057 06a8 590A0000 		.word	.L166+1
 4058              		.p2align 1
 4059              	.L161:
 590:main.c        ****     {
 591:main.c        ****         
 592:main.c        ****         
 593:main.c        ****         // Seite "Home"
 594:main.c        ****         case 0:  
 595:main.c        ****            
 596:main.c        ****             if (slider_val_received == 1)
 4060              		.loc 12 596 0
 4061 06ac 7F4B     		ldr	r3, .L200+28
 4062 06ae 1B78     		ldrb	r3, [r3]
 4063 06b0 DBB2     		uxtb	r3, r3
 4064 06b2 012B     		cmp	r3, #1
 4065 06b4 15D1     		bne	.L167
 597:main.c        ****             {
 598:main.c        ****                 slider_val_received = 0;
 4066              		.loc 12 598 0
 4067 06b6 7D4B     		ldr	r3, .L200+28
 4068 06b8 0022     		movs	r2, #0
 4069 06ba 1A70     		strb	r2, [r3]
 599:main.c        ****                 slider_val_sent = 0;
 4070              		.loc 12 599 0
 4071 06bc 7C4B     		ldr	r3, .L200+32
 4072 06be 0022     		movs	r2, #0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 107


 4073 06c0 1A70     		strb	r2, [r3]
 600:main.c        ****                 NumberOfMeasurements = Nextion_NumberOfMeasurementsFromSlider();
 4074              		.loc 12 600 0
 4075 06c2 FFF7FEFF 		bl	Nextion_NumberOfMeasurementsFromSlider
 4076 06c6 0246     		mov	r2, r0
 4077 06c8 7A4B     		ldr	r3, .L200+36
 4078 06ca 1A60     		str	r2, [r3]
 601:main.c        ****                 
 602:main.c        ****                 // So werden maximal(!) "NumberOfShowResults-1" Punkte dargestellt
 603:main.c        ****                 plot_every_nth = NumberOfMeasurements/NumberOfShowResults + 1;
 4079              		.loc 12 603 0
 4080 06cc 794B     		ldr	r3, .L200+36
 4081 06ce 1B68     		ldr	r3, [r3]
 4082 06d0 794A     		ldr	r2, .L200+40
 4083 06d2 82FB0312 		smull	r1, r2, r2, r3
 4084 06d6 1211     		asrs	r2, r2, #4
 4085 06d8 DB17     		asrs	r3, r3, #31
 4086 06da D31A     		subs	r3, r2, r3
 4087 06dc 0133     		adds	r3, r3, #1
 4088 06de 774A     		ldr	r2, .L200+44
 4089 06e0 1360     		str	r3, [r2]
 4090              	.L167:
 604:main.c        ****             }
 605:main.c        **** 
 606:main.c        ****             // Slider-Wert setzen
 607:main.c        ****             Nextion_SendProgressbarValue((unsigned int)(100*counter_Lamella_Number/NumberOfMeasurem
 4091              		.loc 12 607 0
 4092 06e2 774B     		ldr	r3, .L200+48
 4093 06e4 1B68     		ldr	r3, [r3]
 4094 06e6 6422     		movs	r2, #100
 4095 06e8 02FB03F2 		mul	r2, r2, r3
 4096 06ec 714B     		ldr	r3, .L200+36
 4097 06ee 1B68     		ldr	r3, [r3]
 4098 06f0 92FBF3F3 		sdiv	r3, r2, r3
 4099 06f4 1846     		mov	r0, r3
 4100 06f6 FFF7FEFF 		bl	Nextion_SendProgressbarValue
 608:main.c        ****             
 609:main.c        ****             // Booleans so setzten, dass Plots wieder aktualisiert werden nach Wechsel der Seiten
 610:main.c        ****             present_LiveData_plot_refreshed = 0;                
 4101              		.loc 12 610 0
 4102 06fa 724B     		ldr	r3, .L200+52
 4103 06fc 0022     		movs	r2, #0
 4104 06fe 1A60     		str	r2, [r3]
 611:main.c        ****             current_RescaledData_plot_refreshed = 0;
 4105              		.loc 12 611 0
 4106 0700 714B     		ldr	r3, .L200+56
 4107 0702 0022     		movs	r2, #0
 4108 0704 1A60     		str	r2, [r3]
 612:main.c        ****             
 613:main.c        ****             break;
 4109              		.loc 12 613 0
 4110 0706 CBE2     		b	.L168
 4111              	.L163:
 614:main.c        **** 
 615:main.c        ****         
 616:main.c        ****         // Seite "Settings"
 617:main.c        ****         case 1: 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 108


 618:main.c        ****             
 619:main.c        ****             // Laser an
 620:main.c        ****             Laser_ON();            
 4112              		.loc 12 620 0
 4113 0708 FFF7FEFF 		bl	Laser_ON
 621:main.c        ****             
 622:main.c        ****             // Daten in Fenster "Settings" malen
 623:main.c        ****             PointsToSettingsAxes((float)PresenceThreshold, (float)ReferenceThreshold, (float)ADC_va
 4114              		.loc 12 623 0
 4115 070c 644B     		ldr	r3, .L200+16
 4116 070e 1B68     		ldr	r3, [r3]
 4117 0710 1846     		mov	r0, r3
 4118 0712 FFF7FEFF 		bl	__aeabi_i2f
 4119 0716 0346     		mov	r3, r0
 4120 0718 6C48     		ldr	r0, .L200+60
 4121 071a 6D49     		ldr	r1, .L200+64
 4122 071c 1A46     		mov	r2, r3
 4123 071e FFF7FEFF 		bl	PointsToSettingsAxes
 624:main.c        ****             break;
 4124              		.loc 12 624 0
 4125 0722 BDE2     		b	.L168
 4126              	.L164:
 625:main.c        ****             
 626:main.c        ****             // Booleans so setzten, dass Plots wieder aktualisiert werden nach Wechsel der Seiten
 627:main.c        ****             present_LiveData_plot_refreshed = 0;                
 628:main.c        ****             current_RescaledData_plot_refreshed = 0;
 629:main.c        **** 
 630:main.c        ****             // Laser aus
 631:main.c        ****             Laser_OFF();
 632:main.c        ****             
 633:main.c        ****             
 634:main.c        ****         // Seite "LiveData"
 635:main.c        ****         case 2: 
 636:main.c        ****             
 637:main.c        ****             // Daten in Fenster "LiveData" malen
 638:main.c        ****             if ((timerflag1000ms ==1) && (present_LiveData_plot_refreshed == 0))
 4127              		.loc 12 638 0
 4128 0724 6B4B     		ldr	r3, .L200+68
 4129 0726 1B78     		ldrb	r3, [r3]
 4130 0728 DBB2     		uxtb	r3, r3
 4131 072a 012B     		cmp	r3, #1
 4132 072c 6CD1     		bne	.L169
 4133              		.loc 12 638 0 is_stmt 0 discriminator 1
 4134 072e 654B     		ldr	r3, .L200+52
 4135 0730 1B68     		ldr	r3, [r3]
 4136 0732 002B     		cmp	r3, #0
 4137 0734 68D1     		bne	.L169
 639:main.c        ****             {
 640:main.c        ****                 // Maximalwert auf y-Achse
 641:main.c        ****                 UART_TFT_PutString((char*)"ymax_LiveData.val=");
 4138              		.loc 12 641 0 is_stmt 1
 4139 0736 6848     		ldr	r0, .L200+72
 4140 0738 FFF7FEFF 		bl	UART_TFT_PutString
 642:main.c        ****                 // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 643:main.c        ****                 itoa(Lifetime_max, num_str, 10);
 4141              		.loc 12 643 0
 4142 073c 674B     		ldr	r3, .L200+76
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 109


 4143 073e 1B68     		ldr	r3, [r3]
 4144 0740 1846     		mov	r0, r3
 4145 0742 5849     		ldr	r1, .L200+20
 4146 0744 0A22     		movs	r2, #10
 4147 0746 FFF7FEFF 		bl	itoa
 644:main.c        ****                 UART_TFT_PutString((char*)num_str);
 4148              		.loc 12 644 0
 4149 074a 5648     		ldr	r0, .L200+20
 4150 074c FFF7FEFF 		bl	UART_TFT_PutString
 645:main.c        ****                 // Anfrage absenden
 646:main.c        ****                 UART_TFT_PutChar(0xFF);
 4151              		.loc 12 646 0
 4152 0750 FF20     		movs	r0, #255
 4153 0752 FFF7FEFF 		bl	UART_TFT_PutChar
 647:main.c        ****                 UART_TFT_PutChar(0xFF);  
 4154              		.loc 12 647 0
 4155 0756 FF20     		movs	r0, #255
 4156 0758 FFF7FEFF 		bl	UART_TFT_PutChar
 648:main.c        ****                 UART_TFT_PutChar(0xFF);
 4157              		.loc 12 648 0
 4158 075c FF20     		movs	r0, #255
 4159 075e FFF7FEFF 		bl	UART_TFT_PutChar
 649:main.c        ****                 // Maximalwert auf x-Achse
 650:main.c        ****                 UART_TFT_PutString((char*)"xmax_LiveData.val=");
 4160              		.loc 12 650 0
 4161 0762 5F48     		ldr	r0, .L200+80
 4162 0764 FFF7FEFF 		bl	UART_TFT_PutString
 651:main.c        ****                 // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 652:main.c        ****                 itoa(NumberOfMeasurements, num_str, 10);
 4163              		.loc 12 652 0
 4164 0768 524B     		ldr	r3, .L200+36
 4165 076a 1B68     		ldr	r3, [r3]
 4166 076c 1846     		mov	r0, r3
 4167 076e 4D49     		ldr	r1, .L200+20
 4168 0770 0A22     		movs	r2, #10
 4169 0772 FFF7FEFF 		bl	itoa
 653:main.c        ****                 UART_TFT_PutString((char*)num_str);
 4170              		.loc 12 653 0
 4171 0776 4B48     		ldr	r0, .L200+20
 4172 0778 FFF7FEFF 		bl	UART_TFT_PutString
 654:main.c        ****                 // Anfrage absenden
 655:main.c        ****                 UART_TFT_PutChar(0xFF);
 4173              		.loc 12 655 0
 4174 077c FF20     		movs	r0, #255
 4175 077e FFF7FEFF 		bl	UART_TFT_PutChar
 656:main.c        ****                 UART_TFT_PutChar(0xFF);  
 4176              		.loc 12 656 0
 4177 0782 FF20     		movs	r0, #255
 4178 0784 FFF7FEFF 		bl	UART_TFT_PutChar
 657:main.c        ****                 UART_TFT_PutChar(0xFF);
 4179              		.loc 12 657 0
 4180 0788 FF20     		movs	r0, #255
 4181 078a FFF7FEFF 		bl	UART_TFT_PutChar
 658:main.c        ****                 
 659:main.c        ****                 present_LiveData_plot_refreshed = 1;
 4182              		.loc 12 659 0
 4183 078e 4D4B     		ldr	r3, .L200+52
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 110


 4184 0790 0122     		movs	r2, #1
 4185 0792 1A60     		str	r2, [r3]
 660:main.c        ****                 //for (j=0; j<NumberOfMeasurements; j=j+plot_every_nth)
 661:main.c        ****                 for (j=0; j<=counter_Lamella_Number; j=j+plot_every_nth)                
 4186              		.loc 12 661 0
 4187 0794 534B     		ldr	r3, .L200+84
 4188 0796 0022     		movs	r2, #0
 4189 0798 1A60     		str	r2, [r3]
 4190 079a 23E0     		b	.L170
 4191              	.L172:
 662:main.c        ****                 {
 663:main.c        ****                     // sonst fängt der Plot immer links von der Achse an
 664:main.c        ****                     if (Number[j]>0)
 4192              		.loc 12 664 0
 4193 079c 514B     		ldr	r3, .L200+84
 4194 079e 1B68     		ldr	r3, [r3]
 4195 07a0 514A     		ldr	r2, .L200+88
 4196 07a2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4197 07a6 002B     		cmp	r3, #0
 4198 07a8 15DD     		ble	.L171
 665:main.c        ****                     {
 666:main.c        ****                         PointToLiveDataAxes((float)1.0*Number[j], (float)1.0*Lifetime[j]);
 4199              		.loc 12 666 0
 4200 07aa 4E4B     		ldr	r3, .L200+84
 4201 07ac 1B68     		ldr	r3, [r3]
 4202 07ae 4E4A     		ldr	r2, .L200+88
 4203 07b0 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4204 07b4 1846     		mov	r0, r3
 4205 07b6 FFF7FEFF 		bl	__aeabi_i2f
 4206 07ba 0446     		mov	r4, r0
 4207 07bc 494B     		ldr	r3, .L200+84
 4208 07be 1B68     		ldr	r3, [r3]
 4209 07c0 4A4A     		ldr	r2, .L200+92
 4210 07c2 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4211 07c6 1846     		mov	r0, r3
 4212 07c8 FFF7FEFF 		bl	__aeabi_i2f
 4213 07cc 0346     		mov	r3, r0
 4214 07ce 2046     		mov	r0, r4
 4215 07d0 1946     		mov	r1, r3
 4216 07d2 FFF7FEFF 		bl	PointToLiveDataAxes
 4217              	.L171:
 661:main.c        ****                 {
 4218              		.loc 12 661 0 discriminator 2
 4219 07d6 434B     		ldr	r3, .L200+84
 4220 07d8 1A68     		ldr	r2, [r3]
 4221 07da 384B     		ldr	r3, .L200+44
 4222 07dc 1B68     		ldr	r3, [r3]
 4223 07de 1344     		add	r3, r3, r2
 4224 07e0 404A     		ldr	r2, .L200+84
 4225 07e2 1360     		str	r3, [r2]
 4226              	.L170:
 661:main.c        ****                 {
 4227              		.loc 12 661 0 is_stmt 0 discriminator 1
 4228 07e4 3F4B     		ldr	r3, .L200+84
 4229 07e6 1A68     		ldr	r2, [r3]
 4230 07e8 354B     		ldr	r3, .L200+48
 4231 07ea 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 111


 4232 07ec 9A42     		cmp	r2, r3
 4233 07ee D5DD     		ble	.L172
 667:main.c        ****                     }                  
 668:main.c        ****                 } 
 669:main.c        ****                 
 670:main.c        ****                 // Slider-Wert setzen
 671:main.c        ****                 Nextion_SendProgressbarValue((unsigned int)(100*counter_Lamella_Number/NumberOfMeas
 4234              		.loc 12 671 0 is_stmt 1
 4235 07f0 334B     		ldr	r3, .L200+48
 4236 07f2 1B68     		ldr	r3, [r3]
 4237 07f4 6422     		movs	r2, #100
 4238 07f6 02FB03F2 		mul	r2, r2, r3
 4239 07fa 2E4B     		ldr	r3, .L200+36
 4240 07fc 1B68     		ldr	r3, [r3]
 4241 07fe 92FBF3F3 		sdiv	r3, r2, r3
 4242 0802 1846     		mov	r0, r3
 4243 0804 FFF7FEFF 		bl	Nextion_SendProgressbarValue
 4244              	.L169:
 672:main.c        ****             }
 673:main.c        ****             
 674:main.c        ****             // Booleans so setzten, dass Plots wieder aktualisiert werden nach Wechsel der Seiten  
 675:main.c        ****             current_RescaledData_plot_refreshed = 0;
 4245              		.loc 12 675 0
 4246 0808 2F4B     		ldr	r3, .L200+56
 4247 080a 0022     		movs	r2, #0
 4248 080c 1A60     		str	r2, [r3]
 676:main.c        **** 
 677:main.c        ****            
 678:main.c        ****             break;
 4249              		.loc 12 678 0
 4250 080e 47E2     		b	.L168
 4251              	.L165:
 679:main.c        ****             
 680:main.c        ****             
 681:main.c        ****         // Seite "ScaledData"
 682:main.c        ****         case 3:  
 683:main.c        ****       
 684:main.c        ****             
 685:main.c        ****             // Umskalierte Daten in Fenster "ScaledData" malen   
 686:main.c        **** 
 687:main.c        ****             if ((timerflag1000ms ==1) && (current_RescaledData_plot_refreshed == 0))
 4252              		.loc 12 687 0
 4253 0810 304B     		ldr	r3, .L200+68
 4254 0812 1B78     		ldrb	r3, [r3]
 4255 0814 DBB2     		uxtb	r3, r3
 4256 0816 012B     		cmp	r3, #1
 4257 0818 40F01A81 		bne	.L173
 4258              		.loc 12 687 0 is_stmt 0 discriminator 1
 4259 081c 2A4B     		ldr	r3, .L200+56
 4260 081e 1B68     		ldr	r3, [r3]
 4261 0820 002B     		cmp	r3, #0
 4262 0822 40F01581 		bne	.L173
 688:main.c        ****             {                    
 689:main.c        ****                 // Ticks in Plot setzen
 690:main.c        ****                 //Nextion_Send_Value_To_Valuebox((char*)"xmax_Scaled",Lifetime_max);
 691:main.c        ****                 UART_TFT_PutString((char*)"xmax_Scaled.val=");
 4263              		.loc 12 691 0 is_stmt 1
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 112


 4264 0826 3248     		ldr	r0, .L200+96
 4265 0828 FFF7FEFF 		bl	UART_TFT_PutString
 692:main.c        ****                 // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 693:main.c        ****                 itoa(Lifetime_max, num_str, 10);
 4266              		.loc 12 693 0
 4267 082c 2B4B     		ldr	r3, .L200+76
 4268 082e 1B68     		ldr	r3, [r3]
 4269 0830 1846     		mov	r0, r3
 4270 0832 1C49     		ldr	r1, .L200+20
 4271 0834 0A22     		movs	r2, #10
 4272 0836 FFF7FEFF 		bl	itoa
 694:main.c        ****                 UART_TFT_PutString((char*)num_str);
 4273              		.loc 12 694 0
 4274 083a 1A48     		ldr	r0, .L200+20
 4275 083c FFF7FEFF 		bl	UART_TFT_PutString
 695:main.c        ****                 // Anfrage absenden
 696:main.c        ****                 UART_TFT_PutChar(0xFF);
 4276              		.loc 12 696 0
 4277 0840 FF20     		movs	r0, #255
 4278 0842 FFF7FEFF 		bl	UART_TFT_PutChar
 697:main.c        ****                 UART_TFT_PutChar(0xFF);  
 4279              		.loc 12 697 0
 4280 0846 FF20     		movs	r0, #255
 4281 0848 FFF7FEFF 		bl	UART_TFT_PutChar
 698:main.c        ****                 UART_TFT_PutChar(0xFF);
 4282              		.loc 12 698 0
 4283 084c FF20     		movs	r0, #255
 4284 084e FFF7FEFF 		bl	UART_TFT_PutChar
 699:main.c        ****             
 700:main.c        ****                 timerflag1000ms = 0;
 4285              		.loc 12 700 0
 4286 0852 204B     		ldr	r3, .L200+68
 4287 0854 0022     		movs	r2, #0
 4288 0856 1A70     		strb	r2, [r3]
 701:main.c        ****                             
 702:main.c        ****                 current_RescaledData_plot_refreshed = 1;
 4289              		.loc 12 702 0
 4290 0858 1B4B     		ldr	r3, .L200+56
 4291 085a 0122     		movs	r2, #1
 4292 085c 1A60     		str	r2, [r3]
 703:main.c        ****                                     
 704:main.c        ****                 // Bin-Breite berechnen
 705:main.c        ****                 WidthOfBin = Lifetime_max/NumberOfBins;
 4293              		.loc 12 705 0
 4294 085e 1F4B     		ldr	r3, .L200+76
 4295 0860 1B68     		ldr	r3, [r3]
 4296 0862 244A     		ldr	r2, .L200+100
 4297 0864 82FB0312 		smull	r1, r2, r2, r3
 4298 0868 1A44     		add	r2, r2, r3
 4299 086a 1211     		asrs	r2, r2, #4
 4300 086c DB17     		asrs	r3, r3, #31
 4301 086e D31A     		subs	r3, r2, r3
 4302 0870 214A     		ldr	r2, .L200+104
 4303 0872 1360     		str	r3, [r2]
 706:main.c        ****                 
 707:main.c        ****                 // Betrachtung für jedes der Bins
 708:main.c        ****                 for (j=0;j<NumberOfBins;j++)
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 113


 4304              		.loc 12 708 0
 4305 0874 1B4B     		ldr	r3, .L200+84
 4306 0876 0022     		movs	r2, #0
 4307 0878 1A60     		str	r2, [r3]
 4308 087a B8E0     		b	.L174
 4309              	.L179:
 4310              	.LBB3:
 709:main.c        ****                 {
 710:main.c        ****                     // Anzahl der Messungen mit Lebenszeit unterhalb der Grenze zum nächsten Bin b
 711:main.c        ****                     int cnt = 0;
 4311              		.loc 12 711 0
 4312 087c 0023     		movs	r3, #0
 4313 087e BB67     		str	r3, [r7, #120]
 712:main.c        ****                     float test_float = 0;
 4314              		.loc 12 712 0
 4315 0880 4FF00003 		mov	r3, #0
 4316 0884 FB66     		str	r3, [r7, #108]	@ float
 713:main.c        ****                     for (i=0;i<counter_Lamella_Number;i++)
 4317              		.loc 12 713 0
 4318 0886 034B     		ldr	r3, .L200+4
 4319 0888 0022     		movs	r2, #0
 4320 088a 1A60     		str	r2, [r3]
 4321 088c 6DE0     		b	.L175
 4322              	.L201:
 4323 088e 00BF     		.align	2
 4324              	.L200:
 4325 0890 00000000 		.word	new_pickup_initialized
 4326 0894 00000000 		.word	i
 4327 0898 00000000 		.word	present_Result_saved
 4328 089c 84000000 		.word	.LC8
 4329 08a0 00000000 		.word	ADC_value
 4330 08a4 00000000 		.word	num_str
 4331 08a8 00000000 		.word	menustate
 4332 08ac 00000000 		.word	slider_val_received
 4333 08b0 00000000 		.word	slider_val_sent
 4334 08b4 00000000 		.word	NumberOfMeasurements
 4335 08b8 3FC52543 		.word	1126548799
 4336 08bc 00000000 		.word	plot_every_nth
 4337 08c0 00000000 		.word	counter_Lamella_Number
 4338 08c4 00000000 		.word	present_LiveData_plot_refreshed
 4339 08c8 00000000 		.word	current_RescaledData_plot_refreshed
 4340 08cc 0000B442 		.word	1119092736
 4341 08d0 00806D45 		.word	1164804096
 4342 08d4 00000000 		.word	timerflag1000ms
 4343 08d8 B4010000 		.word	.LC30
 4344 08dc 00000000 		.word	Lifetime_max
 4345 08e0 C8010000 		.word	.LC31
 4346 08e4 00000000 		.word	j
 4347 08e8 00000000 		.word	Number
 4348 08ec 00000000 		.word	Lifetime
 4349 08f0 DC010000 		.word	.LC32
 4350 08f4 89888888 		.word	-2004318071
 4351 08f8 00000000 		.word	WidthOfBin
 4352              	.L178:
 714:main.c        ****                     {
 715:main.c        ****                         if (Lifetime[i]<=1.0*(j+1)*WidthOfBin+1)
 4353              		.loc 12 715 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 114


 4354 08fc B24B     		ldr	r3, .L202
 4355 08fe 1B68     		ldr	r3, [r3]
 4356 0900 B24A     		ldr	r2, .L202+4
 4357 0902 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4358 0906 1846     		mov	r0, r3
 4359 0908 FFF7FEFF 		bl	__aeabi_i2d
 4360 090c 0446     		mov	r4, r0
 4361 090e 0D46     		mov	r5, r1
 4362 0910 AF4B     		ldr	r3, .L202+8
 4363 0912 1B68     		ldr	r3, [r3]
 4364 0914 0133     		adds	r3, r3, #1
 4365 0916 1846     		mov	r0, r3
 4366 0918 FFF7FEFF 		bl	__aeabi_i2d
 4367 091c 8046     		mov	r8, r0
 4368 091e 8946     		mov	r9, r1
 4369 0920 AC4B     		ldr	r3, .L202+12
 4370 0922 1B68     		ldr	r3, [r3]
 4371 0924 1846     		mov	r0, r3
 4372 0926 FFF7FEFF 		bl	__aeabi_i2d
 4373 092a 0246     		mov	r2, r0
 4374 092c 0B46     		mov	r3, r1
 4375 092e 4046     		mov	r0, r8
 4376 0930 4946     		mov	r1, r9
 4377 0932 FFF7FEFF 		bl	__aeabi_dmul
 4378 0936 0246     		mov	r2, r0
 4379 0938 0B46     		mov	r3, r1
 4380 093a 1046     		mov	r0, r2
 4381 093c 1946     		mov	r1, r3
 4382 093e 4FF00002 		mov	r2, #0
 4383 0942 A54B     		ldr	r3, .L202+16
 4384 0944 FFF7FEFF 		bl	__aeabi_dadd
 4385 0948 0246     		mov	r2, r0
 4386 094a 0B46     		mov	r3, r1
 4387 094c 2046     		mov	r0, r4
 4388 094e 2946     		mov	r1, r5
 4389 0950 FFF7FEFF 		bl	__aeabi_dcmple
 4390 0954 0346     		mov	r3, r0
 4391 0956 002B     		cmp	r3, #0
 4392 0958 02D0     		beq	.L176
 716:main.c        ****                         {
 717:main.c        ****                             cnt = cnt + 1;
 4393              		.loc 12 717 0
 4394 095a BB6F     		ldr	r3, [r7, #120]
 4395 095c 0133     		adds	r3, r3, #1
 4396 095e BB67     		str	r3, [r7, #120]
 4397              	.L176:
 713:main.c        ****                     {
 4398              		.loc 12 713 0 discriminator 2
 4399 0960 994B     		ldr	r3, .L202
 4400 0962 1B68     		ldr	r3, [r3]
 4401 0964 0133     		adds	r3, r3, #1
 4402 0966 984A     		ldr	r2, .L202
 4403 0968 1360     		str	r3, [r2]
 4404              	.L175:
 713:main.c        ****                     {
 4405              		.loc 12 713 0 is_stmt 0 discriminator 1
 4406 096a 974B     		ldr	r3, .L202
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 115


 4407 096c 1A68     		ldr	r2, [r3]
 4408 096e 9B4B     		ldr	r3, .L202+20
 4409 0970 1B68     		ldr	r3, [r3]
 4410 0972 9A42     		cmp	r2, r3
 4411 0974 C2DB     		blt	.L178
 718:main.c        ****                         }
 719:main.c        ****                     }
 720:main.c        ****                     test_float = (1.0*cnt)/(1.0*counter_Lamella_Number);
 4412              		.loc 12 720 0 is_stmt 1 discriminator 2
 4413 0976 B86F     		ldr	r0, [r7, #120]
 4414 0978 FFF7FEFF 		bl	__aeabi_i2d
 4415 097c 0446     		mov	r4, r0
 4416 097e 0D46     		mov	r5, r1
 4417 0980 964B     		ldr	r3, .L202+20
 4418 0982 1B68     		ldr	r3, [r3]
 4419 0984 1846     		mov	r0, r3
 4420 0986 FFF7FEFF 		bl	__aeabi_i2d
 4421 098a 0246     		mov	r2, r0
 4422 098c 0B46     		mov	r3, r1
 4423 098e 2046     		mov	r0, r4
 4424 0990 2946     		mov	r1, r5
 4425 0992 FFF7FEFF 		bl	__aeabi_ddiv
 4426 0996 0246     		mov	r2, r0
 4427 0998 0B46     		mov	r3, r1
 4428 099a 1046     		mov	r0, r2
 4429 099c 1946     		mov	r1, r3
 4430 099e FFF7FEFF 		bl	__aeabi_d2f
 4431 09a2 0346     		mov	r3, r0
 4432 09a4 FB66     		str	r3, [r7, #108]	@ float
 721:main.c        ****                     Bin_Lifetime_Probability[j] = 100*(1.0-test_float);
 4433              		.loc 12 721 0 discriminator 2
 4434 09a6 8A4B     		ldr	r3, .L202+8
 4435 09a8 1C68     		ldr	r4, [r3]
 4436 09aa F86E     		ldr	r0, [r7, #108]	@ float
 4437 09ac FFF7FEFF 		bl	__aeabi_f2d
 4438 09b0 0246     		mov	r2, r0
 4439 09b2 0B46     		mov	r3, r1
 4440 09b4 4FF00000 		mov	r0, #0
 4441 09b8 8749     		ldr	r1, .L202+16
 4442 09ba FFF7FEFF 		bl	__aeabi_dsub
 4443 09be 0246     		mov	r2, r0
 4444 09c0 0B46     		mov	r3, r1
 4445 09c2 1046     		mov	r0, r2
 4446 09c4 1946     		mov	r1, r3
 4447 09c6 4FF00002 		mov	r2, #0
 4448 09ca 854B     		ldr	r3, .L202+24
 4449 09cc FFF7FEFF 		bl	__aeabi_dmul
 4450 09d0 0246     		mov	r2, r0
 4451 09d2 0B46     		mov	r3, r1
 4452 09d4 1046     		mov	r0, r2
 4453 09d6 1946     		mov	r1, r3
 4454 09d8 FFF7FEFF 		bl	__aeabi_d2f
 4455 09dc 0246     		mov	r2, r0
 4456 09de 814B     		ldr	r3, .L202+28
 4457 09e0 43F82420 		str	r2, [r3, r4, lsl #2]	@ float
 4458              	.LBE3:
 708:main.c        ****                 {
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 116


 4459              		.loc 12 708 0 discriminator 2
 4460 09e4 7A4B     		ldr	r3, .L202+8
 4461 09e6 1B68     		ldr	r3, [r3]
 4462 09e8 0133     		adds	r3, r3, #1
 4463 09ea 794A     		ldr	r2, .L202+8
 4464 09ec 1360     		str	r3, [r2]
 4465              	.L174:
 708:main.c        ****                 {
 4466              		.loc 12 708 0 is_stmt 0 discriminator 1
 4467 09ee 784B     		ldr	r3, .L202+8
 4468 09f0 1B68     		ldr	r3, [r3]
 4469 09f2 1D2B     		cmp	r3, #29
 4470 09f4 7FF742AF 		ble	.L179
 722:main.c        ****                 }
 723:main.c        ****                 
 724:main.c        ****                 // Erster Punkt der Darstellung ist immer 100% Lebenswahrscheinlichkeit bei 0 Sekun
 725:main.c        ****                 PointToScaledDataAxes(0.0, 100.0);
 4471              		.loc 12 725 0 is_stmt 1
 4472 09f8 4FF00000 		mov	r0, #0
 4473 09fc 7A49     		ldr	r1, .L202+32
 4474 09fe FFF7FEFF 		bl	PointToScaledDataAxes
 726:main.c        ****                 
 727:main.c        ****                 // Reskalierte Daten Malen
 728:main.c        ****                 for (j=0; j<NumberOfBins; j++)
 4475              		.loc 12 728 0
 4476 0a02 734B     		ldr	r3, .L202+8
 4477 0a04 0022     		movs	r2, #0
 4478 0a06 1A60     		str	r2, [r3]
 4479 0a08 12E0     		b	.L180
 4480              	.L181:
 729:main.c        ****                 {
 730:main.c        ****                     PointToScaledDataAxes(Bin_Number[j], Bin_Lifetime_Probability[j]);
 4481              		.loc 12 730 0 discriminator 3
 4482 0a0a 714B     		ldr	r3, .L202+8
 4483 0a0c 1B68     		ldr	r3, [r3]
 4484 0a0e 774A     		ldr	r2, .L202+36
 4485 0a10 52F82310 		ldr	r1, [r2, r3, lsl #2]	@ float
 4486 0a14 6E4B     		ldr	r3, .L202+8
 4487 0a16 1B68     		ldr	r3, [r3]
 4488 0a18 724A     		ldr	r2, .L202+28
 4489 0a1a 52F82330 		ldr	r3, [r2, r3, lsl #2]	@ float
 4490 0a1e 0846     		mov	r0, r1
 4491 0a20 1946     		mov	r1, r3
 4492 0a22 FFF7FEFF 		bl	PointToScaledDataAxes
 728:main.c        ****                 {
 4493              		.loc 12 728 0 discriminator 3
 4494 0a26 6A4B     		ldr	r3, .L202+8
 4495 0a28 1B68     		ldr	r3, [r3]
 4496 0a2a 0133     		adds	r3, r3, #1
 4497 0a2c 684A     		ldr	r2, .L202+8
 4498 0a2e 1360     		str	r3, [r2]
 4499              	.L180:
 728:main.c        ****                 {
 4500              		.loc 12 728 0 is_stmt 0 discriminator 1
 4501 0a30 674B     		ldr	r3, .L202+8
 4502 0a32 1B68     		ldr	r3, [r3]
 4503 0a34 1D2B     		cmp	r3, #29
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 117


 4504 0a36 E8DD     		ble	.L181
 731:main.c        ****                 } 
 732:main.c        ****                 
 733:main.c        ****                 // Slider-Wert setzen
 734:main.c        ****                 Nextion_SendProgressbarValue((unsigned int)(100*counter_Lamella_Number/NumberOfMeas
 4505              		.loc 12 734 0 is_stmt 1
 4506 0a38 684B     		ldr	r3, .L202+20
 4507 0a3a 1B68     		ldr	r3, [r3]
 4508 0a3c 6422     		movs	r2, #100
 4509 0a3e 02FB03F2 		mul	r2, r2, r3
 4510 0a42 6B4B     		ldr	r3, .L202+40
 4511 0a44 1B68     		ldr	r3, [r3]
 4512 0a46 92FBF3F3 		sdiv	r3, r2, r3
 4513 0a4a 1846     		mov	r0, r3
 4514 0a4c FFF7FEFF 		bl	Nextion_SendProgressbarValue
 4515              	.L173:
 735:main.c        ****             }
 736:main.c        ****             
 737:main.c        ****             // Booleans so setzten, dass Plots wieder aktualisiert werden nach Wechsel der Seiten
 738:main.c        ****             present_LiveData_plot_refreshed = 0;                
 4516              		.loc 12 738 0
 4517 0a50 684B     		ldr	r3, .L202+44
 4518 0a52 0022     		movs	r2, #0
 4519 0a54 1A60     		str	r2, [r3]
 739:main.c        ****           
 740:main.c        ****             break;  
 4520              		.loc 12 740 0
 4521 0a56 23E1     		b	.L168
 4522              	.L166:
 741:main.c        ****             
 742:main.c        ****         // Seite "Export"
 743:main.c        ****         case 4:          
 744:main.c        ****   
 745:main.c        ****             // Booleans so setzten, dass Plots wieder aktualisiert werden nach Wechsel der Seiten
 746:main.c        ****             present_LiveData_plot_refreshed = 0;                
 4523              		.loc 12 746 0
 4524 0a58 664B     		ldr	r3, .L202+44
 4525 0a5a 0022     		movs	r2, #0
 4526 0a5c 1A60     		str	r2, [r3]
 747:main.c        ****             current_RescaledData_plot_refreshed = 0;
 4527              		.loc 12 747 0
 4528 0a5e 664B     		ldr	r3, .L202+48
 4529 0a60 0022     		movs	r2, #0
 4530 0a62 1A60     		str	r2, [r3]
 748:main.c        ****             
 749:main.c        ****             // Pointer auf die Adresse des letzten (= 4.) Eintrag des EEPROM-Arrays setzen
 750:main.c        ****             ptr = &eepromArray[3];
 4531              		.loc 12 750 0
 4532 0a64 654B     		ldr	r3, .L202+52
 4533 0a66 3B67     		str	r3, [r7, #112]
 751:main.c        ****             // Dereferenzieren des Pointers -> Wert, auf den "ptr" zeigt in "eeprom_cnt" abspeicher
 752:main.c        ****             eeprom_cnt = *ptr;
 4534              		.loc 12 752 0
 4535 0a68 3B6F     		ldr	r3, [r7, #112]
 4536 0a6a 1B78     		ldrb	r3, [r3]
 4537 0a6c DBB2     		uxtb	r3, r3
 4538 0a6e 87F85F30 		strb	r3, [r7, #95]
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 118


 753:main.c        **** ////            // Pointer auf die Adresse des letzten (= 3.) Eintrag des EEPROM-Arrays setzen
 754:main.c        **** ////            ptr = &eepromArray[2];
 755:main.c        **** ////            // Dereferenzieren des Pointers -> Wert, auf den "ptr" zeigt in "eeprom_cnt" abspei
 756:main.c        **** ////            eeprom_cnt = eeprom_cnt+16*(*ptr);
 757:main.c        ****             
 758:main.c        ****             
 759:main.c        ****             if ((STI100_write_requested == 1) && (STI100_writing ==0))
 4539              		.loc 12 759 0
 4540 0a72 634B     		ldr	r3, .L202+56
 4541 0a74 1B68     		ldr	r3, [r3]
 4542 0a76 012B     		cmp	r3, #1
 4543 0a78 40F0D480 		bne	.L182
 4544              		.loc 12 759 0 is_stmt 0 discriminator 1
 4545 0a7c 614B     		ldr	r3, .L202+60
 4546 0a7e 1B68     		ldr	r3, [r3]
 4547 0a80 002B     		cmp	r3, #0
 4548 0a82 40F0CF80 		bne	.L182
 4549              	.LBB4:
 760:main.c        ****             {
 761:main.c        ****                                 
 762:main.c        ****                 // Angeben, dass der USB-Stick gerade beschrieben wird
 763:main.c        ****                 STI100_writing = 1;
 4550              		.loc 12 763 0 is_stmt 1
 4551 0a86 5F4B     		ldr	r3, .L202+60
 4552 0a88 0122     		movs	r2, #1
 4553 0a8a 1A60     		str	r2, [r3]
 764:main.c        ****                 
 765:main.c        ****                 // Kommunikation auf Display, dass Stick beschrieben wird
 766:main.c        ****                 // !!! TODO !!!
 767:main.c        ****                 // zusätzliches Textfeld einfügen
 768:main.c        ****                                 
 769:main.c        ****                 // Puffer für Dateiname
 770:main.c        ****                 char buffer_filename[30];
 771:main.c        ****                 // gesamten String zur Übergabe für Dateinamen zusammenbauen
 772:main.c        ****                 // z.B. "Nr-0023.txt"
 773:main.c        ****                 // Dummy-Dateiname für Testphase
 774:main.c        ****                 // eeprom_cnt = 111;
 775:main.c        ****                 sprintf((char*)buffer_filename, "Nr-%04d.txt", eeprom_cnt);     
 4554              		.loc 12 775 0
 4555 0a8c 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 4556 0a90 1A46     		mov	r2, r3
 4557 0a92 07F14003 		add	r3, r7, #64
 4558 0a96 1846     		mov	r0, r3
 4559 0a98 5B49     		ldr	r1, .L202+64
 4560 0a9a FFF7FEFF 		bl	sprintf
 776:main.c        ****             
 777:main.c        ****                 // File öffnen
 778:main.c        ****                 FS_FILE *pFile;
 779:main.c        ****                 pFile = FS_FOpen(buffer_filename, "w");
 4561              		.loc 12 779 0
 4562 0a9e 07F14003 		add	r3, r7, #64
 4563 0aa2 1846     		mov	r0, r3
 4564 0aa4 5949     		ldr	r1, .L202+68
 4565 0aa6 FFF7FEFF 		bl	FS_FOpen
 4566 0aaa B866     		str	r0, [r7, #104]
 780:main.c        ****                 CyDelay(100);
 4567              		.loc 12 780 0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 119


 4568 0aac 6420     		movs	r0, #100
 4569 0aae FFF7FEFF 		bl	CyDelay
 781:main.c        ****                 
 782:main.c        ****                 // Kopfzeile schreiben
 783:main.c        ****                 char HeaderLine[] = "NoMeasurement_au,LifeTime_s\n";
 4570              		.loc 12 783 0
 4571 0ab2 574B     		ldr	r3, .L202+72
 4572 0ab4 07F12004 		add	r4, r7, #32
 4573 0ab8 1D46     		mov	r5, r3
 4574 0aba 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 4575 0abc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 4576 0abe 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 4577 0ac2 07C4     		stmia	r4!, {r0, r1, r2}
 4578 0ac4 2370     		strb	r3, [r4]
 784:main.c        ****                 if(0 != FS_Write(pFile, HeaderLine, strlen(HeaderLine))) 
 4579              		.loc 12 784 0
 4580 0ac6 07F12003 		add	r3, r7, #32
 4581 0aca 1846     		mov	r0, r3
 4582 0acc FFF7FEFF 		bl	strlen
 4583 0ad0 0246     		mov	r2, r0
 4584 0ad2 07F12003 		add	r3, r7, #32
 4585 0ad6 B86E     		ldr	r0, [r7, #104]
 4586 0ad8 1946     		mov	r1, r3
 4587 0ada FFF7FEFF 		bl	FS_Write
 4588 0ade 0346     		mov	r3, r0
 4589 0ae0 002B     		cmp	r3, #0
 4590 0ae2 00D1     		bne	.L183
 785:main.c        ****                 {
 786:main.c        ****                     // OK
 787:main.c        ****                 }
 788:main.c        ****                 else
 789:main.c        ****                 {
 790:main.c        ****                     // Error
 791:main.c        ****                     break;
 4591              		.loc 12 791 0
 4592 0ae4 DCE0     		b	.L168
 4593              	.L183:
 792:main.c        ****                 } 
 793:main.c        ****                     
 794:main.c        ****                 // für jeden Eintrag der Arrays eine Ergebniszeile schreiben
 795:main.c        ****                 int j = 0;   
 4594              		.loc 12 795 0
 4595 0ae6 0023     		movs	r3, #0
 4596 0ae8 7B67     		str	r3, [r7, #116]
 796:main.c        ****                 
 797:main.c        ****                 for (j=0;j<NumberOfMeasurements;j++)
 4597              		.loc 12 797 0
 4598 0aea 0023     		movs	r3, #0
 4599 0aec 7B67     		str	r3, [r7, #116]
 4600 0aee 41E0     		b	.L185
 4601              	.L188:
 4602              	.LBB5:
 798:main.c        ****                 {
 799:main.c        ****                     // Erzeuegen der Ausgabe der nächsten Zeile in einem Puffer
 800:main.c        ****                     char buffer_nextline[30];
 801:main.c        ****            
 802:main.c        ****                     // String erzeugen -> z.B. "0001,324324.2" 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 120


 803:main.c        ****                     // Umrechnung countersteps -> Sekunden
 804:main.c        ****                     float Lifetime_s;
 805:main.c        ****                     Lifetime_s = 1.0*Lifetime[j]/10;
 4603              		.loc 12 805 0
 4604 0af0 364A     		ldr	r2, .L202+4
 4605 0af2 7B6F     		ldr	r3, [r7, #116]
 4606 0af4 52F82330 		ldr	r3, [r2, r3, lsl #2]
 4607 0af8 1846     		mov	r0, r3
 4608 0afa FFF7FEFF 		bl	__aeabi_i2d
 4609 0afe 0246     		mov	r2, r0
 4610 0b00 0B46     		mov	r3, r1
 4611 0b02 1046     		mov	r0, r2
 4612 0b04 1946     		mov	r1, r3
 4613 0b06 4FF00002 		mov	r2, #0
 4614 0b0a 424B     		ldr	r3, .L202+76
 4615 0b0c FFF7FEFF 		bl	__aeabi_ddiv
 4616 0b10 0246     		mov	r2, r0
 4617 0b12 0B46     		mov	r3, r1
 4618 0b14 1046     		mov	r0, r2
 4619 0b16 1946     		mov	r1, r3
 4620 0b18 FFF7FEFF 		bl	__aeabi_d2f
 4621 0b1c 0346     		mov	r3, r0
 4622 0b1e 7B66     		str	r3, [r7, #100]	@ float
 806:main.c        ****                     // Formatierten String erzeugen und in "buffer_nextline" abspeichern
 807:main.c        ****                     // floating point geht warum auch immer nicht!!!
 808:main.c        ****                     // sprintf((char*)buffer_nextline, "%04d,%d\n",Number[j],Lifetime[j]/10);
 809:main.c        ****                     // Ergebniszeile: Nummer der Messung und Lebenszeit der zugehörigen Lamelle in
 810:main.c        ****                     sprintf((char*)buffer_nextline, "%04d,%0.1f\n", Number[j], Lifetime_s);
 4623              		.loc 12 810 0
 4624 0b20 3D4A     		ldr	r2, .L202+80
 4625 0b22 7B6F     		ldr	r3, [r7, #116]
 4626 0b24 52F82340 		ldr	r4, [r2, r3, lsl #2]
 4627 0b28 786E     		ldr	r0, [r7, #100]	@ float
 4628 0b2a FFF7FEFF 		bl	__aeabi_f2d
 4629 0b2e 0246     		mov	r2, r0
 4630 0b30 0B46     		mov	r3, r1
 4631 0b32 3946     		mov	r1, r7
 4632 0b34 CDE90023 		strd	r2, [sp]
 4633 0b38 0846     		mov	r0, r1
 4634 0b3a 3849     		ldr	r1, .L202+84
 4635 0b3c 2246     		mov	r2, r4
 4636 0b3e FFF7FEFF 		bl	sprintf
 811:main.c        ****                     
 812:main.c        ****                     // gepufferte Zeile in Ergebnisdatei schreiben
 813:main.c        ****                     if(0 != FS_Write(pFile, buffer_nextline, strlen(buffer_nextline))) 
 4637              		.loc 12 813 0
 4638 0b42 3B46     		mov	r3, r7
 4639 0b44 1846     		mov	r0, r3
 4640 0b46 FFF7FEFF 		bl	strlen
 4641 0b4a 0246     		mov	r2, r0
 4642 0b4c 3B46     		mov	r3, r7
 4643 0b4e B86E     		ldr	r0, [r7, #104]
 4644 0b50 1946     		mov	r1, r3
 4645 0b52 FFF7FEFF 		bl	FS_Write
 4646 0b56 0346     		mov	r3, r0
 4647 0b58 002B     		cmp	r3, #0
 4648 0b5a 10D0     		beq	.L187
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 121


 814:main.c        ****                     {
 815:main.c        ****                         // OK
 816:main.c        ****                     }
 817:main.c        ****                     else
 818:main.c        ****                     {
 819:main.c        ****                         // Error
 820:main.c        ****                         break;
 821:main.c        ****                     } 
 822:main.c        ****                     // Slider setzen
 823:main.c        ****                     Nextion_SendSaveProgressbarValue((j/(NumberOfMeasurements-1))); 
 4649              		.loc 12 823 0 discriminator 1
 4650 0b5c 244B     		ldr	r3, .L202+40
 4651 0b5e 1B68     		ldr	r3, [r3]
 4652 0b60 013B     		subs	r3, r3, #1
 4653 0b62 7A6F     		ldr	r2, [r7, #116]
 4654 0b64 92FBF3F3 		sdiv	r3, r2, r3
 4655 0b68 1846     		mov	r0, r3
 4656 0b6a FFF7FEFF 		bl	Nextion_SendSaveProgressbarValue
 4657              	.LBE5:
 797:main.c        ****                 {
 4658              		.loc 12 797 0 discriminator 1
 4659 0b6e 7B6F     		ldr	r3, [r7, #116]
 4660 0b70 0133     		adds	r3, r3, #1
 4661 0b72 7B67     		str	r3, [r7, #116]
 4662              	.L185:
 4663 0b74 1E4B     		ldr	r3, .L202+40
 4664 0b76 1B68     		ldr	r3, [r3]
 4665 0b78 7A6F     		ldr	r2, [r7, #116]
 4666 0b7a 9A42     		cmp	r2, r3
 4667 0b7c B8DB     		blt	.L188
 4668              	.L187:
 824:main.c        ****                     //CyDelay(10);
 825:main.c        ****                 }
 826:main.c        ****                 
 827:main.c        ****                 // Schliessen der Datei, in die geschrieben wurde
 828:main.c        ****                 if(0 == FS_FClose(pFile))
 4669              		.loc 12 828 0
 4670 0b7e B86E     		ldr	r0, [r7, #104]
 4671 0b80 FFF7FEFF 		bl	FS_FClose
 4672 0b84 0346     		mov	r3, r0
 4673 0b86 002B     		cmp	r3, #0
 4674 0b88 1CD1     		bne	.L189
 829:main.c        ****                 {
 830:main.c        ****                     // alles ok
 831:main.c        ****                     CyDelay(200);
 4675              		.loc 12 831 0
 4676 0b8a C820     		movs	r0, #200
 4677 0b8c FFF7FEFF 		bl	CyDelay
 832:main.c        ****                 }
 833:main.c        ****                 else
 834:main.c        ****                 {
 835:main.c        ****                    // Fehler
 836:main.c        ****                    break;
 837:main.c        ****                 } 
 838:main.c        ****             
 839:main.c        ****                 // Angeben, dass letzte Schreibanfrage gearde abgearbeitet wurde.
 840:main.c        ****                 STI100_write_requested = 0;                    
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 122


 4678              		.loc 12 840 0
 4679 0b90 1B4B     		ldr	r3, .L202+56
 4680 0b92 0022     		movs	r2, #0
 4681 0b94 1A60     		str	r2, [r3]
 841:main.c        ****                 
 842:main.c        ****                 // Boolean, die angibt, dass Ergebnisse auf USB gespeichert wurden
 843:main.c        ****                 STI100_present_results_saved = 1;
 4682              		.loc 12 843 0
 4683 0b96 224B     		ldr	r3, .L202+88
 4684 0b98 0122     		movs	r2, #1
 4685 0b9a 1A60     		str	r2, [r3]
 844:main.c        ****                 
 845:main.c        ****                 // Angeben, dass Beschreiben des USB-Sticks gerade beendet wurde
 846:main.c        ****                 STI100_writing = 0;
 4686              		.loc 12 846 0
 4687 0b9c 194B     		ldr	r3, .L202+60
 4688 0b9e 0022     		movs	r2, #0
 4689 0ba0 1A60     		str	r2, [r3]
 847:main.c        ****                 Nextion_HideButtonSaveToUSB();
 4690              		.loc 12 847 0
 4691 0ba2 FFF7FEFF 		bl	Nextion_HideButtonSaveToUSB
 848:main.c        ****                 
 849:main.c        ****                 // EEPROM Counter bei jeder Speicherungsanfrage inkrementieren
 850:main.c        ****                 eeprom_cnt++;
 4692              		.loc 12 850 0
 4693 0ba6 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 4694 0baa 0133     		adds	r3, r3, #1
 4695 0bac DBB2     		uxtb	r3, r3
 4696 0bae 87F85F30 		strb	r3, [r7, #95]
 851:main.c        ****                 // neuen Wert des Counters in das letzte Byte des EEPROM schreiben; fängt nach 256
 852:main.c        ****                 status = Emul_EEPROM_Write(&eeprom_cnt,&eepromArray[3],1u);
 4697              		.loc 12 852 0
 4698 0bb2 07F15F03 		add	r3, r7, #95
 4699 0bb6 1846     		mov	r0, r3
 4700 0bb8 1049     		ldr	r1, .L202+52
 4701 0bba 0122     		movs	r2, #1
 4702 0bbc FFF7FEFF 		bl	Emul_EEPROM_Write
 4703 0bc0 3866     		str	r0, [r7, #96]
 4704 0bc2 2FE0     		b	.L182
 4705              	.L189:
 836:main.c        ****                 } 
 4706              		.loc 12 836 0
 4707 0bc4 00BF     		nop
 4708 0bc6 6BE0     		b	.L168
 4709              	.L203:
 4710              		.align	2
 4711              	.L202:
 4712 0bc8 00000000 		.word	i
 4713 0bcc 00000000 		.word	Lifetime
 4714 0bd0 00000000 		.word	j
 4715 0bd4 00000000 		.word	WidthOfBin
 4716 0bd8 0000F03F 		.word	1072693248
 4717 0bdc 00000000 		.word	counter_Lamella_Number
 4718 0be0 00005940 		.word	1079574528
 4719 0be4 00000000 		.word	Bin_Lifetime_Probability
 4720 0be8 0000C842 		.word	1120403456
 4721 0bec 00000000 		.word	Bin_Number
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 123


 4722 0bf0 00000000 		.word	NumberOfMeasurements
 4723 0bf4 00000000 		.word	present_LiveData_plot_refreshed
 4724 0bf8 00000000 		.word	current_RescaledData_plot_refreshed
 4725 0bfc 3B020000 		.word	eepromArray.9123+3
 4726 0c00 00000000 		.word	STI100_write_requested
 4727 0c04 00000000 		.word	STI100_writing
 4728 0c08 F0010000 		.word	.LC33
 4729 0c0c 30010000 		.word	.LC22
 4730 0c10 18020000 		.word	.LC34
 4731 0c14 00002440 		.word	1076101120
 4732 0c18 00000000 		.word	Number
 4733 0c1c FC010000 		.word	.LC35
 4734 0c20 00000000 		.word	STI100_present_results_saved
 4735              	.L182:
 4736              	.LBE4:
 853:main.c        ****             } 
 854:main.c        ****             
 855:main.c        ****             // Wechsel zwischen saved und unsaved Icon
 856:main.c        ****             if (STI100_present_results_saved == 0)
 4737              		.loc 12 856 0
 4738 0c24 1F4B     		ldr	r3, .L204
 4739 0c26 1B68     		ldr	r3, [r3]
 4740 0c28 002B     		cmp	r3, #0
 4741 0c2a 16D1     		bne	.L191
 857:main.c        ****             {
 858:main.c        ****                 //Nextion_SendSaveProgressbarValue(0);
 859:main.c        ****                 // Momentanen Wert des EEPROM-Counters an Valuebox übertragen
 860:main.c        ****                 //Nextion_Send_Value_To_Valuebox ("no_save", eeprom_cnt);
 861:main.c        ****                 UART_TFT_PutString((char*)"no_save.val=");
 4742              		.loc 12 861 0
 4743 0c2c 1E48     		ldr	r0, .L204+4
 4744 0c2e FFF7FEFF 		bl	UART_TFT_PutString
 862:main.c        ****                 // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 863:main.c        ****                 itoa(eeprom_cnt, num_str, 10);
 4745              		.loc 12 863 0
 4746 0c32 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 4747 0c36 1846     		mov	r0, r3
 4748 0c38 1C49     		ldr	r1, .L204+8
 4749 0c3a 0A22     		movs	r2, #10
 4750 0c3c FFF7FEFF 		bl	itoa
 864:main.c        ****                 UART_TFT_PutString((char*)num_str);
 4751              		.loc 12 864 0
 4752 0c40 1A48     		ldr	r0, .L204+8
 4753 0c42 FFF7FEFF 		bl	UART_TFT_PutString
 865:main.c        ****                 // Ende der Eingabe markieren
 866:main.c        ****                 UART_TFT_PutChar(0xff);
 4754              		.loc 12 866 0
 4755 0c46 FF20     		movs	r0, #255
 4756 0c48 FFF7FEFF 		bl	UART_TFT_PutChar
 867:main.c        ****                 UART_TFT_PutChar(0xff);
 4757              		.loc 12 867 0
 4758 0c4c FF20     		movs	r0, #255
 4759 0c4e FFF7FEFF 		bl	UART_TFT_PutChar
 868:main.c        ****                 UART_TFT_PutChar(0xff);
 4760              		.loc 12 868 0
 4761 0c52 FF20     		movs	r0, #255
 4762 0c54 FFF7FEFF 		bl	UART_TFT_PutChar
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 124


 4763 0c58 20E0     		b	.L192
 4764              	.L191:
 869:main.c        ****             }
 870:main.c        ****             else if (STI100_present_results_saved == 1)
 4765              		.loc 12 870 0
 4766 0c5a 124B     		ldr	r3, .L204
 4767 0c5c 1B68     		ldr	r3, [r3]
 4768 0c5e 012B     		cmp	r3, #1
 4769 0c60 1CD1     		bne	.L192
 871:main.c        ****             {
 872:main.c        ****                 Nextion_SendSaveProgressbarValue(100);
 4770              		.loc 12 872 0
 4771 0c62 6420     		movs	r0, #100
 4772 0c64 FFF7FEFF 		bl	Nextion_SendSaveProgressbarValue
 873:main.c        ****                 Nextion_HideButtonSaveToUSB();
 4773              		.loc 12 873 0
 4774 0c68 FFF7FEFF 		bl	Nextion_HideButtonSaveToUSB
 874:main.c        ****                 // Um eins erniedrigten Wert des EEPROM-Counters an Valuebox übertragen
 875:main.c        ****                 //Nextion_Send_Value_To_Valuebox ("no_save", eeprom_cnt);
 876:main.c        ****                 UART_TFT_PutString((char*)"no_save.val=");
 4775              		.loc 12 876 0
 4776 0c6c 0E48     		ldr	r0, .L204+4
 4777 0c6e FFF7FEFF 		bl	UART_TFT_PutString
 877:main.c        ****                 // Umwandlung Integer -> Array of char ("String") x_str im Decimalsystem
 878:main.c        ****                 itoa(eeprom_cnt-1, num_str, 10);
 4778              		.loc 12 878 0
 4779 0c72 97F85F30 		ldrb	r3, [r7, #95]	@ zero_extendqisi2
 4780 0c76 013B     		subs	r3, r3, #1
 4781 0c78 1846     		mov	r0, r3
 4782 0c7a 0C49     		ldr	r1, .L204+8
 4783 0c7c 0A22     		movs	r2, #10
 4784 0c7e FFF7FEFF 		bl	itoa
 879:main.c        ****                 UART_TFT_PutString((char*)num_str);
 4785              		.loc 12 879 0
 4786 0c82 0A48     		ldr	r0, .L204+8
 4787 0c84 FFF7FEFF 		bl	UART_TFT_PutString
 880:main.c        ****                 // Ende der Eingabe markieren
 881:main.c        ****                 UART_TFT_PutChar(0xff);
 4788              		.loc 12 881 0
 4789 0c88 FF20     		movs	r0, #255
 4790 0c8a FFF7FEFF 		bl	UART_TFT_PutChar
 882:main.c        ****                 UART_TFT_PutChar(0xff);
 4791              		.loc 12 882 0
 4792 0c8e FF20     		movs	r0, #255
 4793 0c90 FFF7FEFF 		bl	UART_TFT_PutChar
 883:main.c        ****                 UART_TFT_PutChar(0xff);
 4794              		.loc 12 883 0
 4795 0c94 FF20     		movs	r0, #255
 4796 0c96 FFF7FEFF 		bl	UART_TFT_PutChar
 884:main.c        ****             }
 885:main.c        ****             
 886:main.c        ****             
 887:main.c        ****             break; 
 4797              		.loc 12 887 0
 4798 0c9a 01E0     		b	.L168
 4799              	.L192:
 4800 0c9c 00E0     		b	.L168
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 125


 4801              	.L195:
 888:main.c        ****             
 889:main.c        ****         // Default case -> break
 890:main.c        ****         default:
 891:main.c        ****             break;
 4802              		.loc 12 891 0
 4803 0c9e 00BF     		nop
 4804              	.L168:
 892:main.c        ****         }    
 893:main.c        ****     }
 4805              		.loc 12 893 0 discriminator 2
 4806 0ca0 FFF787BA 		b	.L193
 4807              	.L205:
 4808              		.align	2
 4809              	.L204:
 4810 0ca4 00000000 		.word	STI100_present_results_saved
 4811 0ca8 08020000 		.word	.LC36
 4812 0cac 00000000 		.word	num_str
 4813              		.cfi_endproc
 4814              	.LFE92:
 4815              		.size	main, .-main
 4816              		.bss
 4817              	counter.9086:
 4818 0058 00       		.space	1
 4819 0059 000000   		.section	.rodata
 4820 0235 000000   		.align	2
 4821              		.type	eepromArray.9123, %object
 4822              		.size	eepromArray.9123, 4
 4823              	eepromArray.9123:
 4824 0238 00000000 		.space	4
 4825              		.text
 4826              	.Letext0:
 4827              		.file 13 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9
 4828              		.file 14 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9
 4829              		.file 15 "Generated_Source\\PSoC5/cytypes.h"
 4830              		.file 16 "..\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 4831              		.file 17 "Generated_Source\\PSoC5/core_cm3.h"
 4832              		.file 18 "Measurement_Parameters.h"
 4833              		.section	.debug_info,"",%progbits
 4834              	.Ldebug_info0:
 4835 0000 C70B0000 		.4byte	0xbc7
 4836 0004 0400     		.2byte	0x4
 4837 0006 00000000 		.4byte	.Ldebug_abbrev0
 4838 000a 04       		.byte	0x4
 4839 000b 01       		.uleb128 0x1
 4840 000c 76050000 		.4byte	.LASF144
 4841 0010 01       		.byte	0x1
 4842 0011 1C060000 		.4byte	.LASF145
 4843 0015 A2070000 		.4byte	.LASF146
 4844 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4845 001d 00000000 		.4byte	0
 4846 0021 00000000 		.4byte	.Ldebug_line0
 4847 0025 02       		.uleb128 0x2
 4848 0026 01       		.byte	0x1
 4849 0027 06       		.byte	0x6
 4850 0028 94010000 		.4byte	.LASF0
 4851 002c 02       		.uleb128 0x2
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 126


 4852 002d 01       		.byte	0x1
 4853 002e 08       		.byte	0x8
 4854 002f D6060000 		.4byte	.LASF1
 4855 0033 02       		.uleb128 0x2
 4856 0034 02       		.byte	0x2
 4857 0035 05       		.byte	0x5
 4858 0036 50020000 		.4byte	.LASF2
 4859 003a 02       		.uleb128 0x2
 4860 003b 02       		.byte	0x2
 4861 003c 07       		.byte	0x7
 4862 003d F5030000 		.4byte	.LASF3
 4863 0041 03       		.uleb128 0x3
 4864 0042 98040000 		.4byte	.LASF9
 4865 0046 0D       		.byte	0xd
 4866 0047 3F       		.byte	0x3f
 4867 0048 4C000000 		.4byte	0x4c
 4868 004c 02       		.uleb128 0x2
 4869 004d 04       		.byte	0x4
 4870 004e 05       		.byte	0x5
 4871 004f F7010000 		.4byte	.LASF4
 4872 0053 02       		.uleb128 0x2
 4873 0054 04       		.byte	0x4
 4874 0055 07       		.byte	0x7
 4875 0056 89030000 		.4byte	.LASF5
 4876 005a 02       		.uleb128 0x2
 4877 005b 08       		.byte	0x8
 4878 005c 05       		.byte	0x5
 4879 005d 86010000 		.4byte	.LASF6
 4880 0061 02       		.uleb128 0x2
 4881 0062 08       		.byte	0x8
 4882 0063 07       		.byte	0x7
 4883 0064 44010000 		.4byte	.LASF7
 4884 0068 04       		.uleb128 0x4
 4885 0069 04       		.byte	0x4
 4886 006a 05       		.byte	0x5
 4887 006b 696E7400 		.ascii	"int\000"
 4888 006f 02       		.uleb128 0x2
 4889 0070 04       		.byte	0x4
 4890 0071 07       		.byte	0x7
 4891 0072 27030000 		.4byte	.LASF8
 4892 0076 03       		.uleb128 0x3
 4893 0077 CE060000 		.4byte	.LASF10
 4894 007b 0E       		.byte	0xe
 4895 007c 2C       		.byte	0x2c
 4896 007d 41000000 		.4byte	0x41
 4897 0081 03       		.uleb128 0x3
 4898 0082 4A020000 		.4byte	.LASF11
 4899 0086 0F       		.byte	0xf
 4900 0087 A1       		.byte	0xa1
 4901 0088 2C000000 		.4byte	0x2c
 4902 008c 03       		.uleb128 0x3
 4903 008d 00000000 		.4byte	.LASF12
 4904 0091 0F       		.byte	0xf
 4905 0092 A2       		.byte	0xa2
 4906 0093 3A000000 		.4byte	0x3a
 4907 0097 02       		.uleb128 0x2
 4908 0098 04       		.byte	0x4
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 127


 4909 0099 04       		.byte	0x4
 4910 009a 61020000 		.4byte	.LASF13
 4911 009e 02       		.uleb128 0x2
 4912 009f 08       		.byte	0x8
 4913 00a0 04       		.byte	0x4
 4914 00a1 5A020000 		.4byte	.LASF14
 4915 00a5 02       		.uleb128 0x2
 4916 00a6 01       		.byte	0x1
 4917 00a7 08       		.byte	0x8
 4918 00a8 09090000 		.4byte	.LASF15
 4919 00ac 05       		.uleb128 0x5
 4920 00ad 270A0000 		.4byte	.LASF16
 4921 00b1 0F       		.byte	0xf
 4922 00b2 4301     		.2byte	0x143
 4923 00b4 53000000 		.4byte	0x53
 4924 00b8 06       		.uleb128 0x6
 4925 00b9 81000000 		.4byte	0x81
 4926 00bd 02       		.uleb128 0x2
 4927 00be 04       		.byte	0x4
 4928 00bf 07       		.byte	0x7
 4929 00c0 D1040000 		.4byte	.LASF17
 4930 00c4 07       		.uleb128 0x7
 4931 00c5 04       		.byte	0x4
 4932 00c6 2C000000 		.4byte	0x2c
 4933 00ca 07       		.uleb128 0x7
 4934 00cb 04       		.byte	0x4
 4935 00cc A5000000 		.4byte	0xa5
 4936 00d0 08       		.uleb128 0x8
 4937 00d1 81000000 		.4byte	0x81
 4938 00d5 E0000000 		.4byte	0xe0
 4939 00d9 09       		.uleb128 0x9
 4940 00da BD000000 		.4byte	0xbd
 4941 00de 03       		.byte	0x3
 4942 00df 00       		.byte	0
 4943 00e0 02       		.uleb128 0x2
 4944 00e1 08       		.byte	0x8
 4945 00e2 04       		.byte	0x4
 4946 00e3 DA040000 		.4byte	.LASF18
 4947 00e7 03       		.uleb128 0x3
 4948 00e8 700A0000 		.4byte	.LASF19
 4949 00ec 10       		.byte	0x10
 4950 00ed 7E       		.byte	0x7e
 4951 00ee F2000000 		.4byte	0xf2
 4952 00f2 0A       		.uleb128 0xa
 4953 00f3 700A0000 		.4byte	.LASF19
 4954 00f7 07       		.uleb128 0x7
 4955 00f8 04       		.byte	0x4
 4956 00f9 E7000000 		.4byte	0xe7
 4957 00fd 0B       		.uleb128 0xb
 4958 00fe A5080000 		.4byte	.LASF20
 4959 0102 01       		.byte	0x1
 4960 0103 12       		.byte	0x12
 4961 0104 00000000 		.4byte	.LFB56
 4962 0108 0C000000 		.4byte	.LFE56-.LFB56
 4963 010c 01       		.uleb128 0x1
 4964 010d 9C       		.byte	0x9c
 4965 010e 0B       		.uleb128 0xb
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 128


 4966 010f 12060000 		.4byte	.LASF21
 4967 0113 01       		.byte	0x1
 4968 0114 1A       		.byte	0x1a
 4969 0115 00000000 		.4byte	.LFB57
 4970 0119 0C000000 		.4byte	.LFE57-.LFB57
 4971 011d 01       		.uleb128 0x1
 4972 011e 9C       		.byte	0x9c
 4973 011f 0B       		.uleb128 0xb
 4974 0120 00020000 		.4byte	.LASF22
 4975 0124 02       		.byte	0x2
 4976 0125 23       		.byte	0x23
 4977 0126 00000000 		.4byte	.LFB58
 4978 012a 6C000000 		.4byte	.LFE58-.LFB58
 4979 012e 01       		.uleb128 0x1
 4980 012f 9C       		.byte	0x9c
 4981 0130 0C       		.uleb128 0xc
 4982 0131 1D050000 		.4byte	.LASF29
 4983 0135 02       		.byte	0x2
 4984 0136 4C       		.byte	0x4c
 4985 0137 00000000 		.4byte	.LFB59
 4986 013b A4020000 		.4byte	.LFE59-.LFB59
 4987 013f 01       		.uleb128 0x1
 4988 0140 9C       		.byte	0x9c
 4989 0141 B7010000 		.4byte	0x1b7
 4990 0145 0D       		.uleb128 0xd
 4991 0146 780A0000 		.4byte	.LASF23
 4992 014a 02       		.byte	0x2
 4993 014b 4C       		.byte	0x4c
 4994 014c 9E000000 		.4byte	0x9e
 4995 0150 03       		.uleb128 0x3
 4996 0151 91       		.byte	0x91
 4997 0152 B07F     		.sleb128 -80
 4998 0154 0E       		.uleb128 0xe
 4999 0155 64697200 		.ascii	"dir\000"
 5000 0159 02       		.byte	0x2
 5001 015a 4C       		.byte	0x4c
 5002 015b 9E000000 		.4byte	0x9e
 5003 015f 03       		.uleb128 0x3
 5004 0160 91       		.byte	0x91
 5005 0161 A87F     		.sleb128 -88
 5006 0163 0F       		.uleb128 0xf
 5007 0164 08040000 		.4byte	.LASF24
 5008 0168 02       		.byte	0x2
 5009 0169 53       		.byte	0x53
 5010 016a 9E000000 		.4byte	0x9e
 5011 016e 02       		.uleb128 0x2
 5012 016f 91       		.byte	0x91
 5013 0170 58       		.sleb128 -40
 5014 0171 0F       		.uleb128 0xf
 5015 0172 980A0000 		.4byte	.LASF25
 5016 0176 02       		.byte	0x2
 5017 0177 55       		.byte	0x55
 5018 0178 9E000000 		.4byte	0x9e
 5019 017c 02       		.uleb128 0x2
 5020 017d 91       		.byte	0x91
 5021 017e 40       		.sleb128 -64
 5022 017f 10       		.uleb128 0x10
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 129


 5023 0180 6900     		.ascii	"i\000"
 5024 0182 02       		.byte	0x2
 5025 0183 57       		.byte	0x57
 5026 0184 68000000 		.4byte	0x68
 5027 0188 02       		.uleb128 0x2
 5028 0189 91       		.byte	0x91
 5029 018a 64       		.sleb128 -28
 5030 018b 0F       		.uleb128 0xf
 5031 018c 67020000 		.4byte	.LASF26
 5032 0190 02       		.byte	0x2
 5033 0191 59       		.byte	0x59
 5034 0192 9E000000 		.4byte	0x9e
 5035 0196 03       		.uleb128 0x3
 5036 0197 91       		.byte	0x91
 5037 0198 B87F     		.sleb128 -72
 5038 019a 0F       		.uleb128 0xf
 5039 019b 0D020000 		.4byte	.LASF27
 5040 019f 02       		.byte	0x2
 5041 01a0 5B       		.byte	0x5b
 5042 01a1 9E000000 		.4byte	0x9e
 5043 01a5 02       		.uleb128 0x2
 5044 01a6 91       		.byte	0x91
 5045 01a7 50       		.sleb128 -48
 5046 01a8 0F       		.uleb128 0xf
 5047 01a9 35000000 		.4byte	.LASF28
 5048 01ad 02       		.byte	0x2
 5049 01ae 5D       		.byte	0x5d
 5050 01af 9E000000 		.4byte	0x9e
 5051 01b3 02       		.uleb128 0x2
 5052 01b4 91       		.byte	0x91
 5053 01b5 48       		.sleb128 -56
 5054 01b6 00       		.byte	0
 5055 01b7 0C       		.uleb128 0xc
 5056 01b8 18010000 		.4byte	.LASF30
 5057 01bc 02       		.byte	0x2
 5058 01bd A8       		.byte	0xa8
 5059 01be 00000000 		.4byte	.LFB60
 5060 01c2 BC000000 		.4byte	.LFE60-.LFB60
 5061 01c6 01       		.uleb128 0x1
 5062 01c7 9C       		.byte	0x9c
 5063 01c8 03020000 		.4byte	0x203
 5064 01cc 0D       		.uleb128 0xd
 5065 01cd 780A0000 		.4byte	.LASF23
 5066 01d1 02       		.byte	0x2
 5067 01d2 A8       		.byte	0xa8
 5068 01d3 9E000000 		.4byte	0x9e
 5069 01d7 02       		.uleb128 0x2
 5070 01d8 91       		.byte	0x91
 5071 01d9 60       		.sleb128 -32
 5072 01da 0E       		.uleb128 0xe
 5073 01db 64697200 		.ascii	"dir\000"
 5074 01df 02       		.byte	0x2
 5075 01e0 A8       		.byte	0xa8
 5076 01e1 9E000000 		.4byte	0x9e
 5077 01e5 02       		.uleb128 0x2
 5078 01e6 91       		.byte	0x91
 5079 01e7 58       		.sleb128 -40
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 130


 5080 01e8 10       		.uleb128 0x10
 5081 01e9 6900     		.ascii	"i\000"
 5082 01eb 02       		.byte	0x2
 5083 01ec AF       		.byte	0xaf
 5084 01ed 68000000 		.4byte	0x68
 5085 01f1 02       		.uleb128 0x2
 5086 01f2 91       		.byte	0x91
 5087 01f3 74       		.sleb128 -12
 5088 01f4 0F       		.uleb128 0xf
 5089 01f5 67020000 		.4byte	.LASF26
 5090 01f9 02       		.byte	0x2
 5091 01fa B1       		.byte	0xb1
 5092 01fb 9E000000 		.4byte	0x9e
 5093 01ff 02       		.uleb128 0x2
 5094 0200 91       		.byte	0x91
 5095 0201 68       		.sleb128 -24
 5096 0202 00       		.byte	0
 5097 0203 0B       		.uleb128 0xb
 5098 0204 9F020000 		.4byte	.LASF31
 5099 0208 02       		.byte	0x2
 5100 0209 D2       		.byte	0xd2
 5101 020a 00000000 		.4byte	.LFB61
 5102 020e 24000000 		.4byte	.LFE61-.LFB61
 5103 0212 01       		.uleb128 0x1
 5104 0213 9C       		.byte	0x9c
 5105 0214 0B       		.uleb128 0xb
 5106 0215 48000000 		.4byte	.LASF32
 5107 0219 02       		.byte	0x2
 5108 021a DA       		.byte	0xda
 5109 021b 00000000 		.4byte	.LFB62
 5110 021f 24000000 		.4byte	.LFE62-.LFB62
 5111 0223 01       		.uleb128 0x1
 5112 0224 9C       		.byte	0x9c
 5113 0225 0B       		.uleb128 0xb
 5114 0226 2D010000 		.4byte	.LASF33
 5115 022a 02       		.byte	0x2
 5116 022b E2       		.byte	0xe2
 5117 022c 00000000 		.4byte	.LFB63
 5118 0230 28000000 		.4byte	.LFE63-.LFB63
 5119 0234 01       		.uleb128 0x1
 5120 0235 9C       		.byte	0x9c
 5121 0236 0B       		.uleb128 0xb
 5122 0237 41070000 		.4byte	.LASF34
 5123 023b 02       		.byte	0x2
 5124 023c EB       		.byte	0xeb
 5125 023d 00000000 		.4byte	.LFB64
 5126 0241 28000000 		.4byte	.LFE64-.LFB64
 5127 0245 01       		.uleb128 0x1
 5128 0246 9C       		.byte	0x9c
 5129 0247 0C       		.uleb128 0xc
 5130 0248 F6000000 		.4byte	.LASF35
 5131 024c 02       		.byte	0x2
 5132 024d F3       		.byte	0xf3
 5133 024e 00000000 		.4byte	.LFB65
 5134 0252 68000000 		.4byte	.LFE65-.LFB65
 5135 0256 01       		.uleb128 0x1
 5136 0257 9C       		.byte	0x9c
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 131


 5137 0258 6B020000 		.4byte	0x26b
 5138 025c 0D       		.uleb128 0xd
 5139 025d 94090000 		.4byte	.LASF36
 5140 0261 02       		.byte	0x2
 5141 0262 F3       		.byte	0xf3
 5142 0263 68000000 		.4byte	0x68
 5143 0267 02       		.uleb128 0x2
 5144 0268 91       		.byte	0x91
 5145 0269 74       		.sleb128 -12
 5146 026a 00       		.byte	0
 5147 026b 0B       		.uleb128 0xb
 5148 026c A2040000 		.4byte	.LASF37
 5149 0270 03       		.byte	0x3
 5150 0271 19       		.byte	0x19
 5151 0272 00000000 		.4byte	.LFB66
 5152 0276 30000000 		.4byte	.LFE66-.LFB66
 5153 027a 01       		.uleb128 0x1
 5154 027b 9C       		.byte	0x9c
 5155 027c 11       		.uleb128 0x11
 5156 027d E0010000 		.4byte	.LASF56
 5157 0281 03       		.byte	0x3
 5158 0282 AA       		.byte	0xaa
 5159 0283 68000000 		.4byte	0x68
 5160 0287 00000000 		.4byte	.LFB67
 5161 028b 30000000 		.4byte	.LFE67-.LFB67
 5162 028f 01       		.uleb128 0x1
 5163 0290 9C       		.byte	0x9c
 5164 0291 A4020000 		.4byte	0x2a4
 5165 0295 0F       		.uleb128 0xf
 5166 0296 BC000000 		.4byte	.LASF38
 5167 029a 03       		.byte	0x3
 5168 029b AC       		.byte	0xac
 5169 029c 68000000 		.4byte	0x68
 5170 02a0 02       		.uleb128 0x2
 5171 02a1 91       		.byte	0x91
 5172 02a2 74       		.sleb128 -12
 5173 02a3 00       		.byte	0
 5174 02a4 0C       		.uleb128 0xc
 5175 02a5 68080000 		.4byte	.LASF39
 5176 02a9 03       		.byte	0x3
 5177 02aa BB       		.byte	0xbb
 5178 02ab 00000000 		.4byte	.LFB68
 5179 02af 44000000 		.4byte	.LFE68-.LFB68
 5180 02b3 01       		.uleb128 0x1
 5181 02b4 9C       		.byte	0x9c
 5182 02b5 D6020000 		.4byte	0x2d6
 5183 02b9 0D       		.uleb128 0xd
 5184 02ba 07010000 		.4byte	.LASF40
 5185 02be 03       		.byte	0x3
 5186 02bf BB       		.byte	0xbb
 5187 02c0 68000000 		.4byte	0x68
 5188 02c4 02       		.uleb128 0x2
 5189 02c5 91       		.byte	0x91
 5190 02c6 5C       		.sleb128 -36
 5191 02c7 0F       		.uleb128 0xf
 5192 02c8 17020000 		.4byte	.LASF41
 5193 02cc 03       		.byte	0x3
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 132


 5194 02cd BE       		.byte	0xbe
 5195 02ce D6020000 		.4byte	0x2d6
 5196 02d2 02       		.uleb128 0x2
 5197 02d3 91       		.byte	0x91
 5198 02d4 64       		.sleb128 -28
 5199 02d5 00       		.byte	0
 5200 02d6 08       		.uleb128 0x8
 5201 02d7 A5000000 		.4byte	0xa5
 5202 02db E6020000 		.4byte	0x2e6
 5203 02df 09       		.uleb128 0x9
 5204 02e0 BD000000 		.4byte	0xbd
 5205 02e4 13       		.byte	0x13
 5206 02e5 00       		.byte	0
 5207 02e6 0C       		.uleb128 0xc
 5208 02e7 4D030000 		.4byte	.LASF42
 5209 02eb 03       		.byte	0x3
 5210 02ec CE       		.byte	0xce
 5211 02ed 00000000 		.4byte	.LFB69
 5212 02f1 34000000 		.4byte	.LFE69-.LFB69
 5213 02f5 01       		.uleb128 0x1
 5214 02f6 9C       		.byte	0x9c
 5215 02f7 0A030000 		.4byte	0x30a
 5216 02fb 0D       		.uleb128 0xd
 5217 02fc 7F020000 		.4byte	.LASF43
 5218 0300 03       		.byte	0x3
 5219 0301 CE       		.byte	0xce
 5220 0302 68000000 		.4byte	0x68
 5221 0306 02       		.uleb128 0x2
 5222 0307 91       		.byte	0x91
 5223 0308 74       		.sleb128 -12
 5224 0309 00       		.byte	0
 5225 030a 0C       		.uleb128 0xc
 5226 030b 24050000 		.4byte	.LASF44
 5227 030f 03       		.byte	0x3
 5228 0310 DA       		.byte	0xda
 5229 0311 00000000 		.4byte	.LFB70
 5230 0315 26000000 		.4byte	.LFE70-.LFB70
 5231 0319 01       		.uleb128 0x1
 5232 031a 9C       		.byte	0x9c
 5233 031b 2E030000 		.4byte	0x32e
 5234 031f 0D       		.uleb128 0xd
 5235 0320 7F010000 		.4byte	.LASF45
 5236 0324 03       		.byte	0x3
 5237 0325 DA       		.byte	0xda
 5238 0326 C4000000 		.4byte	0xc4
 5239 032a 02       		.uleb128 0x2
 5240 032b 91       		.byte	0x91
 5241 032c 74       		.sleb128 -12
 5242 032d 00       		.byte	0
 5243 032e 0C       		.uleb128 0xc
 5244 032f BE030000 		.4byte	.LASF46
 5245 0333 03       		.byte	0x3
 5246 0334 E5       		.byte	0xe5
 5247 0335 00000000 		.4byte	.LFB71
 5248 0339 50000000 		.4byte	.LFE71-.LFB71
 5249 033d 01       		.uleb128 0x1
 5250 033e 9C       		.byte	0x9c
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 133


 5251 033f 52030000 		.4byte	0x352
 5252 0343 0F       		.uleb128 0xf
 5253 0344 65040000 		.4byte	.LASF47
 5254 0348 03       		.byte	0x3
 5255 0349 E7       		.byte	0xe7
 5256 034a 68000000 		.4byte	0x68
 5257 034e 02       		.uleb128 0x2
 5258 034f 91       		.byte	0x91
 5259 0350 74       		.sleb128 -12
 5260 0351 00       		.byte	0
 5261 0352 12       		.uleb128 0x12
 5262 0353 C1090000 		.4byte	.LASF48
 5263 0357 03       		.byte	0x3
 5264 0358 0401     		.2byte	0x104
 5265 035a 00000000 		.4byte	.LFB72
 5266 035e 44000000 		.4byte	.LFE72-.LFB72
 5267 0362 01       		.uleb128 0x1
 5268 0363 9C       		.byte	0x9c
 5269 0364 87030000 		.4byte	0x387
 5270 0368 13       		.uleb128 0x13
 5271 0369 15050000 		.4byte	.LASF49
 5272 036d 03       		.byte	0x3
 5273 036e 0401     		.2byte	0x104
 5274 0370 C4000000 		.4byte	0xc4
 5275 0374 02       		.uleb128 0x2
 5276 0375 91       		.byte	0x91
 5277 0376 74       		.sleb128 -12
 5278 0377 13       		.uleb128 0x13
 5279 0378 7F010000 		.4byte	.LASF45
 5280 037c 03       		.byte	0x3
 5281 037d 0401     		.2byte	0x104
 5282 037f C4000000 		.4byte	0xc4
 5283 0383 02       		.uleb128 0x2
 5284 0384 91       		.byte	0x91
 5285 0385 70       		.sleb128 -16
 5286 0386 00       		.byte	0
 5287 0387 12       		.uleb128 0x12
 5288 0388 DA080000 		.4byte	.LASF50
 5289 038c 03       		.byte	0x3
 5290 038d 1201     		.2byte	0x112
 5291 038f 00000000 		.4byte	.LFB73
 5292 0393 48000000 		.4byte	.LFE73-.LFB73
 5293 0397 01       		.uleb128 0x1
 5294 0398 9C       		.byte	0x9c
 5295 0399 CB030000 		.4byte	0x3cb
 5296 039d 13       		.uleb128 0x13
 5297 039e AB000000 		.4byte	.LASF51
 5298 03a2 03       		.byte	0x3
 5299 03a3 1201     		.2byte	0x112
 5300 03a5 CA000000 		.4byte	0xca
 5301 03a9 02       		.uleb128 0x2
 5302 03aa 91       		.byte	0x91
 5303 03ab 5C       		.sleb128 -36
 5304 03ac 13       		.uleb128 0x13
 5305 03ad 7F020000 		.4byte	.LASF43
 5306 03b1 03       		.byte	0x3
 5307 03b2 1201     		.2byte	0x112
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 134


 5308 03b4 68000000 		.4byte	0x68
 5309 03b8 02       		.uleb128 0x2
 5310 03b9 91       		.byte	0x91
 5311 03ba 58       		.sleb128 -40
 5312 03bb 14       		.uleb128 0x14
 5313 03bc 17020000 		.4byte	.LASF41
 5314 03c0 03       		.byte	0x3
 5315 03c1 1501     		.2byte	0x115
 5316 03c3 D6020000 		.4byte	0x2d6
 5317 03c7 02       		.uleb128 0x2
 5318 03c8 91       		.byte	0x91
 5319 03c9 64       		.sleb128 -28
 5320 03ca 00       		.byte	0
 5321 03cb 12       		.uleb128 0x12
 5322 03cc 1D080000 		.4byte	.LASF52
 5323 03d0 03       		.byte	0x3
 5324 03d1 3401     		.2byte	0x134
 5325 03d3 00000000 		.4byte	.LFB74
 5326 03d7 44000000 		.4byte	.LFE74-.LFB74
 5327 03db 01       		.uleb128 0x1
 5328 03dc 9C       		.byte	0x9c
 5329 03dd 00040000 		.4byte	0x400
 5330 03e1 13       		.uleb128 0x13
 5331 03e2 F6020000 		.4byte	.LASF53
 5332 03e6 03       		.byte	0x3
 5333 03e7 3401     		.2byte	0x134
 5334 03e9 6F000000 		.4byte	0x6f
 5335 03ed 02       		.uleb128 0x2
 5336 03ee 91       		.byte	0x91
 5337 03ef 5C       		.sleb128 -36
 5338 03f0 14       		.uleb128 0x14
 5339 03f1 17020000 		.4byte	.LASF41
 5340 03f5 03       		.byte	0x3
 5341 03f6 3701     		.2byte	0x137
 5342 03f8 D6020000 		.4byte	0x2d6
 5343 03fc 02       		.uleb128 0x2
 5344 03fd 91       		.byte	0x91
 5345 03fe 64       		.sleb128 -28
 5346 03ff 00       		.byte	0
 5347 0400 15       		.uleb128 0x15
 5348 0401 440A0000 		.4byte	.LASF54
 5349 0405 03       		.byte	0x3
 5350 0406 4501     		.2byte	0x145
 5351 0408 00000000 		.4byte	.LFB75
 5352 040c 24000000 		.4byte	.LFE75-.LFB75
 5353 0410 01       		.uleb128 0x1
 5354 0411 9C       		.byte	0x9c
 5355 0412 12       		.uleb128 0x12
 5356 0413 5A090000 		.4byte	.LASF55
 5357 0417 03       		.byte	0x3
 5358 0418 5101     		.2byte	0x151
 5359 041a 00000000 		.4byte	.LFB76
 5360 041e 44000000 		.4byte	.LFE76-.LFB76
 5361 0422 01       		.uleb128 0x1
 5362 0423 9C       		.byte	0x9c
 5363 0424 47040000 		.4byte	0x447
 5364 0428 13       		.uleb128 0x13
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 135


 5365 0429 F6020000 		.4byte	.LASF53
 5366 042d 03       		.byte	0x3
 5367 042e 5101     		.2byte	0x151
 5368 0430 6F000000 		.4byte	0x6f
 5369 0434 02       		.uleb128 0x2
 5370 0435 91       		.byte	0x91
 5371 0436 5C       		.sleb128 -36
 5372 0437 14       		.uleb128 0x14
 5373 0438 17020000 		.4byte	.LASF41
 5374 043c 03       		.byte	0x3
 5375 043d 5401     		.2byte	0x154
 5376 043f D6020000 		.4byte	0x2d6
 5377 0443 02       		.uleb128 0x2
 5378 0444 91       		.byte	0x91
 5379 0445 64       		.sleb128 -28
 5380 0446 00       		.byte	0
 5381 0447 16       		.uleb128 0x16
 5382 0448 FD060000 		.4byte	.LASF57
 5383 044c 03       		.byte	0x3
 5384 044d 6301     		.2byte	0x163
 5385 044f 68000000 		.4byte	0x68
 5386 0453 00000000 		.4byte	.LFB77
 5387 0457 68000000 		.4byte	.LFE77-.LFB77
 5388 045b 01       		.uleb128 0x1
 5389 045c 9C       		.byte	0x9c
 5390 045d 71040000 		.4byte	0x471
 5391 0461 14       		.uleb128 0x14
 5392 0462 BC000000 		.4byte	.LASF38
 5393 0466 03       		.byte	0x3
 5394 0467 6501     		.2byte	0x165
 5395 0469 68000000 		.4byte	0x68
 5396 046d 02       		.uleb128 0x2
 5397 046e 91       		.byte	0x91
 5398 046f 74       		.sleb128 -12
 5399 0470 00       		.byte	0
 5400 0471 15       		.uleb128 0x15
 5401 0472 47060000 		.4byte	.LASF58
 5402 0476 03       		.byte	0x3
 5403 0477 7601     		.2byte	0x176
 5404 0479 00000000 		.4byte	.LFB78
 5405 047d 50000000 		.4byte	.LFE78-.LFB78
 5406 0481 01       		.uleb128 0x1
 5407 0482 9C       		.byte	0x9c
 5408 0483 0C       		.uleb128 0xc
 5409 0484 FC020000 		.4byte	.LASF59
 5410 0488 04       		.byte	0x4
 5411 0489 21       		.byte	0x21
 5412 048a 00000000 		.4byte	.LFB79
 5413 048e 78010000 		.4byte	.LFE79-.LFB79
 5414 0492 01       		.uleb128 0x1
 5415 0493 9C       		.byte	0x9c
 5416 0494 BF040000 		.4byte	0x4bf
 5417 0498 0E       		.uleb128 0xe
 5418 0499 7800     		.ascii	"x\000"
 5419 049b 04       		.byte	0x4
 5420 049c 21       		.byte	0x21
 5421 049d 97000000 		.4byte	0x97
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 136


 5422 04a1 02       		.uleb128 0x2
 5423 04a2 91       		.byte	0x91
 5424 04a3 54       		.sleb128 -44
 5425 04a4 0E       		.uleb128 0xe
 5426 04a5 7900     		.ascii	"y\000"
 5427 04a7 04       		.byte	0x4
 5428 04a8 21       		.byte	0x21
 5429 04a9 97000000 		.4byte	0x97
 5430 04ad 02       		.uleb128 0x2
 5431 04ae 91       		.byte	0x91
 5432 04af 50       		.sleb128 -48
 5433 04b0 0F       		.uleb128 0xf
 5434 04b1 17020000 		.4byte	.LASF41
 5435 04b5 04       		.byte	0x4
 5436 04b6 24       		.byte	0x24
 5437 04b7 D6020000 		.4byte	0x2d6
 5438 04bb 02       		.uleb128 0x2
 5439 04bc 91       		.byte	0x91
 5440 04bd 5C       		.sleb128 -36
 5441 04be 00       		.byte	0
 5442 04bf 0C       		.uleb128 0xc
 5443 04c0 89020000 		.4byte	.LASF60
 5444 04c4 05       		.byte	0x5
 5445 04c5 20       		.byte	0x20
 5446 04c6 00000000 		.4byte	.LFB80
 5447 04ca 68010000 		.4byte	.LFE80-.LFB80
 5448 04ce 01       		.uleb128 0x1
 5449 04cf 9C       		.byte	0x9c
 5450 04d0 FB040000 		.4byte	0x4fb
 5451 04d4 0E       		.uleb128 0xe
 5452 04d5 7800     		.ascii	"x\000"
 5453 04d7 05       		.byte	0x5
 5454 04d8 20       		.byte	0x20
 5455 04d9 97000000 		.4byte	0x97
 5456 04dd 02       		.uleb128 0x2
 5457 04de 91       		.byte	0x91
 5458 04df 5C       		.sleb128 -36
 5459 04e0 0E       		.uleb128 0xe
 5460 04e1 7900     		.ascii	"y\000"
 5461 04e3 05       		.byte	0x5
 5462 04e4 20       		.byte	0x20
 5463 04e5 97000000 		.4byte	0x97
 5464 04e9 02       		.uleb128 0x2
 5465 04ea 91       		.byte	0x91
 5466 04eb 58       		.sleb128 -40
 5467 04ec 0F       		.uleb128 0xf
 5468 04ed 17020000 		.4byte	.LASF41
 5469 04f1 05       		.byte	0x5
 5470 04f2 23       		.byte	0x23
 5471 04f3 D6020000 		.4byte	0x2d6
 5472 04f7 02       		.uleb128 0x2
 5473 04f8 91       		.byte	0x91
 5474 04f9 64       		.sleb128 -28
 5475 04fa 00       		.byte	0
 5476 04fb 0C       		.uleb128 0xc
 5477 04fc C9000000 		.4byte	.LASF61
 5478 0500 06       		.byte	0x6
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 137


 5479 0501 21       		.byte	0x21
 5480 0502 00000000 		.4byte	.LFB81
 5481 0506 80010000 		.4byte	.LFE81-.LFB81
 5482 050a 01       		.uleb128 0x1
 5483 050b 9C       		.byte	0x9c
 5484 050c 49050000 		.4byte	0x549
 5485 0510 0D       		.uleb128 0xd
 5486 0511 1A0A0000 		.4byte	.LASF62
 5487 0515 06       		.byte	0x6
 5488 0516 21       		.byte	0x21
 5489 0517 97000000 		.4byte	0x97
 5490 051b 02       		.uleb128 0x2
 5491 051c 91       		.byte	0x91
 5492 051d 5C       		.sleb128 -36
 5493 051e 0D       		.uleb128 0xd
 5494 051f 04060000 		.4byte	.LASF63
 5495 0523 06       		.byte	0x6
 5496 0524 21       		.byte	0x21
 5497 0525 97000000 		.4byte	0x97
 5498 0529 02       		.uleb128 0x2
 5499 052a 91       		.byte	0x91
 5500 052b 58       		.sleb128 -40
 5501 052c 0D       		.uleb128 0xd
 5502 052d 64030000 		.4byte	.LASF64
 5503 0531 06       		.byte	0x6
 5504 0532 21       		.byte	0x21
 5505 0533 97000000 		.4byte	0x97
 5506 0537 02       		.uleb128 0x2
 5507 0538 91       		.byte	0x91
 5508 0539 54       		.sleb128 -44
 5509 053a 0F       		.uleb128 0xf
 5510 053b 17020000 		.4byte	.LASF41
 5511 053f 06       		.byte	0x6
 5512 0540 24       		.byte	0x24
 5513 0541 D6020000 		.4byte	0x2d6
 5514 0545 02       		.uleb128 0x2
 5515 0546 91       		.byte	0x91
 5516 0547 64       		.sleb128 -28
 5517 0548 00       		.byte	0
 5518 0549 17       		.uleb128 0x17
 5519 054a 88040000 		.4byte	.LASF65
 5520 054e 07       		.byte	0x7
 5521 054f 13       		.byte	0x13
 5522 0550 00000000 		.4byte	.LFB82
 5523 0554 0C000000 		.4byte	.LFE82-.LFB82
 5524 0558 01       		.uleb128 0x1
 5525 0559 9C       		.byte	0x9c
 5526 055a 11       		.uleb128 0x11
 5527 055b 0E040000 		.4byte	.LASF66
 5528 055f 07       		.byte	0x7
 5529 0560 1B       		.byte	0x1b
 5530 0561 4C000000 		.4byte	0x4c
 5531 0565 00000000 		.4byte	.LFB83
 5532 0569 20000000 		.4byte	.LFE83-.LFB83
 5533 056d 01       		.uleb128 0x1
 5534 056e 9C       		.byte	0x9c
 5535 056f 82050000 		.4byte	0x582
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 138


 5536 0573 0F       		.uleb128 0xf
 5537 0574 6D050000 		.4byte	.LASF67
 5538 0578 07       		.byte	0x7
 5539 0579 1D       		.byte	0x1d
 5540 057a 97000000 		.4byte	0x97
 5541 057e 02       		.uleb128 0x2
 5542 057f 91       		.byte	0x91
 5543 0580 74       		.sleb128 -12
 5544 0581 00       		.byte	0
 5545 0582 0C       		.uleb128 0xc
 5546 0583 DE000000 		.4byte	.LASF68
 5547 0587 08       		.byte	0x8
 5548 0588 17       		.byte	0x17
 5549 0589 00000000 		.4byte	.LFB84
 5550 058d 78000000 		.4byte	.LFE84-.LFB84
 5551 0591 01       		.uleb128 0x1
 5552 0592 9C       		.byte	0x9c
 5553 0593 A6050000 		.4byte	0x5a6
 5554 0597 0F       		.uleb128 0xf
 5555 0598 CF020000 		.4byte	.LASF69
 5556 059c 08       		.byte	0x8
 5557 059d 19       		.byte	0x19
 5558 059e 9E000000 		.4byte	0x9e
 5559 05a2 02       		.uleb128 0x2
 5560 05a3 91       		.byte	0x91
 5561 05a4 70       		.sleb128 -16
 5562 05a5 00       		.byte	0
 5563 05a6 0C       		.uleb128 0xc
 5564 05a7 1B090000 		.4byte	.LASF70
 5565 05ab 09       		.byte	0x9
 5566 05ac 1E       		.byte	0x1e
 5567 05ad 00000000 		.4byte	.LFB85
 5568 05b1 80010000 		.4byte	.LFE85-.LFB85
 5569 05b5 01       		.uleb128 0x1
 5570 05b6 9C       		.byte	0x9c
 5571 05b7 F1050000 		.4byte	0x5f1
 5572 05bb 0F       		.uleb128 0xf
 5573 05bc 39070000 		.4byte	.LASF71
 5574 05c0 09       		.byte	0x9
 5575 05c1 20       		.byte	0x20
 5576 05c2 81000000 		.4byte	0x81
 5577 05c6 05       		.uleb128 0x5
 5578 05c7 03       		.byte	0x3
 5579 05c8 58000000 		.4byte	counter.9086
 5580 05cc 0F       		.uleb128 0xf
 5581 05cd 7E040000 		.4byte	.LASF72
 5582 05d1 09       		.byte	0x9
 5583 05d2 23       		.byte	0x23
 5584 05d3 81000000 		.4byte	0x81
 5585 05d7 02       		.uleb128 0x2
 5586 05d8 91       		.byte	0x91
 5587 05d9 73       		.sleb128 -13
 5588 05da 18       		.uleb128 0x18
 5589 05db 46000000 		.4byte	.LBB2
 5590 05df 50000000 		.4byte	.LBE2-.LBB2
 5591 05e3 10       		.uleb128 0x10
 5592 05e4 6900     		.ascii	"i\000"
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 139


 5593 05e6 09       		.byte	0x9
 5594 05e7 44       		.byte	0x44
 5595 05e8 68000000 		.4byte	0x68
 5596 05ec 02       		.uleb128 0x2
 5597 05ed 91       		.byte	0x91
 5598 05ee 74       		.sleb128 -12
 5599 05ef 00       		.byte	0
 5600 05f0 00       		.byte	0
 5601 05f1 17       		.uleb128 0x17
 5602 05f2 B5020000 		.4byte	.LASF73
 5603 05f6 0A       		.byte	0xa
 5604 05f7 18       		.byte	0x18
 5605 05f8 00000000 		.4byte	.LFB86
 5606 05fc 94000000 		.4byte	.LFE86-.LFB86
 5607 0600 01       		.uleb128 0x1
 5608 0601 9C       		.byte	0x9c
 5609 0602 0C       		.uleb128 0xc
 5610 0603 BE080000 		.4byte	.LASF74
 5611 0607 0B       		.byte	0xb
 5612 0608 1B       		.byte	0x1b
 5613 0609 00000000 		.4byte	.LFB87
 5614 060d D8000000 		.4byte	.LFE87-.LFB87
 5615 0611 01       		.uleb128 0x1
 5616 0612 9C       		.byte	0x9c
 5617 0613 42060000 		.4byte	0x642
 5618 0617 0D       		.uleb128 0xd
 5619 0618 38050000 		.4byte	.LASF75
 5620 061c 0B       		.byte	0xb
 5621 061d 1B       		.byte	0x1b
 5622 061e 68000000 		.4byte	0x68
 5623 0622 02       		.uleb128 0x2
 5624 0623 91       		.byte	0x91
 5625 0624 5C       		.sleb128 -36
 5626 0625 0D       		.uleb128 0xd
 5627 0626 F6020000 		.4byte	.LASF53
 5628 062a 0B       		.byte	0xb
 5629 062b 1B       		.byte	0x1b
 5630 062c 68000000 		.4byte	0x68
 5631 0630 02       		.uleb128 0x2
 5632 0631 91       		.byte	0x91
 5633 0632 58       		.sleb128 -40
 5634 0633 0F       		.uleb128 0xf
 5635 0634 E6040000 		.4byte	.LASF76
 5636 0638 0B       		.byte	0xb
 5637 0639 1D       		.byte	0x1d
 5638 063a 42060000 		.4byte	0x642
 5639 063e 02       		.uleb128 0x2
 5640 063f 91       		.byte	0x91
 5641 0640 64       		.sleb128 -28
 5642 0641 00       		.byte	0
 5643 0642 08       		.uleb128 0x8
 5644 0643 A5000000 		.4byte	0xa5
 5645 0647 52060000 		.4byte	0x652
 5646 064b 09       		.uleb128 0x9
 5647 064c BD000000 		.4byte	0xbd
 5648 0650 09       		.byte	0x9
 5649 0651 00       		.byte	0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 140


 5650 0652 0B       		.uleb128 0xb
 5651 0653 FB090000 		.4byte	.LASF77
 5652 0657 0B       		.byte	0xb
 5653 0658 4B       		.byte	0x4b
 5654 0659 00000000 		.4byte	.LFB88
 5655 065d 20000000 		.4byte	.LFE88-.LFB88
 5656 0661 01       		.uleb128 0x1
 5657 0662 9C       		.byte	0x9c
 5658 0663 19       		.uleb128 0x19
 5659 0664 AE080000 		.4byte	.LASF78
 5660 0668 0C       		.byte	0xc
 5661 0669 65       		.byte	0x65
 5662 066a 00000000 		.4byte	.LFB89
 5663 066e 18000000 		.4byte	.LFE89-.LFB89
 5664 0672 01       		.uleb128 0x1
 5665 0673 9C       		.byte	0x9c
 5666 0674 19       		.uleb128 0x19
 5667 0675 B4000000 		.4byte	.LASF79
 5668 0679 0C       		.byte	0xc
 5669 067a 6D       		.byte	0x6d
 5670 067b 00000000 		.4byte	.LFB90
 5671 067f 0C000000 		.4byte	.LFE90-.LFB90
 5672 0683 01       		.uleb128 0x1
 5673 0684 9C       		.byte	0x9c
 5674 0685 19       		.uleb128 0x19
 5675 0686 0E090000 		.4byte	.LASF80
 5676 068a 0C       		.byte	0xc
 5677 068b 73       		.byte	0x73
 5678 068c 00000000 		.4byte	.LFB91
 5679 0690 0C000000 		.4byte	.LFE91-.LFB91
 5680 0694 01       		.uleb128 0x1
 5681 0695 9C       		.byte	0x9c
 5682 0696 1A       		.uleb128 0x1a
 5683 0697 7E0A0000 		.4byte	.LASF81
 5684 069b 0C       		.byte	0xc
 5685 069c 79       		.byte	0x79
 5686 069d 68000000 		.4byte	0x68
 5687 06a1 00000000 		.4byte	.LFB92
 5688 06a5 B00C0000 		.4byte	.LFE92-.LFB92
 5689 06a9 01       		.uleb128 0x1
 5690 06aa 9C       		.byte	0x9c
 5691 06ab 92070000 		.4byte	0x792
 5692 06af 0F       		.uleb128 0xf
 5693 06b0 46050000 		.4byte	.LASF82
 5694 06b4 0C       		.byte	0xc
 5695 06b5 AD       		.byte	0xad
 5696 06b6 92070000 		.4byte	0x792
 5697 06ba 05       		.uleb128 0x5
 5698 06bb 03       		.byte	0x3
 5699 06bc 38020000 		.4byte	eepromArray.9123
 5700 06c0 0F       		.uleb128 0xf
 5701 06c1 6E030000 		.4byte	.LASF83
 5702 06c5 0C       		.byte	0xc
 5703 06c6 B0       		.byte	0xb0
 5704 06c7 81000000 		.4byte	0x81
 5705 06cb 02       		.uleb128 0x2
 5706 06cc 91       		.byte	0x91
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 141


 5707 06cd 47       		.sleb128 -57
 5708 06ce 0F       		.uleb128 0xf
 5709 06cf BA090000 		.4byte	.LASF84
 5710 06d3 0C       		.byte	0xc
 5711 06d4 B2       		.byte	0xb2
 5712 06d5 AC000000 		.4byte	0xac
 5713 06d9 02       		.uleb128 0x2
 5714 06da 91       		.byte	0x91
 5715 06db 48       		.sleb128 -56
 5716 06dc 10       		.uleb128 0x10
 5717 06dd 70747200 		.ascii	"ptr\000"
 5718 06e1 0C       		.byte	0xc
 5719 06e2 B4       		.byte	0xb4
 5720 06e3 97070000 		.4byte	0x797
 5721 06e7 02       		.uleb128 0x2
 5722 06e8 91       		.byte	0x91
 5723 06e9 58       		.sleb128 -40
 5724 06ea 10       		.uleb128 0x10
 5725 06eb 6B00     		.ascii	"k\000"
 5726 06ed 0C       		.byte	0xc
 5727 06ee FC       		.byte	0xfc
 5728 06ef 68000000 		.4byte	0x68
 5729 06f3 02       		.uleb128 0x2
 5730 06f4 91       		.byte	0x91
 5731 06f5 64       		.sleb128 -28
 5732 06f6 1B       		.uleb128 0x1b
 5733 06f7 7C080000 		.4byte	.LBB3
 5734 06fb 68010000 		.4byte	.LBE3-.LBB3
 5735 06ff 22070000 		.4byte	0x722
 5736 0703 1C       		.uleb128 0x1c
 5737 0704 636E7400 		.ascii	"cnt\000"
 5738 0708 0C       		.byte	0xc
 5739 0709 C702     		.2byte	0x2c7
 5740 070b 68000000 		.4byte	0x68
 5741 070f 02       		.uleb128 0x2
 5742 0710 91       		.byte	0x91
 5743 0711 60       		.sleb128 -32
 5744 0712 14       		.uleb128 0x14
 5745 0713 65000000 		.4byte	.LASF85
 5746 0717 0C       		.byte	0xc
 5747 0718 C802     		.2byte	0x2c8
 5748 071a 97000000 		.4byte	0x97
 5749 071e 02       		.uleb128 0x2
 5750 071f 91       		.byte	0x91
 5751 0720 54       		.sleb128 -44
 5752 0721 00       		.byte	0
 5753 0722 18       		.uleb128 0x18
 5754 0723 860A0000 		.4byte	.LBB4
 5755 0727 9E010000 		.4byte	.LBE4-.LBB4
 5756 072b 14       		.uleb128 0x14
 5757 072c 25000000 		.4byte	.LASF86
 5758 0730 0C       		.byte	0xc
 5759 0731 0203     		.2byte	0x302
 5760 0733 A2070000 		.4byte	0x7a2
 5761 0737 03       		.uleb128 0x3
 5762 0738 91       		.byte	0x91
 5763 0739 A87F     		.sleb128 -88
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 142


 5764 073b 14       		.uleb128 0x14
 5765 073c 0C060000 		.4byte	.LASF87
 5766 0740 0C       		.byte	0xc
 5767 0741 0A03     		.2byte	0x30a
 5768 0743 F7000000 		.4byte	0xf7
 5769 0747 02       		.uleb128 0x2
 5770 0748 91       		.byte	0x91
 5771 0749 50       		.sleb128 -48
 5772 074a 14       		.uleb128 0x14
 5773 074b 62050000 		.4byte	.LASF88
 5774 074f 0C       		.byte	0xc
 5775 0750 0F03     		.2byte	0x30f
 5776 0752 B2070000 		.4byte	0x7b2
 5777 0756 03       		.uleb128 0x3
 5778 0757 91       		.byte	0x91
 5779 0758 887F     		.sleb128 -120
 5780 075a 1C       		.uleb128 0x1c
 5781 075b 6A00     		.ascii	"j\000"
 5782 075d 0C       		.byte	0xc
 5783 075e 1B03     		.2byte	0x31b
 5784 0760 68000000 		.4byte	0x68
 5785 0764 02       		.uleb128 0x2
 5786 0765 91       		.byte	0x91
 5787 0766 5C       		.sleb128 -36
 5788 0767 18       		.uleb128 0x18
 5789 0768 F00A0000 		.4byte	.LBB5
 5790 076c 7E000000 		.4byte	.LBE5-.LBB5
 5791 0770 14       		.uleb128 0x14
 5792 0771 52050000 		.4byte	.LASF89
 5793 0775 0C       		.byte	0xc
 5794 0776 2003     		.2byte	0x320
 5795 0778 A2070000 		.4byte	0x7a2
 5796 077c 03       		.uleb128 0x3
 5797 077d 91       		.byte	0x91
 5798 077e E87E     		.sleb128 -152
 5799 0780 14       		.uleb128 0x14
 5800 0781 9E0A0000 		.4byte	.LASF90
 5801 0785 0C       		.byte	0xc
 5802 0786 2403     		.2byte	0x324
 5803 0788 97000000 		.4byte	0x97
 5804 078c 02       		.uleb128 0x2
 5805 078d 91       		.byte	0x91
 5806 078e 4C       		.sleb128 -52
 5807 078f 00       		.byte	0
 5808 0790 00       		.byte	0
 5809 0791 00       		.byte	0
 5810 0792 1D       		.uleb128 0x1d
 5811 0793 D0000000 		.4byte	0xd0
 5812 0797 07       		.uleb128 0x7
 5813 0798 04       		.byte	0x4
 5814 0799 9D070000 		.4byte	0x79d
 5815 079d 1D       		.uleb128 0x1d
 5816 079e B8000000 		.4byte	0xb8
 5817 07a2 08       		.uleb128 0x8
 5818 07a3 A5000000 		.4byte	0xa5
 5819 07a7 B2070000 		.4byte	0x7b2
 5820 07ab 09       		.uleb128 0x9
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 143


 5821 07ac BD000000 		.4byte	0xbd
 5822 07b0 1D       		.byte	0x1d
 5823 07b1 00       		.byte	0
 5824 07b2 08       		.uleb128 0x8
 5825 07b3 A5000000 		.4byte	0xa5
 5826 07b7 C2070000 		.4byte	0x7c2
 5827 07bb 09       		.uleb128 0x9
 5828 07bc BD000000 		.4byte	0xbd
 5829 07c0 1C       		.byte	0x1c
 5830 07c1 00       		.byte	0
 5831 07c2 0F       		.uleb128 0xf
 5832 07c3 DA020000 		.4byte	.LASF91
 5833 07c7 02       		.byte	0x2
 5834 07c8 19       		.byte	0x19
 5835 07c9 D3070000 		.4byte	0x7d3
 5836 07cd 05       		.uleb128 0x5
 5837 07ce 03       		.byte	0x3
 5838 07cf 18000000 		.4byte	StepsDifferenceHomeSampling
 5839 07d3 1D       		.uleb128 0x1d
 5840 07d4 68000000 		.4byte	0x68
 5841 07d8 0F       		.uleb128 0xf
 5842 07d9 53080000 		.4byte	.LASF92
 5843 07dd 02       		.byte	0x2
 5844 07de 1A       		.byte	0x1a
 5845 07df D3070000 		.4byte	0x7d3
 5846 07e3 05       		.uleb128 0x5
 5847 07e4 03       		.byte	0x3
 5848 07e5 1C000000 		.4byte	StepsOneStepSettings
 5849 07e9 1E       		.uleb128 0x1e
 5850 07ea 5B010000 		.4byte	.LASF93
 5851 07ee 11       		.byte	0x11
 5852 07ef 1606     		.2byte	0x616
 5853 07f1 F5070000 		.4byte	0x7f5
 5854 07f5 06       		.uleb128 0x6
 5855 07f6 76000000 		.4byte	0x76
 5856 07fa 1F       		.uleb128 0x1f
 5857 07fb 830A0000 		.4byte	.LASF94
 5858 07ff 0C       		.byte	0xc
 5859 0800 18       		.byte	0x18
 5860 0801 0B080000 		.4byte	0x80b
 5861 0805 05       		.uleb128 0x5
 5862 0806 03       		.byte	0x3
 5863 0807 00000000 		.4byte	NumberOfMeasurements
 5864 080b 06       		.uleb128 0x6
 5865 080c 68000000 		.4byte	0x68
 5866 0810 1F       		.uleb128 0x1f
 5867 0811 E4060000 		.4byte	.LASF95
 5868 0815 0C       		.byte	0xc
 5869 0816 1A       		.byte	0x1a
 5870 0817 68000000 		.4byte	0x68
 5871 081b 05       		.uleb128 0x5
 5872 081c 03       		.byte	0x3
 5873 081d 00000000 		.4byte	ADC_value
 5874 0821 08       		.uleb128 0x8
 5875 0822 68000000 		.4byte	0x68
 5876 0826 32080000 		.4byte	0x832
 5877 082a 20       		.uleb128 0x20
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 144


 5878 082b BD000000 		.4byte	0xbd
 5879 082f E703     		.2byte	0x3e7
 5880 0831 00       		.byte	0
 5881 0832 1F       		.uleb128 0x1f
 5882 0833 CA040000 		.4byte	.LASF96
 5883 0837 0C       		.byte	0xc
 5884 0838 1B       		.byte	0x1b
 5885 0839 43080000 		.4byte	0x843
 5886 083d 05       		.uleb128 0x5
 5887 083e 03       		.byte	0x3
 5888 083f 00000000 		.4byte	Number
 5889 0843 06       		.uleb128 0x6
 5890 0844 21080000 		.4byte	0x821
 5891 0848 1F       		.uleb128 0x1f
 5892 0849 3F000000 		.4byte	.LASF97
 5893 084d 0C       		.byte	0xc
 5894 084e 1C       		.byte	0x1c
 5895 084f 59080000 		.4byte	0x859
 5896 0853 05       		.uleb128 0x5
 5897 0854 03       		.byte	0x3
 5898 0855 00000000 		.4byte	Lifetime
 5899 0859 06       		.uleb128 0x6
 5900 085a 21080000 		.4byte	0x821
 5901 085e 1F       		.uleb128 0x1f
 5902 085f 4D090000 		.4byte	.LASF98
 5903 0863 0C       		.byte	0xc
 5904 0864 1E       		.byte	0x1e
 5905 0865 0B080000 		.4byte	0x80b
 5906 0869 05       		.uleb128 0x5
 5907 086a 03       		.byte	0x3
 5908 086b 00000000 		.4byte	Lifetime_max
 5909 086f 1F       		.uleb128 0x1f
 5910 0870 7B090000 		.4byte	.LASF99
 5911 0874 0C       		.byte	0xc
 5912 0875 20       		.byte	0x20
 5913 0876 80080000 		.4byte	0x880
 5914 087a 05       		.uleb128 0x5
 5915 087b 03       		.byte	0x3
 5916 087c 00000000 		.4byte	menustate
 5917 0880 06       		.uleb128 0x6
 5918 0881 A5000000 		.4byte	0xa5
 5919 0885 08       		.uleb128 0x8
 5920 0886 A5000000 		.4byte	0xa5
 5921 088a 95080000 		.4byte	0x895
 5922 088e 09       		.uleb128 0x9
 5923 088f BD000000 		.4byte	0xbd
 5924 0893 03       		.byte	0x3
 5925 0894 00       		.byte	0
 5926 0895 1F       		.uleb128 0x1f
 5927 0896 43030000 		.4byte	.LASF100
 5928 089a 0C       		.byte	0xc
 5929 089b 22       		.byte	0x22
 5930 089c A6080000 		.4byte	0x8a6
 5931 08a0 05       		.uleb128 0x5
 5932 08a1 03       		.byte	0x3
 5933 08a2 00000000 		.4byte	RX_Buffer
 5934 08a6 06       		.uleb128 0x6
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 145


 5935 08a7 85080000 		.4byte	0x885
 5936 08ab 1F       		.uleb128 0x1f
 5937 08ac 24070000 		.4byte	.LASF101
 5938 08b0 0C       		.byte	0xc
 5939 08b1 24       		.byte	0x24
 5940 08b2 0B080000 		.4byte	0x80b
 5941 08b6 05       		.uleb128 0x5
 5942 08b7 03       		.byte	0x3
 5943 08b8 00000000 		.4byte	counter_Timer1_steps
 5944 08bc 1F       		.uleb128 0x1f
 5945 08bd 68010000 		.4byte	.LASF102
 5946 08c1 0C       		.byte	0xc
 5947 08c2 25       		.byte	0x25
 5948 08c3 0B080000 		.4byte	0x80b
 5949 08c7 05       		.uleb128 0x5
 5950 08c8 03       		.byte	0x3
 5951 08c9 00000000 		.4byte	counter_Lamella_Number
 5952 08cd 1F       		.uleb128 0x1f
 5953 08ce D4030000 		.4byte	.LASF103
 5954 08d2 0C       		.byte	0xc
 5955 08d3 28       		.byte	0x28
 5956 08d4 68000000 		.4byte	0x68
 5957 08d8 05       		.uleb128 0x5
 5958 08d9 03       		.byte	0x3
 5959 08da 00000000 		.4byte	counter_Lamella_Relaxation_steps
 5960 08de 1F       		.uleb128 0x1f
 5961 08df 64070000 		.4byte	.LASF104
 5962 08e3 0C       		.byte	0xc
 5963 08e4 2A       		.byte	0x2a
 5964 08e5 68000000 		.4byte	0x68
 5965 08e9 05       		.uleb128 0x5
 5966 08ea 03       		.byte	0x3
 5967 08eb 00000000 		.4byte	counter_Maximum_Lamella_Time_steps
 5968 08ef 1F       		.uleb128 0x1f
 5969 08f0 A0010000 		.4byte	.LASF105
 5970 08f4 0C       		.byte	0xc
 5971 08f5 2C       		.byte	0x2c
 5972 08f6 68000000 		.4byte	0x68
 5973 08fa 05       		.uleb128 0x5
 5974 08fb 03       		.byte	0x3
 5975 08fc 00000000 		.4byte	counter_Rupture_Confirmation_Target
 5976 0900 1F       		.uleb128 0x1f
 5977 0901 B1060000 		.4byte	.LASF106
 5978 0905 0C       		.byte	0xc
 5979 0906 2D       		.byte	0x2d
 5980 0907 68000000 		.4byte	0x68
 5981 090b 05       		.uleb128 0x5
 5982 090c 03       		.byte	0x3
 5983 090d 00000000 		.4byte	counter_Rupture_Confirmation
 5984 0911 1F       		.uleb128 0x1f
 5985 0912 FE040000 		.4byte	.LASF107
 5986 0916 0C       		.byte	0xc
 5987 0917 2E       		.byte	0x2e
 5988 0918 68000000 		.4byte	0x68
 5989 091c 05       		.uleb128 0x5
 5990 091d 03       		.byte	0x3
 5991 091e 00000000 		.4byte	bool_Rupture_Confirmed
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 146


 5992 0922 1F       		.uleb128 0x1f
 5993 0923 75060000 		.4byte	.LASF108
 5994 0927 0C       		.byte	0xc
 5995 0928 30       		.byte	0x30
 5996 0929 68000000 		.4byte	0x68
 5997 092d 05       		.uleb128 0x5
 5998 092e 03       		.byte	0x3
 5999 092f 00000000 		.4byte	WidthOfBin
 6000 0933 1F       		.uleb128 0x1f
 6001 0934 EE060000 		.4byte	.LASF109
 6002 0938 0C       		.byte	0xc
 6003 0939 32       		.byte	0x32
 6004 093a 80080000 		.4byte	0x880
 6005 093e 05       		.uleb128 0x5
 6006 093f 03       		.byte	0x3
 6007 0940 00000000 		.4byte	timerflag100ms
 6008 0944 1F       		.uleb128 0x1f
 6009 0945 600A0000 		.4byte	.LASF110
 6010 0949 0C       		.byte	0xc
 6011 094a 33       		.byte	0x33
 6012 094b 80080000 		.4byte	0x880
 6013 094f 05       		.uleb128 0x5
 6014 0950 03       		.byte	0x3
 6015 0951 00000000 		.4byte	timerflag1000ms
 6016 0955 1F       		.uleb128 0x1f
 6017 0956 F9080000 		.4byte	.LASF111
 6018 095a 0C       		.byte	0xc
 6019 095b 34       		.byte	0x34
 6020 095c 80080000 		.4byte	0x880
 6021 0960 05       		.uleb128 0x5
 6022 0961 03       		.byte	0x3
 6023 0962 00000000 		.4byte	timerflag5000ms
 6024 0966 1F       		.uleb128 0x1f
 6025 0967 96080000 		.4byte	.LASF112
 6026 096b 0C       		.byte	0xc
 6027 096c 36       		.byte	0x36
 6028 096d 0B080000 		.4byte	0x80b
 6029 0971 05       		.uleb128 0x5
 6030 0972 03       		.byte	0x3
 6031 0973 00000000 		.4byte	cnt_timer100ms
 6032 0977 1F       		.uleb128 0x1f
 6033 0978 DE090000 		.4byte	.LASF113
 6034 097c 0C       		.byte	0xc
 6035 097d 37       		.byte	0x37
 6036 097e 0B080000 		.4byte	0x80b
 6037 0982 05       		.uleb128 0x5
 6038 0983 03       		.byte	0x3
 6039 0984 00000000 		.4byte	cnt_timer1000ms
 6040 0988 1F       		.uleb128 0x1f
 6041 0989 54070000 		.4byte	.LASF114
 6042 098d 0C       		.byte	0xc
 6043 098e 38       		.byte	0x38
 6044 098f 0B080000 		.4byte	0x80b
 6045 0993 05       		.uleb128 0x5
 6046 0994 03       		.byte	0x3
 6047 0995 00000000 		.4byte	cnt_timer5000ms
 6048 0999 1F       		.uleb128 0x1f
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 147


 6049 099a EE090000 		.4byte	.LASF115
 6050 099e 0C       		.byte	0xc
 6051 099f 3A       		.byte	0x3a
 6052 09a0 80080000 		.4byte	0x880
 6053 09a4 05       		.uleb128 0x5
 6054 09a5 03       		.byte	0x3
 6055 09a6 00000000 		.4byte	slider_ready
 6056 09aa 1F       		.uleb128 0x1f
 6057 09ab 300A0000 		.4byte	.LASF116
 6058 09af 0C       		.byte	0xc
 6059 09b0 3B       		.byte	0x3b
 6060 09b1 80080000 		.4byte	0x880
 6061 09b5 05       		.uleb128 0x5
 6062 09b6 03       		.byte	0x3
 6063 09b7 00000000 		.4byte	Measurement_running
 6064 09bb 1F       		.uleb128 0x1f
 6065 09bc 60060000 		.4byte	.LASF117
 6066 09c0 0C       		.byte	0xc
 6067 09c1 3C       		.byte	0x3c
 6068 09c2 68000000 		.4byte	0x68
 6069 09c6 05       		.uleb128 0x5
 6070 09c7 03       		.byte	0x3
 6071 09c8 00000000 		.4byte	present_Result_saved
 6072 09cc 1F       		.uleb128 0x1f
 6073 09cd 10030000 		.4byte	.LASF118
 6074 09d1 0C       		.byte	0xc
 6075 09d2 3D       		.byte	0x3d
 6076 09d3 80080000 		.4byte	0x880
 6077 09d7 05       		.uleb128 0x5
 6078 09d8 03       		.byte	0x3
 6079 09d9 00000000 		.4byte	new_pickup_initialized
 6080 09dd 1F       		.uleb128 0x1f
 6081 09de 79030000 		.4byte	.LASF119
 6082 09e2 0C       		.byte	0xc
 6083 09e3 3E       		.byte	0x3e
 6084 09e4 80080000 		.4byte	0x880
 6085 09e8 05       		.uleb128 0x5
 6086 09e9 03       		.byte	0x3
 6087 09ea 00000000 		.4byte	slider_val_sent
 6088 09ee 1F       		.uleb128 0x1f
 6089 09ef AA030000 		.4byte	.LASF120
 6090 09f3 0C       		.byte	0xc
 6091 09f4 3F       		.byte	0x3f
 6092 09f5 80080000 		.4byte	0x880
 6093 09f9 05       		.uleb128 0x5
 6094 09fa 03       		.byte	0x3
 6095 09fb 00000000 		.4byte	slider_val_received
 6096 09ff 1F       		.uleb128 0x1f
 6097 0a00 70000000 		.4byte	.LASF121
 6098 0a04 0C       		.byte	0xc
 6099 0a05 40       		.byte	0x40
 6100 0a06 0B080000 		.4byte	0x80b
 6101 0a0a 05       		.uleb128 0x5
 6102 0a0b 03       		.byte	0x3
 6103 0a0c 00000000 		.4byte	present_LiveData_plot_refreshed
 6104 0a10 1F       		.uleb128 0x1f
 6105 0a11 23060000 		.4byte	.LASF122
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 148


 6106 0a15 0C       		.byte	0xc
 6107 0a16 41       		.byte	0x41
 6108 0a17 0B080000 		.4byte	0x80b
 6109 0a1b 05       		.uleb128 0x5
 6110 0a1c 03       		.byte	0x3
 6111 0a1d 00000000 		.4byte	current_RescaledData_plot_refreshed
 6112 0a21 1F       		.uleb128 0x1f
 6113 0a22 85090000 		.4byte	.LASF123
 6114 0a26 0C       		.byte	0xc
 6115 0a27 42       		.byte	0x42
 6116 0a28 0B080000 		.4byte	0x80b
 6117 0a2c 05       		.uleb128 0x5
 6118 0a2d 03       		.byte	0x3
 6119 0a2e 00000000 		.4byte	STI100_writing
 6120 0a32 1F       		.uleb128 0x1f
 6121 0a33 36090000 		.4byte	.LASF124
 6122 0a37 0C       		.byte	0xc
 6123 0a38 43       		.byte	0x43
 6124 0a39 0B080000 		.4byte	0x80b
 6125 0a3d 05       		.uleb128 0x5
 6126 0a3e 03       		.byte	0x3
 6127 0a3f 00000000 		.4byte	STI100_write_requested
 6128 0a43 1F       		.uleb128 0x1f
 6129 0a44 9D090000 		.4byte	.LASF125
 6130 0a48 0C       		.byte	0xc
 6131 0a49 44       		.byte	0x44
 6132 0a4a 0B080000 		.4byte	0x80b
 6133 0a4e 05       		.uleb128 0x5
 6134 0a4f 03       		.byte	0x3
 6135 0a50 00000000 		.4byte	STI100_present_results_saved
 6136 0a54 1F       		.uleb128 0x1f
 6137 0a55 17020000 		.4byte	.LASF41
 6138 0a59 0C       		.byte	0xc
 6139 0a5a 46       		.byte	0x46
 6140 0a5b D6020000 		.4byte	0x2d6
 6141 0a5f 05       		.uleb128 0x5
 6142 0a60 03       		.byte	0x3
 6143 0a61 00000000 		.4byte	num_str
 6144 0a65 1F       		.uleb128 0x1f
 6145 0a66 0B0A0000 		.4byte	.LASF126
 6146 0a6a 0C       		.byte	0xc
 6147 0a6b 47       		.byte	0x47
 6148 0a6c C4000000 		.4byte	0xc4
 6149 0a70 05       		.uleb128 0x5
 6150 0a71 03       		.byte	0x3
 6151 0a72 00000000 		.4byte	NameOfValuebox
 6152 0a76 21       		.uleb128 0x21
 6153 0a77 6900     		.ascii	"i\000"
 6154 0a79 0C       		.byte	0xc
 6155 0a7a 49       		.byte	0x49
 6156 0a7b 68000000 		.4byte	0x68
 6157 0a7f 05       		.uleb128 0x5
 6158 0a80 03       		.byte	0x3
 6159 0a81 00000000 		.4byte	i
 6160 0a85 21       		.uleb128 0x21
 6161 0a86 6A00     		.ascii	"j\000"
 6162 0a88 0C       		.byte	0xc
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 149


 6163 0a89 4A       		.byte	0x4a
 6164 0a8a 68000000 		.4byte	0x68
 6165 0a8e 05       		.uleb128 0x5
 6166 0a8f 03       		.byte	0x3
 6167 0a90 00000000 		.4byte	j
 6168 0a94 1F       		.uleb128 0x1f
 6169 0a95 34030000 		.4byte	.LASF127
 6170 0a99 0C       		.byte	0xc
 6171 0a9a 4C       		.byte	0x4c
 6172 0a9b 0B080000 		.4byte	0x80b
 6173 0a9f 05       		.uleb128 0x5
 6174 0aa0 03       		.byte	0x3
 6175 0aa1 00000000 		.4byte	plot_every_nth
 6176 0aa5 1F       		.uleb128 0x1f
 6177 0aa6 80080000 		.4byte	.LASF128
 6178 0aaa 0C       		.byte	0xc
 6179 0aab 4E       		.byte	0x4e
 6180 0aac D3070000 		.4byte	0x7d3
 6181 0ab0 05       		.uleb128 0x5
 6182 0ab1 03       		.byte	0x3
 6183 0ab2 00000000 		.4byte	Lamella_Logger_Time_s
 6184 0ab6 1F       		.uleb128 0x1f
 6185 0ab7 1F020000 		.4byte	.LASF129
 6186 0abb 0C       		.byte	0xc
 6187 0abc 4F       		.byte	0x4f
 6188 0abd 68000000 		.4byte	0x68
 6189 0ac1 05       		.uleb128 0x5
 6190 0ac2 03       		.byte	0x3
 6191 0ac3 00000000 		.4byte	counter_Lamella_Logger_steps
 6192 0ac7 1F       		.uleb128 0x1f
 6193 0ac8 3C040000 		.4byte	.LASF130
 6194 0acc 12       		.byte	0x12
 6195 0acd 11       		.byte	0x11
 6196 0ace D80A0000 		.4byte	0xad8
 6197 0ad2 05       		.uleb128 0x5
 6198 0ad3 03       		.byte	0x3
 6199 0ad4 00000000 		.4byte	Maximum_Lamella_Time_h
 6200 0ad8 1D       		.uleb128 0x1d
 6201 0ad9 97000000 		.4byte	0x97
 6202 0add 1F       		.uleb128 0x1f
 6203 0ade 97060000 		.4byte	.LASF131
 6204 0ae2 12       		.byte	0x12
 6205 0ae3 12       		.byte	0x12
 6206 0ae4 D3070000 		.4byte	0x7d3
 6207 0ae8 05       		.uleb128 0x5
 6208 0ae9 03       		.byte	0x3
 6209 0aea 00000000 		.4byte	Lamella_Relaxation_Time_s
 6210 0aee 1F       		.uleb128 0x1f
 6211 0aef C4010000 		.4byte	.LASF132
 6212 0af3 12       		.byte	0x12
 6213 0af4 13       		.byte	0x13
 6214 0af5 D80A0000 		.4byte	0xad8
 6215 0af9 05       		.uleb128 0x5
 6216 0afa 03       		.byte	0x3
 6217 0afb 00000000 		.4byte	Rupture_Confirmation_Time_s
 6218 0aff 1F       		.uleb128 0x1f
 6219 0b00 80060000 		.4byte	.LASF133
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 150


 6220 0b04 12       		.byte	0x12
 6221 0b05 15       		.byte	0x15
 6222 0b06 D3070000 		.4byte	0x7d3
 6223 0b0a 05       		.uleb128 0x5
 6224 0b0b 03       		.byte	0x3
 6225 0b0c 00000000 		.4byte	SampligCountsPerSecond
 6226 0b10 1F       		.uleb128 0x1f
 6227 0b11 B2040000 		.4byte	.LASF134
 6228 0b15 12       		.byte	0x12
 6229 0b16 17       		.byte	0x17
 6230 0b17 D3070000 		.4byte	0x7d3
 6231 0b1b 05       		.uleb128 0x5
 6232 0b1c 03       		.byte	0x3
 6233 0b1d 00000000 		.4byte	LamellaFormationTime_ms
 6234 0b21 1F       		.uleb128 0x1f
 6235 0b22 3C020000 		.4byte	.LASF135
 6236 0b26 02       		.byte	0x2
 6237 0b27 1C       		.byte	0x1c
 6238 0b28 9E000000 		.4byte	0x9e
 6239 0b2c 05       		.uleb128 0x5
 6240 0b2d 03       		.byte	0x3
 6241 0b2e 00000000 		.4byte	f_max_Stepper
 6242 0b32 1F       		.uleb128 0x1f
 6243 0b33 2A040000 		.4byte	.LASF136
 6244 0b37 02       		.byte	0x2
 6245 0b38 1D       		.byte	0x1d
 6246 0b39 9E000000 		.4byte	0x9e
 6247 0b3d 05       		.uleb128 0x5
 6248 0b3e 03       		.byte	0x3
 6249 0b3f 00000000 		.4byte	sig_shift_Stepper
 6250 0b43 1F       		.uleb128 0x1f
 6251 0b44 53040000 		.4byte	.LASF137
 6252 0b48 02       		.byte	0x2
 6253 0b49 1E       		.byte	0x1e
 6254 0b4a 9E000000 		.4byte	0x9e
 6255 0b4e 05       		.uleb128 0x5
 6256 0b4f 03       		.byte	0x3
 6257 0b50 00000000 		.4byte	sig_raise_Stepper
 6258 0b54 1F       		.uleb128 0x1f
 6259 0b55 90000000 		.4byte	.LASF138
 6260 0b59 0B       		.byte	0xb
 6261 0b5a 11       		.byte	0x11
 6262 0b5b A2070000 		.4byte	0x7a2
 6263 0b5f 05       		.uleb128 0x5
 6264 0b60 03       		.byte	0x3
 6265 0b61 00000000 		.4byte	FileNameCurrentLamellaFile
 6266 0b65 1F       		.uleb128 0x1f
 6267 0b66 87070000 		.4byte	.LASF139
 6268 0b6a 0B       		.byte	0xb
 6269 0b6b 12       		.byte	0x12
 6270 0b6c 68000000 		.4byte	0x68
 6271 0b70 05       		.uleb128 0x5
 6272 0b71 03       		.byte	0x3
 6273 0b72 00000000 		.4byte	bool_NewLamellaFileNameSet
 6274 0b76 1F       		.uleb128 0x1f
 6275 0b77 07000000 		.4byte	.LASF140
 6276 0b7b 0B       		.byte	0xb
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 151


 6277 0b7c 14       		.byte	0x14
 6278 0b7d D3070000 		.4byte	0x7d3
 6279 0b81 05       		.uleb128 0x5
 6280 0b82 03       		.byte	0x3
 6281 0b83 00000000 		.4byte	AllDataPointLoggerTimeLimit_s
 6282 0b87 1F       		.uleb128 0x1f
 6283 0b88 9B030000 		.4byte	.LASF141
 6284 0b8c 0B       		.byte	0xb
 6285 0b8d 16       		.byte	0x16
 6286 0b8e F7000000 		.4byte	0xf7
 6287 0b92 05       		.uleb128 0x5
 6288 0b93 03       		.byte	0x3
 6289 0b94 00000000 		.4byte	FileNameLogger
 6290 0b98 08       		.uleb128 0x8
 6291 0b99 97000000 		.4byte	0x97
 6292 0b9d A80B0000 		.4byte	0xba8
 6293 0ba1 09       		.uleb128 0x9
 6294 0ba2 BD000000 		.4byte	0xbd
 6295 0ba6 1D       		.byte	0x1d
 6296 0ba7 00       		.byte	0
 6297 0ba8 1F       		.uleb128 0x1f
 6298 0ba9 74020000 		.4byte	.LASF142
 6299 0bad 0C       		.byte	0xc
 6300 0bae 5F       		.byte	0x5f
 6301 0baf 980B0000 		.4byte	0xb98
 6302 0bb3 05       		.uleb128 0x5
 6303 0bb4 03       		.byte	0x3
 6304 0bb5 00000000 		.4byte	Bin_Number
 6305 0bb9 1F       		.uleb128 0x1f
 6306 0bba 3A080000 		.4byte	.LASF143
 6307 0bbe 0C       		.byte	0xc
 6308 0bbf 60       		.byte	0x60
 6309 0bc0 980B0000 		.4byte	0xb98
 6310 0bc4 05       		.uleb128 0x5
 6311 0bc5 03       		.byte	0x3
 6312 0bc6 00000000 		.4byte	Bin_Lifetime_Probability
 6313 0bca 00       		.byte	0
 6314              		.section	.debug_abbrev,"",%progbits
 6315              	.Ldebug_abbrev0:
 6316 0000 01       		.uleb128 0x1
 6317 0001 11       		.uleb128 0x11
 6318 0002 01       		.byte	0x1
 6319 0003 25       		.uleb128 0x25
 6320 0004 0E       		.uleb128 0xe
 6321 0005 13       		.uleb128 0x13
 6322 0006 0B       		.uleb128 0xb
 6323 0007 03       		.uleb128 0x3
 6324 0008 0E       		.uleb128 0xe
 6325 0009 1B       		.uleb128 0x1b
 6326 000a 0E       		.uleb128 0xe
 6327 000b 55       		.uleb128 0x55
 6328 000c 17       		.uleb128 0x17
 6329 000d 11       		.uleb128 0x11
 6330 000e 01       		.uleb128 0x1
 6331 000f 10       		.uleb128 0x10
 6332 0010 17       		.uleb128 0x17
 6333 0011 00       		.byte	0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 152


 6334 0012 00       		.byte	0
 6335 0013 02       		.uleb128 0x2
 6336 0014 24       		.uleb128 0x24
 6337 0015 00       		.byte	0
 6338 0016 0B       		.uleb128 0xb
 6339 0017 0B       		.uleb128 0xb
 6340 0018 3E       		.uleb128 0x3e
 6341 0019 0B       		.uleb128 0xb
 6342 001a 03       		.uleb128 0x3
 6343 001b 0E       		.uleb128 0xe
 6344 001c 00       		.byte	0
 6345 001d 00       		.byte	0
 6346 001e 03       		.uleb128 0x3
 6347 001f 16       		.uleb128 0x16
 6348 0020 00       		.byte	0
 6349 0021 03       		.uleb128 0x3
 6350 0022 0E       		.uleb128 0xe
 6351 0023 3A       		.uleb128 0x3a
 6352 0024 0B       		.uleb128 0xb
 6353 0025 3B       		.uleb128 0x3b
 6354 0026 0B       		.uleb128 0xb
 6355 0027 49       		.uleb128 0x49
 6356 0028 13       		.uleb128 0x13
 6357 0029 00       		.byte	0
 6358 002a 00       		.byte	0
 6359 002b 04       		.uleb128 0x4
 6360 002c 24       		.uleb128 0x24
 6361 002d 00       		.byte	0
 6362 002e 0B       		.uleb128 0xb
 6363 002f 0B       		.uleb128 0xb
 6364 0030 3E       		.uleb128 0x3e
 6365 0031 0B       		.uleb128 0xb
 6366 0032 03       		.uleb128 0x3
 6367 0033 08       		.uleb128 0x8
 6368 0034 00       		.byte	0
 6369 0035 00       		.byte	0
 6370 0036 05       		.uleb128 0x5
 6371 0037 16       		.uleb128 0x16
 6372 0038 00       		.byte	0
 6373 0039 03       		.uleb128 0x3
 6374 003a 0E       		.uleb128 0xe
 6375 003b 3A       		.uleb128 0x3a
 6376 003c 0B       		.uleb128 0xb
 6377 003d 3B       		.uleb128 0x3b
 6378 003e 05       		.uleb128 0x5
 6379 003f 49       		.uleb128 0x49
 6380 0040 13       		.uleb128 0x13
 6381 0041 00       		.byte	0
 6382 0042 00       		.byte	0
 6383 0043 06       		.uleb128 0x6
 6384 0044 35       		.uleb128 0x35
 6385 0045 00       		.byte	0
 6386 0046 49       		.uleb128 0x49
 6387 0047 13       		.uleb128 0x13
 6388 0048 00       		.byte	0
 6389 0049 00       		.byte	0
 6390 004a 07       		.uleb128 0x7
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 153


 6391 004b 0F       		.uleb128 0xf
 6392 004c 00       		.byte	0
 6393 004d 0B       		.uleb128 0xb
 6394 004e 0B       		.uleb128 0xb
 6395 004f 49       		.uleb128 0x49
 6396 0050 13       		.uleb128 0x13
 6397 0051 00       		.byte	0
 6398 0052 00       		.byte	0
 6399 0053 08       		.uleb128 0x8
 6400 0054 01       		.uleb128 0x1
 6401 0055 01       		.byte	0x1
 6402 0056 49       		.uleb128 0x49
 6403 0057 13       		.uleb128 0x13
 6404 0058 01       		.uleb128 0x1
 6405 0059 13       		.uleb128 0x13
 6406 005a 00       		.byte	0
 6407 005b 00       		.byte	0
 6408 005c 09       		.uleb128 0x9
 6409 005d 21       		.uleb128 0x21
 6410 005e 00       		.byte	0
 6411 005f 49       		.uleb128 0x49
 6412 0060 13       		.uleb128 0x13
 6413 0061 2F       		.uleb128 0x2f
 6414 0062 0B       		.uleb128 0xb
 6415 0063 00       		.byte	0
 6416 0064 00       		.byte	0
 6417 0065 0A       		.uleb128 0xa
 6418 0066 13       		.uleb128 0x13
 6419 0067 00       		.byte	0
 6420 0068 03       		.uleb128 0x3
 6421 0069 0E       		.uleb128 0xe
 6422 006a 3C       		.uleb128 0x3c
 6423 006b 19       		.uleb128 0x19
 6424 006c 00       		.byte	0
 6425 006d 00       		.byte	0
 6426 006e 0B       		.uleb128 0xb
 6427 006f 2E       		.uleb128 0x2e
 6428 0070 00       		.byte	0
 6429 0071 3F       		.uleb128 0x3f
 6430 0072 19       		.uleb128 0x19
 6431 0073 03       		.uleb128 0x3
 6432 0074 0E       		.uleb128 0xe
 6433 0075 3A       		.uleb128 0x3a
 6434 0076 0B       		.uleb128 0xb
 6435 0077 3B       		.uleb128 0x3b
 6436 0078 0B       		.uleb128 0xb
 6437 0079 27       		.uleb128 0x27
 6438 007a 19       		.uleb128 0x19
 6439 007b 11       		.uleb128 0x11
 6440 007c 01       		.uleb128 0x1
 6441 007d 12       		.uleb128 0x12
 6442 007e 06       		.uleb128 0x6
 6443 007f 40       		.uleb128 0x40
 6444 0080 18       		.uleb128 0x18
 6445 0081 9642     		.uleb128 0x2116
 6446 0083 19       		.uleb128 0x19
 6447 0084 00       		.byte	0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 154


 6448 0085 00       		.byte	0
 6449 0086 0C       		.uleb128 0xc
 6450 0087 2E       		.uleb128 0x2e
 6451 0088 01       		.byte	0x1
 6452 0089 3F       		.uleb128 0x3f
 6453 008a 19       		.uleb128 0x19
 6454 008b 03       		.uleb128 0x3
 6455 008c 0E       		.uleb128 0xe
 6456 008d 3A       		.uleb128 0x3a
 6457 008e 0B       		.uleb128 0xb
 6458 008f 3B       		.uleb128 0x3b
 6459 0090 0B       		.uleb128 0xb
 6460 0091 27       		.uleb128 0x27
 6461 0092 19       		.uleb128 0x19
 6462 0093 11       		.uleb128 0x11
 6463 0094 01       		.uleb128 0x1
 6464 0095 12       		.uleb128 0x12
 6465 0096 06       		.uleb128 0x6
 6466 0097 40       		.uleb128 0x40
 6467 0098 18       		.uleb128 0x18
 6468 0099 9642     		.uleb128 0x2116
 6469 009b 19       		.uleb128 0x19
 6470 009c 01       		.uleb128 0x1
 6471 009d 13       		.uleb128 0x13
 6472 009e 00       		.byte	0
 6473 009f 00       		.byte	0
 6474 00a0 0D       		.uleb128 0xd
 6475 00a1 05       		.uleb128 0x5
 6476 00a2 00       		.byte	0
 6477 00a3 03       		.uleb128 0x3
 6478 00a4 0E       		.uleb128 0xe
 6479 00a5 3A       		.uleb128 0x3a
 6480 00a6 0B       		.uleb128 0xb
 6481 00a7 3B       		.uleb128 0x3b
 6482 00a8 0B       		.uleb128 0xb
 6483 00a9 49       		.uleb128 0x49
 6484 00aa 13       		.uleb128 0x13
 6485 00ab 02       		.uleb128 0x2
 6486 00ac 18       		.uleb128 0x18
 6487 00ad 00       		.byte	0
 6488 00ae 00       		.byte	0
 6489 00af 0E       		.uleb128 0xe
 6490 00b0 05       		.uleb128 0x5
 6491 00b1 00       		.byte	0
 6492 00b2 03       		.uleb128 0x3
 6493 00b3 08       		.uleb128 0x8
 6494 00b4 3A       		.uleb128 0x3a
 6495 00b5 0B       		.uleb128 0xb
 6496 00b6 3B       		.uleb128 0x3b
 6497 00b7 0B       		.uleb128 0xb
 6498 00b8 49       		.uleb128 0x49
 6499 00b9 13       		.uleb128 0x13
 6500 00ba 02       		.uleb128 0x2
 6501 00bb 18       		.uleb128 0x18
 6502 00bc 00       		.byte	0
 6503 00bd 00       		.byte	0
 6504 00be 0F       		.uleb128 0xf
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 155


 6505 00bf 34       		.uleb128 0x34
 6506 00c0 00       		.byte	0
 6507 00c1 03       		.uleb128 0x3
 6508 00c2 0E       		.uleb128 0xe
 6509 00c3 3A       		.uleb128 0x3a
 6510 00c4 0B       		.uleb128 0xb
 6511 00c5 3B       		.uleb128 0x3b
 6512 00c6 0B       		.uleb128 0xb
 6513 00c7 49       		.uleb128 0x49
 6514 00c8 13       		.uleb128 0x13
 6515 00c9 02       		.uleb128 0x2
 6516 00ca 18       		.uleb128 0x18
 6517 00cb 00       		.byte	0
 6518 00cc 00       		.byte	0
 6519 00cd 10       		.uleb128 0x10
 6520 00ce 34       		.uleb128 0x34
 6521 00cf 00       		.byte	0
 6522 00d0 03       		.uleb128 0x3
 6523 00d1 08       		.uleb128 0x8
 6524 00d2 3A       		.uleb128 0x3a
 6525 00d3 0B       		.uleb128 0xb
 6526 00d4 3B       		.uleb128 0x3b
 6527 00d5 0B       		.uleb128 0xb
 6528 00d6 49       		.uleb128 0x49
 6529 00d7 13       		.uleb128 0x13
 6530 00d8 02       		.uleb128 0x2
 6531 00d9 18       		.uleb128 0x18
 6532 00da 00       		.byte	0
 6533 00db 00       		.byte	0
 6534 00dc 11       		.uleb128 0x11
 6535 00dd 2E       		.uleb128 0x2e
 6536 00de 01       		.byte	0x1
 6537 00df 3F       		.uleb128 0x3f
 6538 00e0 19       		.uleb128 0x19
 6539 00e1 03       		.uleb128 0x3
 6540 00e2 0E       		.uleb128 0xe
 6541 00e3 3A       		.uleb128 0x3a
 6542 00e4 0B       		.uleb128 0xb
 6543 00e5 3B       		.uleb128 0x3b
 6544 00e6 0B       		.uleb128 0xb
 6545 00e7 27       		.uleb128 0x27
 6546 00e8 19       		.uleb128 0x19
 6547 00e9 49       		.uleb128 0x49
 6548 00ea 13       		.uleb128 0x13
 6549 00eb 11       		.uleb128 0x11
 6550 00ec 01       		.uleb128 0x1
 6551 00ed 12       		.uleb128 0x12
 6552 00ee 06       		.uleb128 0x6
 6553 00ef 40       		.uleb128 0x40
 6554 00f0 18       		.uleb128 0x18
 6555 00f1 9642     		.uleb128 0x2116
 6556 00f3 19       		.uleb128 0x19
 6557 00f4 01       		.uleb128 0x1
 6558 00f5 13       		.uleb128 0x13
 6559 00f6 00       		.byte	0
 6560 00f7 00       		.byte	0
 6561 00f8 12       		.uleb128 0x12
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 156


 6562 00f9 2E       		.uleb128 0x2e
 6563 00fa 01       		.byte	0x1
 6564 00fb 3F       		.uleb128 0x3f
 6565 00fc 19       		.uleb128 0x19
 6566 00fd 03       		.uleb128 0x3
 6567 00fe 0E       		.uleb128 0xe
 6568 00ff 3A       		.uleb128 0x3a
 6569 0100 0B       		.uleb128 0xb
 6570 0101 3B       		.uleb128 0x3b
 6571 0102 05       		.uleb128 0x5
 6572 0103 27       		.uleb128 0x27
 6573 0104 19       		.uleb128 0x19
 6574 0105 11       		.uleb128 0x11
 6575 0106 01       		.uleb128 0x1
 6576 0107 12       		.uleb128 0x12
 6577 0108 06       		.uleb128 0x6
 6578 0109 40       		.uleb128 0x40
 6579 010a 18       		.uleb128 0x18
 6580 010b 9642     		.uleb128 0x2116
 6581 010d 19       		.uleb128 0x19
 6582 010e 01       		.uleb128 0x1
 6583 010f 13       		.uleb128 0x13
 6584 0110 00       		.byte	0
 6585 0111 00       		.byte	0
 6586 0112 13       		.uleb128 0x13
 6587 0113 05       		.uleb128 0x5
 6588 0114 00       		.byte	0
 6589 0115 03       		.uleb128 0x3
 6590 0116 0E       		.uleb128 0xe
 6591 0117 3A       		.uleb128 0x3a
 6592 0118 0B       		.uleb128 0xb
 6593 0119 3B       		.uleb128 0x3b
 6594 011a 05       		.uleb128 0x5
 6595 011b 49       		.uleb128 0x49
 6596 011c 13       		.uleb128 0x13
 6597 011d 02       		.uleb128 0x2
 6598 011e 18       		.uleb128 0x18
 6599 011f 00       		.byte	0
 6600 0120 00       		.byte	0
 6601 0121 14       		.uleb128 0x14
 6602 0122 34       		.uleb128 0x34
 6603 0123 00       		.byte	0
 6604 0124 03       		.uleb128 0x3
 6605 0125 0E       		.uleb128 0xe
 6606 0126 3A       		.uleb128 0x3a
 6607 0127 0B       		.uleb128 0xb
 6608 0128 3B       		.uleb128 0x3b
 6609 0129 05       		.uleb128 0x5
 6610 012a 49       		.uleb128 0x49
 6611 012b 13       		.uleb128 0x13
 6612 012c 02       		.uleb128 0x2
 6613 012d 18       		.uleb128 0x18
 6614 012e 00       		.byte	0
 6615 012f 00       		.byte	0
 6616 0130 15       		.uleb128 0x15
 6617 0131 2E       		.uleb128 0x2e
 6618 0132 00       		.byte	0
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 157


 6619 0133 3F       		.uleb128 0x3f
 6620 0134 19       		.uleb128 0x19
 6621 0135 03       		.uleb128 0x3
 6622 0136 0E       		.uleb128 0xe
 6623 0137 3A       		.uleb128 0x3a
 6624 0138 0B       		.uleb128 0xb
 6625 0139 3B       		.uleb128 0x3b
 6626 013a 05       		.uleb128 0x5
 6627 013b 27       		.uleb128 0x27
 6628 013c 19       		.uleb128 0x19
 6629 013d 11       		.uleb128 0x11
 6630 013e 01       		.uleb128 0x1
 6631 013f 12       		.uleb128 0x12
 6632 0140 06       		.uleb128 0x6
 6633 0141 40       		.uleb128 0x40
 6634 0142 18       		.uleb128 0x18
 6635 0143 9642     		.uleb128 0x2116
 6636 0145 19       		.uleb128 0x19
 6637 0146 00       		.byte	0
 6638 0147 00       		.byte	0
 6639 0148 16       		.uleb128 0x16
 6640 0149 2E       		.uleb128 0x2e
 6641 014a 01       		.byte	0x1
 6642 014b 3F       		.uleb128 0x3f
 6643 014c 19       		.uleb128 0x19
 6644 014d 03       		.uleb128 0x3
 6645 014e 0E       		.uleb128 0xe
 6646 014f 3A       		.uleb128 0x3a
 6647 0150 0B       		.uleb128 0xb
 6648 0151 3B       		.uleb128 0x3b
 6649 0152 05       		.uleb128 0x5
 6650 0153 27       		.uleb128 0x27
 6651 0154 19       		.uleb128 0x19
 6652 0155 49       		.uleb128 0x49
 6653 0156 13       		.uleb128 0x13
 6654 0157 11       		.uleb128 0x11
 6655 0158 01       		.uleb128 0x1
 6656 0159 12       		.uleb128 0x12
 6657 015a 06       		.uleb128 0x6
 6658 015b 40       		.uleb128 0x40
 6659 015c 18       		.uleb128 0x18
 6660 015d 9642     		.uleb128 0x2116
 6661 015f 19       		.uleb128 0x19
 6662 0160 01       		.uleb128 0x1
 6663 0161 13       		.uleb128 0x13
 6664 0162 00       		.byte	0
 6665 0163 00       		.byte	0
 6666 0164 17       		.uleb128 0x17
 6667 0165 2E       		.uleb128 0x2e
 6668 0166 00       		.byte	0
 6669 0167 3F       		.uleb128 0x3f
 6670 0168 19       		.uleb128 0x19
 6671 0169 03       		.uleb128 0x3
 6672 016a 0E       		.uleb128 0xe
 6673 016b 3A       		.uleb128 0x3a
 6674 016c 0B       		.uleb128 0xb
 6675 016d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 158


 6676 016e 0B       		.uleb128 0xb
 6677 016f 27       		.uleb128 0x27
 6678 0170 19       		.uleb128 0x19
 6679 0171 11       		.uleb128 0x11
 6680 0172 01       		.uleb128 0x1
 6681 0173 12       		.uleb128 0x12
 6682 0174 06       		.uleb128 0x6
 6683 0175 40       		.uleb128 0x40
 6684 0176 18       		.uleb128 0x18
 6685 0177 9742     		.uleb128 0x2117
 6686 0179 19       		.uleb128 0x19
 6687 017a 00       		.byte	0
 6688 017b 00       		.byte	0
 6689 017c 18       		.uleb128 0x18
 6690 017d 0B       		.uleb128 0xb
 6691 017e 01       		.byte	0x1
 6692 017f 11       		.uleb128 0x11
 6693 0180 01       		.uleb128 0x1
 6694 0181 12       		.uleb128 0x12
 6695 0182 06       		.uleb128 0x6
 6696 0183 00       		.byte	0
 6697 0184 00       		.byte	0
 6698 0185 19       		.uleb128 0x19
 6699 0186 2E       		.uleb128 0x2e
 6700 0187 00       		.byte	0
 6701 0188 3F       		.uleb128 0x3f
 6702 0189 19       		.uleb128 0x19
 6703 018a 03       		.uleb128 0x3
 6704 018b 0E       		.uleb128 0xe
 6705 018c 3A       		.uleb128 0x3a
 6706 018d 0B       		.uleb128 0xb
 6707 018e 3B       		.uleb128 0x3b
 6708 018f 0B       		.uleb128 0xb
 6709 0190 11       		.uleb128 0x11
 6710 0191 01       		.uleb128 0x1
 6711 0192 12       		.uleb128 0x12
 6712 0193 06       		.uleb128 0x6
 6713 0194 40       		.uleb128 0x40
 6714 0195 18       		.uleb128 0x18
 6715 0196 9642     		.uleb128 0x2116
 6716 0198 19       		.uleb128 0x19
 6717 0199 00       		.byte	0
 6718 019a 00       		.byte	0
 6719 019b 1A       		.uleb128 0x1a
 6720 019c 2E       		.uleb128 0x2e
 6721 019d 01       		.byte	0x1
 6722 019e 3F       		.uleb128 0x3f
 6723 019f 19       		.uleb128 0x19
 6724 01a0 03       		.uleb128 0x3
 6725 01a1 0E       		.uleb128 0xe
 6726 01a2 3A       		.uleb128 0x3a
 6727 01a3 0B       		.uleb128 0xb
 6728 01a4 3B       		.uleb128 0x3b
 6729 01a5 0B       		.uleb128 0xb
 6730 01a6 49       		.uleb128 0x49
 6731 01a7 13       		.uleb128 0x13
 6732 01a8 11       		.uleb128 0x11
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 159


 6733 01a9 01       		.uleb128 0x1
 6734 01aa 12       		.uleb128 0x12
 6735 01ab 06       		.uleb128 0x6
 6736 01ac 40       		.uleb128 0x40
 6737 01ad 18       		.uleb128 0x18
 6738 01ae 9642     		.uleb128 0x2116
 6739 01b0 19       		.uleb128 0x19
 6740 01b1 01       		.uleb128 0x1
 6741 01b2 13       		.uleb128 0x13
 6742 01b3 00       		.byte	0
 6743 01b4 00       		.byte	0
 6744 01b5 1B       		.uleb128 0x1b
 6745 01b6 0B       		.uleb128 0xb
 6746 01b7 01       		.byte	0x1
 6747 01b8 11       		.uleb128 0x11
 6748 01b9 01       		.uleb128 0x1
 6749 01ba 12       		.uleb128 0x12
 6750 01bb 06       		.uleb128 0x6
 6751 01bc 01       		.uleb128 0x1
 6752 01bd 13       		.uleb128 0x13
 6753 01be 00       		.byte	0
 6754 01bf 00       		.byte	0
 6755 01c0 1C       		.uleb128 0x1c
 6756 01c1 34       		.uleb128 0x34
 6757 01c2 00       		.byte	0
 6758 01c3 03       		.uleb128 0x3
 6759 01c4 08       		.uleb128 0x8
 6760 01c5 3A       		.uleb128 0x3a
 6761 01c6 0B       		.uleb128 0xb
 6762 01c7 3B       		.uleb128 0x3b
 6763 01c8 05       		.uleb128 0x5
 6764 01c9 49       		.uleb128 0x49
 6765 01ca 13       		.uleb128 0x13
 6766 01cb 02       		.uleb128 0x2
 6767 01cc 18       		.uleb128 0x18
 6768 01cd 00       		.byte	0
 6769 01ce 00       		.byte	0
 6770 01cf 1D       		.uleb128 0x1d
 6771 01d0 26       		.uleb128 0x26
 6772 01d1 00       		.byte	0
 6773 01d2 49       		.uleb128 0x49
 6774 01d3 13       		.uleb128 0x13
 6775 01d4 00       		.byte	0
 6776 01d5 00       		.byte	0
 6777 01d6 1E       		.uleb128 0x1e
 6778 01d7 34       		.uleb128 0x34
 6779 01d8 00       		.byte	0
 6780 01d9 03       		.uleb128 0x3
 6781 01da 0E       		.uleb128 0xe
 6782 01db 3A       		.uleb128 0x3a
 6783 01dc 0B       		.uleb128 0xb
 6784 01dd 3B       		.uleb128 0x3b
 6785 01de 05       		.uleb128 0x5
 6786 01df 49       		.uleb128 0x49
 6787 01e0 13       		.uleb128 0x13
 6788 01e1 3F       		.uleb128 0x3f
 6789 01e2 19       		.uleb128 0x19
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 160


 6790 01e3 3C       		.uleb128 0x3c
 6791 01e4 19       		.uleb128 0x19
 6792 01e5 00       		.byte	0
 6793 01e6 00       		.byte	0
 6794 01e7 1F       		.uleb128 0x1f
 6795 01e8 34       		.uleb128 0x34
 6796 01e9 00       		.byte	0
 6797 01ea 03       		.uleb128 0x3
 6798 01eb 0E       		.uleb128 0xe
 6799 01ec 3A       		.uleb128 0x3a
 6800 01ed 0B       		.uleb128 0xb
 6801 01ee 3B       		.uleb128 0x3b
 6802 01ef 0B       		.uleb128 0xb
 6803 01f0 49       		.uleb128 0x49
 6804 01f1 13       		.uleb128 0x13
 6805 01f2 3F       		.uleb128 0x3f
 6806 01f3 19       		.uleb128 0x19
 6807 01f4 02       		.uleb128 0x2
 6808 01f5 18       		.uleb128 0x18
 6809 01f6 00       		.byte	0
 6810 01f7 00       		.byte	0
 6811 01f8 20       		.uleb128 0x20
 6812 01f9 21       		.uleb128 0x21
 6813 01fa 00       		.byte	0
 6814 01fb 49       		.uleb128 0x49
 6815 01fc 13       		.uleb128 0x13
 6816 01fd 2F       		.uleb128 0x2f
 6817 01fe 05       		.uleb128 0x5
 6818 01ff 00       		.byte	0
 6819 0200 00       		.byte	0
 6820 0201 21       		.uleb128 0x21
 6821 0202 34       		.uleb128 0x34
 6822 0203 00       		.byte	0
 6823 0204 03       		.uleb128 0x3
 6824 0205 08       		.uleb128 0x8
 6825 0206 3A       		.uleb128 0x3a
 6826 0207 0B       		.uleb128 0xb
 6827 0208 3B       		.uleb128 0x3b
 6828 0209 0B       		.uleb128 0xb
 6829 020a 49       		.uleb128 0x49
 6830 020b 13       		.uleb128 0x13
 6831 020c 3F       		.uleb128 0x3f
 6832 020d 19       		.uleb128 0x19
 6833 020e 02       		.uleb128 0x2
 6834 020f 18       		.uleb128 0x18
 6835 0210 00       		.byte	0
 6836 0211 00       		.byte	0
 6837 0212 00       		.byte	0
 6838              		.section	.debug_aranges,"",%progbits
 6839 0000 3C010000 		.4byte	0x13c
 6840 0004 0200     		.2byte	0x2
 6841 0006 00000000 		.4byte	.Ldebug_info0
 6842 000a 04       		.byte	0x4
 6843 000b 00       		.byte	0
 6844 000c 0000     		.2byte	0
 6845 000e 0000     		.2byte	0
 6846 0010 00000000 		.4byte	.LFB56
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 161


 6847 0014 0C000000 		.4byte	.LFE56-.LFB56
 6848 0018 00000000 		.4byte	.LFB57
 6849 001c 0C000000 		.4byte	.LFE57-.LFB57
 6850 0020 00000000 		.4byte	.LFB58
 6851 0024 6C000000 		.4byte	.LFE58-.LFB58
 6852 0028 00000000 		.4byte	.LFB59
 6853 002c A4020000 		.4byte	.LFE59-.LFB59
 6854 0030 00000000 		.4byte	.LFB60
 6855 0034 BC000000 		.4byte	.LFE60-.LFB60
 6856 0038 00000000 		.4byte	.LFB61
 6857 003c 24000000 		.4byte	.LFE61-.LFB61
 6858 0040 00000000 		.4byte	.LFB62
 6859 0044 24000000 		.4byte	.LFE62-.LFB62
 6860 0048 00000000 		.4byte	.LFB63
 6861 004c 28000000 		.4byte	.LFE63-.LFB63
 6862 0050 00000000 		.4byte	.LFB64
 6863 0054 28000000 		.4byte	.LFE64-.LFB64
 6864 0058 00000000 		.4byte	.LFB65
 6865 005c 68000000 		.4byte	.LFE65-.LFB65
 6866 0060 00000000 		.4byte	.LFB66
 6867 0064 30000000 		.4byte	.LFE66-.LFB66
 6868 0068 00000000 		.4byte	.LFB67
 6869 006c 30000000 		.4byte	.LFE67-.LFB67
 6870 0070 00000000 		.4byte	.LFB68
 6871 0074 44000000 		.4byte	.LFE68-.LFB68
 6872 0078 00000000 		.4byte	.LFB69
 6873 007c 34000000 		.4byte	.LFE69-.LFB69
 6874 0080 00000000 		.4byte	.LFB70
 6875 0084 26000000 		.4byte	.LFE70-.LFB70
 6876 0088 00000000 		.4byte	.LFB71
 6877 008c 50000000 		.4byte	.LFE71-.LFB71
 6878 0090 00000000 		.4byte	.LFB72
 6879 0094 44000000 		.4byte	.LFE72-.LFB72
 6880 0098 00000000 		.4byte	.LFB73
 6881 009c 48000000 		.4byte	.LFE73-.LFB73
 6882 00a0 00000000 		.4byte	.LFB74
 6883 00a4 44000000 		.4byte	.LFE74-.LFB74
 6884 00a8 00000000 		.4byte	.LFB75
 6885 00ac 24000000 		.4byte	.LFE75-.LFB75
 6886 00b0 00000000 		.4byte	.LFB76
 6887 00b4 44000000 		.4byte	.LFE76-.LFB76
 6888 00b8 00000000 		.4byte	.LFB77
 6889 00bc 68000000 		.4byte	.LFE77-.LFB77
 6890 00c0 00000000 		.4byte	.LFB78
 6891 00c4 50000000 		.4byte	.LFE78-.LFB78
 6892 00c8 00000000 		.4byte	.LFB79
 6893 00cc 78010000 		.4byte	.LFE79-.LFB79
 6894 00d0 00000000 		.4byte	.LFB80
 6895 00d4 68010000 		.4byte	.LFE80-.LFB80
 6896 00d8 00000000 		.4byte	.LFB81
 6897 00dc 80010000 		.4byte	.LFE81-.LFB81
 6898 00e0 00000000 		.4byte	.LFB82
 6899 00e4 0C000000 		.4byte	.LFE82-.LFB82
 6900 00e8 00000000 		.4byte	.LFB83
 6901 00ec 20000000 		.4byte	.LFE83-.LFB83
 6902 00f0 00000000 		.4byte	.LFB84
 6903 00f4 78000000 		.4byte	.LFE84-.LFB84
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 162


 6904 00f8 00000000 		.4byte	.LFB85
 6905 00fc 80010000 		.4byte	.LFE85-.LFB85
 6906 0100 00000000 		.4byte	.LFB86
 6907 0104 94000000 		.4byte	.LFE86-.LFB86
 6908 0108 00000000 		.4byte	.LFB87
 6909 010c D8000000 		.4byte	.LFE87-.LFB87
 6910 0110 00000000 		.4byte	.LFB88
 6911 0114 20000000 		.4byte	.LFE88-.LFB88
 6912 0118 00000000 		.4byte	.LFB89
 6913 011c 18000000 		.4byte	.LFE89-.LFB89
 6914 0120 00000000 		.4byte	.LFB90
 6915 0124 0C000000 		.4byte	.LFE90-.LFB90
 6916 0128 00000000 		.4byte	.LFB91
 6917 012c 0C000000 		.4byte	.LFE91-.LFB91
 6918 0130 00000000 		.4byte	.LFB92
 6919 0134 B00C0000 		.4byte	.LFE92-.LFB92
 6920 0138 00000000 		.4byte	0
 6921 013c 00000000 		.4byte	0
 6922              		.section	.debug_ranges,"",%progbits
 6923              	.Ldebug_ranges0:
 6924 0000 00000000 		.4byte	.LFB56
 6925 0004 0C000000 		.4byte	.LFE56
 6926 0008 00000000 		.4byte	.LFB57
 6927 000c 0C000000 		.4byte	.LFE57
 6928 0010 00000000 		.4byte	.LFB58
 6929 0014 6C000000 		.4byte	.LFE58
 6930 0018 00000000 		.4byte	.LFB59
 6931 001c A4020000 		.4byte	.LFE59
 6932 0020 00000000 		.4byte	.LFB60
 6933 0024 BC000000 		.4byte	.LFE60
 6934 0028 00000000 		.4byte	.LFB61
 6935 002c 24000000 		.4byte	.LFE61
 6936 0030 00000000 		.4byte	.LFB62
 6937 0034 24000000 		.4byte	.LFE62
 6938 0038 00000000 		.4byte	.LFB63
 6939 003c 28000000 		.4byte	.LFE63
 6940 0040 00000000 		.4byte	.LFB64
 6941 0044 28000000 		.4byte	.LFE64
 6942 0048 00000000 		.4byte	.LFB65
 6943 004c 68000000 		.4byte	.LFE65
 6944 0050 00000000 		.4byte	.LFB66
 6945 0054 30000000 		.4byte	.LFE66
 6946 0058 00000000 		.4byte	.LFB67
 6947 005c 30000000 		.4byte	.LFE67
 6948 0060 00000000 		.4byte	.LFB68
 6949 0064 44000000 		.4byte	.LFE68
 6950 0068 00000000 		.4byte	.LFB69
 6951 006c 34000000 		.4byte	.LFE69
 6952 0070 00000000 		.4byte	.LFB70
 6953 0074 26000000 		.4byte	.LFE70
 6954 0078 00000000 		.4byte	.LFB71
 6955 007c 50000000 		.4byte	.LFE71
 6956 0080 00000000 		.4byte	.LFB72
 6957 0084 44000000 		.4byte	.LFE72
 6958 0088 00000000 		.4byte	.LFB73
 6959 008c 48000000 		.4byte	.LFE73
 6960 0090 00000000 		.4byte	.LFB74
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 163


 6961 0094 44000000 		.4byte	.LFE74
 6962 0098 00000000 		.4byte	.LFB75
 6963 009c 24000000 		.4byte	.LFE75
 6964 00a0 00000000 		.4byte	.LFB76
 6965 00a4 44000000 		.4byte	.LFE76
 6966 00a8 00000000 		.4byte	.LFB77
 6967 00ac 68000000 		.4byte	.LFE77
 6968 00b0 00000000 		.4byte	.LFB78
 6969 00b4 50000000 		.4byte	.LFE78
 6970 00b8 00000000 		.4byte	.LFB79
 6971 00bc 78010000 		.4byte	.LFE79
 6972 00c0 00000000 		.4byte	.LFB80
 6973 00c4 68010000 		.4byte	.LFE80
 6974 00c8 00000000 		.4byte	.LFB81
 6975 00cc 80010000 		.4byte	.LFE81
 6976 00d0 00000000 		.4byte	.LFB82
 6977 00d4 0C000000 		.4byte	.LFE82
 6978 00d8 00000000 		.4byte	.LFB83
 6979 00dc 20000000 		.4byte	.LFE83
 6980 00e0 00000000 		.4byte	.LFB84
 6981 00e4 78000000 		.4byte	.LFE84
 6982 00e8 00000000 		.4byte	.LFB85
 6983 00ec 80010000 		.4byte	.LFE85
 6984 00f0 00000000 		.4byte	.LFB86
 6985 00f4 94000000 		.4byte	.LFE86
 6986 00f8 00000000 		.4byte	.LFB87
 6987 00fc D8000000 		.4byte	.LFE87
 6988 0100 00000000 		.4byte	.LFB88
 6989 0104 20000000 		.4byte	.LFE88
 6990 0108 00000000 		.4byte	.LFB89
 6991 010c 18000000 		.4byte	.LFE89
 6992 0110 00000000 		.4byte	.LFB90
 6993 0114 0C000000 		.4byte	.LFE90
 6994 0118 00000000 		.4byte	.LFB91
 6995 011c 0C000000 		.4byte	.LFE91
 6996 0120 00000000 		.4byte	.LFB92
 6997 0124 B00C0000 		.4byte	.LFE92
 6998 0128 00000000 		.4byte	0
 6999 012c 00000000 		.4byte	0
 7000              		.section	.debug_line,"",%progbits
 7001              	.Ldebug_line0:
 7002 0000 A6080000 		.section	.debug_str,"MS",%progbits,1
 7002      0200A602 
 7002      00000201 
 7002      FB0E0D00 
 7002      01010101 
 7003              	.LASF12:
 7004 0000 75696E74 		.ascii	"uint16\000"
 7004      313600
 7005              	.LASF140:
 7006 0007 416C6C44 		.ascii	"AllDataPointLoggerTimeLimit_s\000"
 7006      61746150 
 7006      6F696E74 
 7006      4C6F6767 
 7006      65725469 
 7007              	.LASF86:
 7008 0025 62756666 		.ascii	"buffer_filename\000"
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 164


 7008      65725F66 
 7008      696C656E 
 7008      616D6500 
 7009              	.LASF28:
 7010 0035 7369675F 		.ascii	"sig_raise\000"
 7010      72616973 
 7010      6500
 7011              	.LASF97:
 7012 003f 4C696665 		.ascii	"Lifetime\000"
 7012      74696D65 
 7012      00
 7013              	.LASF32:
 7014 0048 4D6F7665 		.ascii	"MoveOneStep_CounterClockwise\000"
 7014      4F6E6553 
 7014      7465705F 
 7014      436F756E 
 7014      74657243 
 7015              	.LASF85:
 7016 0065 74657374 		.ascii	"test_float\000"
 7016      5F666C6F 
 7016      617400
 7017              	.LASF121:
 7018 0070 70726573 		.ascii	"present_LiveData_plot_refreshed\000"
 7018      656E745F 
 7018      4C697665 
 7018      44617461 
 7018      5F706C6F 
 7019              	.LASF138:
 7020 0090 46696C65 		.ascii	"FileNameCurrentLamellaFile\000"
 7020      4E616D65 
 7020      43757272 
 7020      656E744C 
 7020      616D656C 
 7021              	.LASF51:
 7022 00ab 76616C75 		.ascii	"valuebox\000"
 7022      65626F78 
 7022      00
 7023              	.LASF79:
 7024 00b4 56464448 		.ascii	"VFDHome\000"
 7024      6F6D6500 
 7025              	.LASF38:
 7026 00bc 736C6964 		.ascii	"slider_value\000"
 7026      65725F76 
 7026      616C7565 
 7026      00
 7027              	.LASF61:
 7028 00c9 506F696E 		.ascii	"PointsToSettingsAxes\000"
 7028      7473546F 
 7028      53657474 
 7028      696E6773 
 7028      41786573 
 7029              	.LASF68:
 7030 00de 4D656173 		.ascii	"Measurement_Init_Number\000"
 7030      7572656D 
 7030      656E745F 
 7030      496E6974 
 7030      5F4E756D 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 165


 7031              	.LASF35:
 7032 00f6 54657374 		.ascii	"TestRotationMove\000"
 7032      526F7461 
 7032      74696F6E 
 7032      4D6F7665 
 7032      00
 7033              	.LASF40:
 7034 0107 6E65775F 		.ascii	"new_slider_value\000"
 7034      736C6964 
 7034      65725F76 
 7034      616C7565 
 7034      00
 7035              	.LASF30:
 7036 0118 4D6F7665 		.ascii	"MoveToWithConstSpeed\000"
 7036      546F5769 
 7036      7468436F 
 7036      6E737453 
 7036      70656564 
 7037              	.LASF33:
 7038 012d 4D6F7665 		.ascii	"MoveToSamplingPosition\000"
 7038      546F5361 
 7038      6D706C69 
 7038      6E67506F 
 7038      73697469 
 7039              	.LASF7:
 7040 0144 6C6F6E67 		.ascii	"long long unsigned int\000"
 7040      206C6F6E 
 7040      6720756E 
 7040      7369676E 
 7040      65642069 
 7041              	.LASF93:
 7042 015b 49544D5F 		.ascii	"ITM_RxBuffer\000"
 7042      52784275 
 7042      66666572 
 7042      00
 7043              	.LASF102:
 7044 0168 636F756E 		.ascii	"counter_Lamella_Number\000"
 7044      7465725F 
 7044      4C616D65 
 7044      6C6C615F 
 7044      4E756D62 
 7045              	.LASF45:
 7046 017f 73666C6F 		.ascii	"sfloat\000"
 7046      617400
 7047              	.LASF6:
 7048 0186 6C6F6E67 		.ascii	"long long int\000"
 7048      206C6F6E 
 7048      6720696E 
 7048      7400
 7049              	.LASF0:
 7050 0194 7369676E 		.ascii	"signed char\000"
 7050      65642063 
 7050      68617200 
 7051              	.LASF105:
 7052 01a0 636F756E 		.ascii	"counter_Rupture_Confirmation_Target\000"
 7052      7465725F 
 7052      52757074 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 166


 7052      7572655F 
 7052      436F6E66 
 7053              	.LASF132:
 7054 01c4 52757074 		.ascii	"Rupture_Confirmation_Time_s\000"
 7054      7572655F 
 7054      436F6E66 
 7054      69726D61 
 7054      74696F6E 
 7055              	.LASF56:
 7056 01e0 4E657874 		.ascii	"Nextion_GetSliderValue\000"
 7056      696F6E5F 
 7056      47657453 
 7056      6C696465 
 7056      7256616C 
 7057              	.LASF4:
 7058 01f7 6C6F6E67 		.ascii	"long int\000"
 7058      20696E74 
 7058      00
 7059              	.LASF22:
 7060 0200 496E6974 		.ascii	"Init_Stepper\000"
 7060      5F537465 
 7060      70706572 
 7060      00
 7061              	.LASF27:
 7062 020d 7369675F 		.ascii	"sig_shift\000"
 7062      73686966 
 7062      7400
 7063              	.LASF41:
 7064 0217 6E756D5F 		.ascii	"num_str\000"
 7064      73747200 
 7065              	.LASF129:
 7066 021f 636F756E 		.ascii	"counter_Lamella_Logger_steps\000"
 7066      7465725F 
 7066      4C616D65 
 7066      6C6C615F 
 7066      4C6F6767 
 7067              	.LASF135:
 7068 023c 665F6D61 		.ascii	"f_max_Stepper\000"
 7068      785F5374 
 7068      65707065 
 7068      7200
 7069              	.LASF11:
 7070 024a 75696E74 		.ascii	"uint8\000"
 7070      3800
 7071              	.LASF2:
 7072 0250 73686F72 		.ascii	"short int\000"
 7072      7420696E 
 7072      7400
 7073              	.LASF14:
 7074 025a 646F7562 		.ascii	"double\000"
 7074      6C6500
 7075              	.LASF13:
 7076 0261 666C6F61 		.ascii	"float\000"
 7076      7400
 7077              	.LASF26:
 7078 0267 745F5374 		.ascii	"t_StepperCLK\000"
 7078      65707065 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 167


 7078      72434C4B 
 7078      00
 7079              	.LASF142:
 7080 0274 42696E5F 		.ascii	"Bin_Number\000"
 7080      4E756D62 
 7080      657200
 7081              	.LASF43:
 7082 027f 6E65775F 		.ascii	"new_value\000"
 7082      76616C75 
 7082      6500
 7083              	.LASF60:
 7084 0289 506F696E 		.ascii	"PointToScaledDataAxes\000"
 7084      74546F53 
 7084      63616C65 
 7084      64446174 
 7084      61417865 
 7085              	.LASF31:
 7086 029f 4D6F7665 		.ascii	"MoveOneStep_Clockwise\000"
 7086      4F6E6553 
 7086      7465705F 
 7086      436C6F63 
 7086      6B776973 
 7087              	.LASF73:
 7088 02b5 54696D65 		.ascii	"Timer1_Interrupt_Function\000"
 7088      72315F49 
 7088      6E746572 
 7088      72757074 
 7088      5F46756E 
 7089              	.LASF69:
 7090 02cf 736C6964 		.ascii	"slider_val\000"
 7090      65725F76 
 7090      616C00
 7091              	.LASF91:
 7092 02da 53746570 		.ascii	"StepsDifferenceHomeSampling\000"
 7092      73446966 
 7092      66657265 
 7092      6E636548 
 7092      6F6D6553 
 7093              	.LASF53:
 7094 02f6 76616C75 		.ascii	"value\000"
 7094      6500
 7095              	.LASF59:
 7096 02fc 506F696E 		.ascii	"PointToLiveDataAxes\000"
 7096      74546F4C 
 7096      69766544 
 7096      61746141 
 7096      78657300 
 7097              	.LASF118:
 7098 0310 6E65775F 		.ascii	"new_pickup_initialized\000"
 7098      7069636B 
 7098      75705F69 
 7098      6E697469 
 7098      616C697A 
 7099              	.LASF8:
 7100 0327 756E7369 		.ascii	"unsigned int\000"
 7100      676E6564 
 7100      20696E74 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 168


 7100      00
 7101              	.LASF127:
 7102 0334 706C6F74 		.ascii	"plot_every_nth\000"
 7102      5F657665 
 7102      72795F6E 
 7102      746800
 7103              	.LASF100:
 7104 0343 52585F42 		.ascii	"RX_Buffer\000"
 7104      75666665 
 7104      7200
 7105              	.LASF42:
 7106 034d 4E657874 		.ascii	"Nextion_SendTextNoMeas\000"
 7106      696F6E5F 
 7106      53656E64 
 7106      54657874 
 7106      4E6F4D65 
 7107              	.LASF64:
 7108 0364 696E7465 		.ascii	"intensity\000"
 7108      6E736974 
 7108      7900
 7109              	.LASF83:
 7110 036e 65657072 		.ascii	"eeprom_cnt\000"
 7110      6F6D5F63 
 7110      6E7400
 7111              	.LASF119:
 7112 0379 736C6964 		.ascii	"slider_val_sent\000"
 7112      65725F76 
 7112      616C5F73 
 7112      656E7400 
 7113              	.LASF5:
 7114 0389 6C6F6E67 		.ascii	"long unsigned int\000"
 7114      20756E73 
 7114      69676E65 
 7114      6420696E 
 7114      7400
 7115              	.LASF141:
 7116 039b 46696C65 		.ascii	"FileNameLogger\000"
 7116      4E616D65 
 7116      4C6F6767 
 7116      657200
 7117              	.LASF120:
 7118 03aa 736C6964 		.ascii	"slider_val_received\000"
 7118      65725F76 
 7118      616C5F72 
 7118      65636569 
 7118      76656400 
 7119              	.LASF46:
 7120 03be 4E657874 		.ascii	"Nextion_Toggle_b_show\000"
 7120      696F6E5F 
 7120      546F6767 
 7120      6C655F62 
 7120      5F73686F 
 7121              	.LASF103:
 7122 03d4 636F756E 		.ascii	"counter_Lamella_Relaxation_steps\000"
 7122      7465725F 
 7122      4C616D65 
 7122      6C6C615F 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 169


 7122      52656C61 
 7123              	.LASF3:
 7124 03f5 73686F72 		.ascii	"short unsigned int\000"
 7124      7420756E 
 7124      7369676E 
 7124      65642069 
 7124      6E7400
 7125              	.LASF24:
 7126 0408 665F6D61 		.ascii	"f_max\000"
 7126      7800
 7127              	.LASF66:
 7128 040e 4765745F 		.ascii	"Get_Single_Lamella_Lifetime\000"
 7128      53696E67 
 7128      6C655F4C 
 7128      616D656C 
 7128      6C615F4C 
 7129              	.LASF136:
 7130 042a 7369675F 		.ascii	"sig_shift_Stepper\000"
 7130      73686966 
 7130      745F5374 
 7130      65707065 
 7130      7200
 7131              	.LASF130:
 7132 043c 4D617869 		.ascii	"Maximum_Lamella_Time_h\000"
 7132      6D756D5F 
 7132      4C616D65 
 7132      6C6C615F 
 7132      54696D65 
 7133              	.LASF137:
 7134 0453 7369675F 		.ascii	"sig_raise_Stepper\000"
 7134      72616973 
 7134      655F5374 
 7134      65707065 
 7134      7200
 7135              	.LASF47:
 7136 0465 626F6F6C 		.ascii	"bool_measurement_running\000"
 7136      5F6D6561 
 7136      73757265 
 7136      6D656E74 
 7136      5F72756E 
 7137              	.LASF72:
 7138 047e 6C617374 		.ascii	"last_byte\000"
 7138      5F627974 
 7138      6500
 7139              	.LASF65:
 7140 0488 4175746F 		.ascii	"AutoCalibration\000"
 7140      43616C69 
 7140      62726174 
 7140      696F6E00 
 7141              	.LASF9:
 7142 0498 5F5F696E 		.ascii	"__int32_t\000"
 7142      7433325F 
 7142      7400
 7143              	.LASF37:
 7144 04a2 496E6974 		.ascii	"Init_NextionTFT\000"
 7144      5F4E6578 
 7144      74696F6E 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 170


 7144      54465400 
 7145              	.LASF134:
 7146 04b2 4C616D65 		.ascii	"LamellaFormationTime_ms\000"
 7146      6C6C6146 
 7146      6F726D61 
 7146      74696F6E 
 7146      54696D65 
 7147              	.LASF96:
 7148 04ca 4E756D62 		.ascii	"Number\000"
 7148      657200
 7149              	.LASF17:
 7150 04d1 73697A65 		.ascii	"sizetype\000"
 7150      74797065 
 7150      00
 7151              	.LASF18:
 7152 04da 6C6F6E67 		.ascii	"long double\000"
 7152      20646F75 
 7152      626C6500 
 7153              	.LASF76:
 7154 04e6 62756666 		.ascii	"buffer_Lamella_nextline\000"
 7154      65725F4C 
 7154      616D656C 
 7154      6C615F6E 
 7154      6578746C 
 7155              	.LASF107:
 7156 04fe 626F6F6C 		.ascii	"bool_Rupture_Confirmed\000"
 7156      5F527570 
 7156      74757265 
 7156      5F436F6E 
 7156      6669726D 
 7157              	.LASF49:
 7158 0515 74657874 		.ascii	"textbox\000"
 7158      626F7800 
 7159              	.LASF29:
 7160 051d 4D6F7665 		.ascii	"MoveTo\000"
 7160      546F00
 7161              	.LASF44:
 7162 0524 4E657874 		.ascii	"Nextion_Send_String\000"
 7162      696F6E5F 
 7162      53656E64 
 7162      5F537472 
 7162      696E6700 
 7163              	.LASF75:
 7164 0538 4E756D62 		.ascii	"NumberOfEntry\000"
 7164      65724F66 
 7164      456E7472 
 7164      7900
 7165              	.LASF82:
 7166 0546 65657072 		.ascii	"eepromArray\000"
 7166      6F6D4172 
 7166      72617900 
 7167              	.LASF89:
 7168 0552 62756666 		.ascii	"buffer_nextline\000"
 7168      65725F6E 
 7168      6578746C 
 7168      696E6500 
 7169              	.LASF88:
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 171


 7170 0562 48656164 		.ascii	"HeaderLine\000"
 7170      65724C69 
 7170      6E6500
 7171              	.LASF67:
 7172 056d 4C696665 		.ascii	"LifeTime\000"
 7172      54696D65 
 7172      00
 7173              	.LASF144:
 7174 0576 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 7174      4320342E 
 7174      392E3320 
 7174      32303135 
 7174      30333033 
 7175 05a9 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 7175      20726576 
 7175      6973696F 
 7175      6E203232 
 7175      31323230 
 7176 05dc 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 7176      66756E63 
 7176      74696F6E 
 7176      2D736563 
 7176      74696F6E 
 7177              	.LASF63:
 7178 0604 7265665F 		.ascii	"ref_ths\000"
 7178      74687300 
 7179              	.LASF87:
 7180 060c 7046696C 		.ascii	"pFile\000"
 7180      6500
 7181              	.LASF21:
 7182 0612 4C617365 		.ascii	"Laser_OFF\000"
 7182      725F4F46 
 7182      4600
 7183              	.LASF145:
 7184 061c 6D61696E 		.ascii	"main.c\000"
 7184      2E6300
 7185              	.LASF122:
 7186 0623 63757272 		.ascii	"current_RescaledData_plot_refreshed\000"
 7186      656E745F 
 7186      52657363 
 7186      616C6564 
 7186      44617461 
 7187              	.LASF58:
 7188 0647 4E657874 		.ascii	"Nextion_ToggleShowButton\000"
 7188      696F6E5F 
 7188      546F6767 
 7188      6C655368 
 7188      6F774275 
 7189              	.LASF117:
 7190 0660 70726573 		.ascii	"present_Result_saved\000"
 7190      656E745F 
 7190      52657375 
 7190      6C745F73 
 7190      61766564 
 7191              	.LASF108:
 7192 0675 57696474 		.ascii	"WidthOfBin\000"
 7192      684F6642 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 172


 7192      696E00
 7193              	.LASF133:
 7194 0680 53616D70 		.ascii	"SampligCountsPerSecond\000"
 7194      6C696743 
 7194      6F756E74 
 7194      73506572 
 7194      5365636F 
 7195              	.LASF131:
 7196 0697 4C616D65 		.ascii	"Lamella_Relaxation_Time_s\000"
 7196      6C6C615F 
 7196      52656C61 
 7196      78617469 
 7196      6F6E5F54 
 7197              	.LASF106:
 7198 06b1 636F756E 		.ascii	"counter_Rupture_Confirmation\000"
 7198      7465725F 
 7198      52757074 
 7198      7572655F 
 7198      436F6E66 
 7199              	.LASF10:
 7200 06ce 696E7433 		.ascii	"int32_t\000"
 7200      325F7400 
 7201              	.LASF1:
 7202 06d6 756E7369 		.ascii	"unsigned char\000"
 7202      676E6564 
 7202      20636861 
 7202      7200
 7203              	.LASF95:
 7204 06e4 4144435F 		.ascii	"ADC_value\000"
 7204      76616C75 
 7204      6500
 7205              	.LASF109:
 7206 06ee 74696D65 		.ascii	"timerflag100ms\000"
 7206      72666C61 
 7206      67313030 
 7206      6D7300
 7207              	.LASF57:
 7208 06fd 4E657874 		.ascii	"Nextion_NumberOfMeasurementsFromSlider\000"
 7208      696F6E5F 
 7208      4E756D62 
 7208      65724F66 
 7208      4D656173 
 7209              	.LASF101:
 7210 0724 636F756E 		.ascii	"counter_Timer1_steps\000"
 7210      7465725F 
 7210      54696D65 
 7210      72315F73 
 7210      74657073 
 7211              	.LASF71:
 7212 0739 636F756E 		.ascii	"counter\000"
 7212      74657200 
 7213              	.LASF34:
 7214 0741 4D6F7665 		.ascii	"MoveToHomePosition\000"
 7214      546F486F 
 7214      6D65506F 
 7214      73697469 
 7214      6F6E00
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 173


 7215              	.LASF114:
 7216 0754 636E745F 		.ascii	"cnt_timer5000ms\000"
 7216      74696D65 
 7216      72353030 
 7216      306D7300 
 7217              	.LASF104:
 7218 0764 636F756E 		.ascii	"counter_Maximum_Lamella_Time_steps\000"
 7218      7465725F 
 7218      4D617869 
 7218      6D756D5F 
 7218      4C616D65 
 7219              	.LASF139:
 7220 0787 626F6F6C 		.ascii	"bool_NewLamellaFileNameSet\000"
 7220      5F4E6577 
 7220      4C616D65 
 7220      6C6C6146 
 7220      696C654E 
 7221              	.LASF146:
 7222 07a2 433A5C55 		.ascii	"C:\\Users\\LocalAdmin\\Documents\\GitHub\\phd-proje"
 7222      73657273 
 7222      5C4C6F63 
 7222      616C4164 
 7222      6D696E5C 
 7223 07d0 6374735C 		.ascii	"cts\\Devices\\One Laser Lamella\\PSOC5_LamellaDevic"
 7223      44657669 
 7223      6365735C 
 7223      4F6E6520 
 7223      4C617365 
 7224 0800 655C5053 		.ascii	"e\\PSOC5_Blinkschaltung.cydsn\000"
 7224      4F43355F 
 7224      426C696E 
 7224      6B736368 
 7224      616C7475 
 7225              	.LASF52:
 7226 081d 4E657874 		.ascii	"Nextion_SendProgressbarValue\000"
 7226      696F6E5F 
 7226      53656E64 
 7226      50726F67 
 7226      72657373 
 7227              	.LASF143:
 7228 083a 42696E5F 		.ascii	"Bin_Lifetime_Probability\000"
 7228      4C696665 
 7228      74696D65 
 7228      5F50726F 
 7228      62616269 
 7229              	.LASF92:
 7230 0853 53746570 		.ascii	"StepsOneStepSettings\000"
 7230      734F6E65 
 7230      53746570 
 7230      53657474 
 7230      696E6773 
 7231              	.LASF39:
 7232 0868 4E657874 		.ascii	"Nextion_SendSliderValue\000"
 7232      696F6E5F 
 7232      53656E64 
 7232      536C6964 
 7232      65725661 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 174


 7233              	.LASF128:
 7234 0880 4C616D65 		.ascii	"Lamella_Logger_Time_s\000"
 7234      6C6C615F 
 7234      4C6F6767 
 7234      65725F54 
 7234      696D655F 
 7235              	.LASF112:
 7236 0896 636E745F 		.ascii	"cnt_timer100ms\000"
 7236      74696D65 
 7236      72313030 
 7236      6D7300
 7237              	.LASF20:
 7238 08a5 4C617365 		.ascii	"Laser_ON\000"
 7238      725F4F4E 
 7238      00
 7239              	.LASF78:
 7240 08ae 56464443 		.ascii	"VFDClearDisplay\000"
 7240      6C656172 
 7240      44697370 
 7240      6C617900 
 7241              	.LASF74:
 7242 08be 496E7465 		.ascii	"IntensityLogger_ONE_Channel\000"
 7242      6E736974 
 7242      794C6F67 
 7242      6765725F 
 7242      4F4E455F 
 7243              	.LASF50:
 7244 08da 4E657874 		.ascii	"Nextion_Send_Value_To_Valuebox\000"
 7244      696F6E5F 
 7244      53656E64 
 7244      5F56616C 
 7244      75655F54 
 7245              	.LASF111:
 7246 08f9 74696D65 		.ascii	"timerflag5000ms\000"
 7246      72666C61 
 7246      67353030 
 7246      306D7300 
 7247              	.LASF15:
 7248 0909 63686172 		.ascii	"char\000"
 7248      00
 7249              	.LASF80:
 7250 090e 56464443 		.ascii	"VFDCursorOff\000"
 7250      7572736F 
 7250      724F6666 
 7250      00
 7251              	.LASF70:
 7252 091b 55415254 		.ascii	"UART_TFT_InterruptFunction\000"
 7252      5F544654 
 7252      5F496E74 
 7252      65727275 
 7252      70744675 
 7253              	.LASF124:
 7254 0936 53544931 		.ascii	"STI100_write_requested\000"
 7254      30305F77 
 7254      72697465 
 7254      5F726571 
 7254      75657374 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 175


 7255              	.LASF98:
 7256 094d 4C696665 		.ascii	"Lifetime_max\000"
 7256      74696D65 
 7256      5F6D6178 
 7256      00
 7257              	.LASF55:
 7258 095a 4E657874 		.ascii	"Nextion_SendSaveProgressbarValue\000"
 7258      696F6E5F 
 7258      53656E64 
 7258      53617665 
 7258      50726F67 
 7259              	.LASF99:
 7260 097b 6D656E75 		.ascii	"menustate\000"
 7260      73746174 
 7260      6500
 7261              	.LASF123:
 7262 0985 53544931 		.ascii	"STI100_writing\000"
 7262      30305F77 
 7262      72697469 
 7262      6E6700
 7263              	.LASF36:
 7264 0994 4E6F5F53 		.ascii	"No_Steps\000"
 7264      74657073 
 7264      00
 7265              	.LASF125:
 7266 099d 53544931 		.ascii	"STI100_present_results_saved\000"
 7266      30305F70 
 7266      72657365 
 7266      6E745F72 
 7266      6573756C 
 7267              	.LASF84:
 7268 09ba 73746174 		.ascii	"status\000"
 7268      757300
 7269              	.LASF48:
 7270 09c1 4E657874 		.ascii	"Nextion_Send_Text_to_Textbox\000"
 7270      696F6E5F 
 7270      53656E64 
 7270      5F546578 
 7270      745F746F 
 7271              	.LASF113:
 7272 09de 636E745F 		.ascii	"cnt_timer1000ms\000"
 7272      74696D65 
 7272      72313030 
 7272      306D7300 
 7273              	.LASF115:
 7274 09ee 736C6964 		.ascii	"slider_ready\000"
 7274      65725F72 
 7274      65616479 
 7274      00
 7275              	.LASF77:
 7276 09fb 436C6F73 		.ascii	"CloseLoggerFile\000"
 7276      654C6F67 
 7276      67657246 
 7276      696C6500 
 7277              	.LASF126:
 7278 0a0b 4E616D65 		.ascii	"NameOfValuebox\000"
 7278      4F665661 
ARM GAS  C:\Users\LocalAdmin\AppData\Local\Temp\cchhZa3p.s 			page 176


 7278      6C756562 
 7278      6F7800
 7279              	.LASF62:
 7280 0a1a 70726573 		.ascii	"presence_ths\000"
 7280      656E6365 
 7280      5F746873 
 7280      00
 7281              	.LASF16:
 7282 0a27 63797374 		.ascii	"cystatus\000"
 7282      61747573 
 7282      00
 7283              	.LASF116:
 7284 0a30 4D656173 		.ascii	"Measurement_running\000"
 7284      7572656D 
 7284      656E745F 
 7284      72756E6E 
 7284      696E6700 
 7285              	.LASF54:
 7286 0a44 4E657874 		.ascii	"Nextion_HideButtonSaveToUSB\000"
 7286      696F6E5F 
 7286      48696465 
 7286      42757474 
 7286      6F6E5361 
 7287              	.LASF110:
 7288 0a60 74696D65 		.ascii	"timerflag1000ms\000"
 7288      72666C61 
 7288      67313030 
 7288      306D7300 
 7289              	.LASF19:
 7290 0a70 46535F46 		.ascii	"FS_FILE\000"
 7290      494C4500 
 7291              	.LASF23:
 7292 0a78 73746570 		.ascii	"steps\000"
 7292      7300
 7293              	.LASF81:
 7294 0a7e 6D61696E 		.ascii	"main\000"
 7294      00
 7295              	.LASF94:
 7296 0a83 4E756D62 		.ascii	"NumberOfMeasurements\000"
 7296      65724F66 
 7296      4D656173 
 7296      7572656D 
 7296      656E7473 
 7297              	.LASF25:
 7298 0a98 665F7265 		.ascii	"f_rel\000"
 7298      6C00
 7299              	.LASF90:
 7300 0a9e 4C696665 		.ascii	"Lifetime_s\000"
 7300      74696D65 
 7300      5F7300
 7301              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
